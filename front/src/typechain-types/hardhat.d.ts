/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IWETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH9__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC2612",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC2612__factory>;
    getContractFactory(
      name: "SafeERC20Namer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20Namer__factory>;
    getContractFactory(
      name: "ICauldron",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICauldron__factory>;
    getContractFactory(
      name: "ICauldronGov",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICauldronGov__factory>;
    getContractFactory(
      name: "IFYToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFYToken__factory>;
    getContractFactory(
      name: "IFYTokenFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFYTokenFactory__factory>;
    getContractFactory(
      name: "IJoin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IJoin__factory>;
    getContractFactory(
      name: "IJoinFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IJoinFactory__factory>;
    getContractFactory(
      name: "ILadle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILadle__factory>;
    getContractFactory(
      name: "ILadleGov",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILadleGov__factory>;
    getContractFactory(
      name: "IMultiOracleGov",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMultiOracleGov__factory>;
    getContractFactory(
      name: "IOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracle__factory>;
    getContractFactory(
      name: "IPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPool__factory>;
    getContractFactory(
      name: "IPoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolFactory__factory>;
    getContractFactory(
      name: "Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pool__factory>;
    getContractFactory(
      name: "PoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolFactory__factory>;
    getContractFactory(
      name: "YieldMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YieldMath__factory>;
    getContractFactory(
      name: "ERC20Test",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Test__factory>;
    getContractFactory(
      name: "Cauldron",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Cauldron__factory>;
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "ChainlinkAggregatorV3Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkAggregatorV3Mock__factory>;
    getContractFactory(
      name: "ChainlinkMultiOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkMultiOracle__factory>;
    getContractFactory(
      name: "ChainlinkUSDMultiOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkUSDMultiOracle__factory>;
    getContractFactory(
      name: "CompoundMultiOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompoundMultiOracle__factory>;
    getContractFactory(
      name: "CTokenInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CTokenInterface__factory>;
    getContractFactory(
      name: "CTokenMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CTokenMock__factory>;
    getContractFactory(
      name: "CTokenMultiOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CTokenMultiOracle__factory>;
    getContractFactory(
      name: "FYToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FYToken__factory>;
    getContractFactory(
      name: "FYTokenFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FYTokenFactory__factory>;
    getContractFactory(
      name: "Join",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Join__factory>;
    getContractFactory(
      name: "JoinFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.JoinFactory__factory>;
    getContractFactory(
      name: "Ladle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ladle__factory>;
    getContractFactory(
      name: "LadleStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LadleStorage__factory>;
    getContractFactory(
      name: "Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Router__factory>;
    getContractFactory(
      name: "IWitchGov",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWitchGov__factory>;
    getContractFactory(
      name: "Wand",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Wand__factory>;
    getContractFactory(
      name: "Witch",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Witch__factory>;
    getContractFactory(
      name: "DaiAbstract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DaiAbstract__factory>;
    getContractFactory(
      name: "IERC3156FlashBorrower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashBorrower__factory>;
    getContractFactory(
      name: "IERC3156FlashLender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashLender__factory>;

    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IWETH9",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH9>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC2612",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC2612>;
    getContractAt(
      name: "SafeERC20Namer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20Namer>;
    getContractAt(
      name: "ICauldron",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICauldron>;
    getContractAt(
      name: "ICauldronGov",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICauldronGov>;
    getContractAt(
      name: "IFYToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFYToken>;
    getContractAt(
      name: "IFYTokenFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFYTokenFactory>;
    getContractAt(
      name: "IJoin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IJoin>;
    getContractAt(
      name: "IJoinFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IJoinFactory>;
    getContractAt(
      name: "ILadle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILadle>;
    getContractAt(
      name: "ILadleGov",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILadleGov>;
    getContractAt(
      name: "IMultiOracleGov",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMultiOracleGov>;
    getContractAt(
      name: "IOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracle>;
    getContractAt(
      name: "IPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPool>;
    getContractAt(
      name: "IPoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolFactory>;
    getContractAt(
      name: "Pool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pool>;
    getContractAt(
      name: "PoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolFactory>;
    getContractAt(
      name: "YieldMath",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YieldMath>;
    getContractAt(
      name: "ERC20Test",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Test>;
    getContractAt(
      name: "Cauldron",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Cauldron>;
    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "ChainlinkAggregatorV3Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkAggregatorV3Mock>;
    getContractAt(
      name: "ChainlinkMultiOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkMultiOracle>;
    getContractAt(
      name: "ChainlinkUSDMultiOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkUSDMultiOracle>;
    getContractAt(
      name: "CompoundMultiOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompoundMultiOracle>;
    getContractAt(
      name: "CTokenInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CTokenInterface>;
    getContractAt(
      name: "CTokenMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CTokenMock>;
    getContractAt(
      name: "CTokenMultiOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CTokenMultiOracle>;
    getContractAt(
      name: "FYToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FYToken>;
    getContractAt(
      name: "FYTokenFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FYTokenFactory>;
    getContractAt(
      name: "Join",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Join>;
    getContractAt(
      name: "JoinFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.JoinFactory>;
    getContractAt(
      name: "Ladle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ladle>;
    getContractAt(
      name: "LadleStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LadleStorage>;
    getContractAt(
      name: "Router",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Router>;
    getContractAt(
      name: "IWitchGov",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWitchGov>;
    getContractAt(
      name: "Wand",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Wand>;
    getContractAt(
      name: "Witch",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Witch>;
    getContractAt(
      name: "DaiAbstract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DaiAbstract>;
    getContractAt(
      name: "IERC3156FlashBorrower",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC3156FlashBorrower>;
    getContractAt(
      name: "IERC3156FlashLender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC3156FlashLender>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
