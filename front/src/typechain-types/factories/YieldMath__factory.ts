/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { YieldMath, YieldMathInterface } from "../YieldMath";

const _abi = [
  {
    inputs: [],
    name: "MAX",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ONE",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "TWO",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "VAR",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "baseReserves",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "fyTokenReserves",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "fyTokenAmount",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "timeTillMaturity",
        type: "uint128",
      },
      {
        internalType: "int128",
        name: "ts",
        type: "int128",
      },
      {
        internalType: "int128",
        name: "g",
        type: "int128",
      },
    ],
    name: "baseInForFYTokenOut",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "baseReserves",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "fyTokenReserves",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "fyTokenAmount",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "timeTillMaturity",
        type: "uint128",
      },
      {
        internalType: "int128",
        name: "ts",
        type: "int128",
      },
      {
        internalType: "int128",
        name: "g",
        type: "int128",
      },
    ],
    name: "baseOutForFYTokenIn",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "baseReserves",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "fyTokenReserves",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "baseAmount",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "timeTillMaturity",
        type: "uint128",
      },
      {
        internalType: "int128",
        name: "ts",
        type: "int128",
      },
      {
        internalType: "int128",
        name: "g",
        type: "int128",
      },
    ],
    name: "fyTokenInForBaseOut",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "baseReserves",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "fyTokenReserves",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "baseAmount",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "timeTillMaturity",
        type: "uint128",
      },
      {
        internalType: "int128",
        name: "ts",
        type: "int128",
      },
      {
        internalType: "int128",
        name: "g",
        type: "int128",
      },
    ],
    name: "fyTokenOutForBaseIn",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "baseReserves",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "fyTokenReserves",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "totalSupply",
        type: "uint256",
      },
      {
        internalType: "uint128",
        name: "timeTillMaturity",
        type: "uint128",
      },
      {
        internalType: "int128",
        name: "ts",
        type: "int128",
      },
    ],
    name: "invariant",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "baseReserves",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "fyTokenReserves",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "timeTillMaturity",
        type: "uint128",
      },
      {
        internalType: "int128",
        name: "ts",
        type: "int128",
      },
      {
        internalType: "int128",
        name: "g",
        type: "int128",
      },
    ],
    name: "maxBaseIn",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "baseReserves",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "fyTokenReserves",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "timeTillMaturity",
        type: "uint128",
      },
      {
        internalType: "int128",
        name: "ts",
        type: "int128",
      },
      {
        internalType: "int128",
        name: "g",
        type: "int128",
      },
    ],
    name: "maxBaseOut",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "baseReserves",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "fyTokenReserves",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "timeTillMaturity",
        type: "uint128",
      },
      {
        internalType: "int128",
        name: "ts",
        type: "int128",
      },
      {
        internalType: "int128",
        name: "g",
        type: "int128",
      },
    ],
    name: "maxFYTokenIn",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "baseReserves",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "fyTokenReserves",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "timeTillMaturity",
        type: "uint128",
      },
      {
        internalType: "int128",
        name: "ts",
        type: "int128",
      },
      {
        internalType: "int128",
        name: "g",
        type: "int128",
      },
    ],
    name: "maxFYTokenOut",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x61229861003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100b95760003560e01c80630219e702146100be578063102d196e146100ee578063209f44651461010157806334945b3a14610114578063405289321461011f5780635fd8dc0814610132578063638c568a146101455780636a31b2d7146101585780639a7d157014610172578063b7ff1b1e14610185578063c2ee3a0814610198578063d49d5181146101a3578063e03824d6146101b1575b600080fd5b6100d16100cc36600461206c565b6101c4565b6040516001600160801b0390911681526020015b60405180910390f35b6100d16100fc36600461206c565b6102fa565b6100d161010f36600461206c565b6103be565b6100d1600160411b81565b6100d161012d3660046120d1565b610402565b6100d16101403660046120d1565b6105b5565b6100d1610153366004612145565b610780565b61016464e8d4a5100081565b6040519081526020016100e5565b6100d16101803660046120d1565b610910565b6100d161019336600461206c565b610a71565b6100d1600160401b81565b6101646001600160801b0381565b6100d16101bf3660046120d1565b610a9c565b6000846001600160801b0316866001600160801b031614156101e8575060006102f1565b60006101f5858585610c20565b905060006102116001600160801b03891683600160401b610cf9565b9050600061022d6001600160801b03891684600160401b610cf9565b9050600061024a8383016001600160801b0316600160411b610dac565b905060006102666001600160801b038316600160401b87610cf9565b6001600160801b03908116915081111561029b5760405162461bcd60e51b815260040161029290612189565b60405180910390fd5b64e8d4a51001600160801b0381106102ba576001600160801b036102c3565b64e8d4a5100081015b9050896001600160801b0316816001600160801b0316116102e657808a036102e9565b60005b955050505050505b95945050505050565b600080610308858585610de3565b905060006103246001600160801b03891683600160401b610cf9565b905060006103406001600160801b03891684600160401b610cf9565b905060008861035f6001600160801b0385850116600160401b87610cf9565b036001600160801b031690506001600160801b0380168111156103945760405162461bcd60e51b815260040161029290612189565b64e8d4a5100081116103a75760006103b0565b64e8d4a5100081035b9a9950505050505050505050565b6000806103ce87878787876101c4565b90506001600160801b038116156103f5576103ed8787838888886105b5565b9150506102f1565b5060009695505050505050565b600080610410858585610c20565b9050600061042c6001600160801b038a1683600160401b610cf9565b6001600160801b03908116915060009061044d908a1684600160401b610cf9565b6001600160801b0390811691508a811689821601908111156104af5760405162461bcd60e51b815260206004820152601b60248201527a2cb4b2b63226b0ba341d102a37b79036bab1b4103130b9b29034b760291b6044820152606401610292565b60006104c96001600160801b03831686600160401b610cf9565b6001600160801b0390811691508484018290039081111561053d5760405162461bcd60e51b815260206004820152602860248201527f5969656c644d6174683a20496e73756666696369656e74206679546f6b656e20604482015267726573657276657360c01b6064820152608401610292565b60006105576001600160801b038316600160401b89610cf9565b6001600160801b039081168e82160391508111156105875760405162461bcd60e51b815260040161029290612189565b64e8d4a51000811161059a5760006105a3565b64e8d4a5100081035b9e9d5050505050505050505050505050565b6000806105c3858585610c20565b905060006105df6001600160801b038a1683600160401b610cf9565b6001600160801b039081169150600090610600908a1684600160401b610cf9565b6001600160801b0390811691508881168a821603908111156106645760405162461bcd60e51b815260206004820152601f60248201527f5969656c644d6174683a20546f6f206d756368206679546f6b656e206f7574006044820152606401610292565b600061067e6001600160801b03831686600160401b610cf9565b6001600160801b039081169150848401829003908111156106f55760405162461bcd60e51b815260206004820152602b60248201527f5969656c644d6174683a20526573756c74696e6720626173652072657365727660448201526a0cae640e8dede40d0d2ced60ab1b6064820152608401610292565b60006001600160801b03808f1690610714908416600160401b8a610cf9565b6001600160801b03160390506001600160801b0380168111156107495760405162461bcd60e51b815260040161029290612189565b64e8d4a51001600160801b038110610768576001600160801b036105a3565b64e8d4a51000019d9c50505050505050505050505050565b60008361078f575060006102f1565b60006107bf6107b46107a9866001600160801b0316610e34565b600f86900b90610e51565b600160401b90610e88565b9050600081600f0b136107e45760405162461bcd60e51b815260040161029290612201565b600060016108006001600160801b03891684600160401b610cf9565b6001600160801b039081169061081d908b1685600160401b610cf9565b6001600160801b031601901c90506001600160801b038016811061087d5760405162461bcd60e51b81526020600482015260176024820152765969656c644d6174683a2053756d206f766572666c6f7760481b6044820152606401610292565b6000866108986001600160801b038416600160401b86610cf9565b6001600160801b0316816108ae576108ae61224c565b0490506001600160801b0381106109045760405162461bcd60e51b815260206004820152601a6024820152795969656c644d6174683a20526573756c74206f766572666c6f7760301b6044820152606401610292565b98975050505050505050565b60008061091e858585610c20565b9050600061093a6001600160801b038a1683600160401b610cf9565b6001600160801b03908116915060009061095b908a1684600160401b610cf9565b6001600160801b0390811691508881168b821603908111156109be5760405162461bcd60e51b815260206004820152601c60248201527b165a595b1913585d1a0e88151bdbc81b5d58da0818985cd9481bdd5d60221b6044820152606401610292565b60006109d86001600160801b03831686600160401b610cf9565b6001600160801b03908116915084840182900390811115610a525760405162461bcd60e51b815260206004820152602e60248201527f5969656c644d6174683a20526573756c74696e67206679546f6b656e2072657360448201526d0cae4eccae640e8dede40d0d2ced60931b6064820152608401610292565b60006001600160801b03808e1690610714908416600160401b8a610cf9565b600080610a8187878787876102fa565b9050610a91878783888888610a9c565b979650505050505050565b600080610aaa858585610c20565b90506000610ac66001600160801b038a1683600160401b610cf9565b6001600160801b039081169150600090610ae7908a1684600160401b610cf9565b6001600160801b0390811691508981168982160190811115610b4b5760405162461bcd60e51b815260206004820152601e60248201527f5969656c644d6174683a20546f6f206d756368206679546f6b656e20696e00006044820152606401610292565b6000610b656001600160801b03831686600160401b610cf9565b6001600160801b03908116915084840182900390811115610bd65760405162461bcd60e51b815260206004820152602560248201527f5969656c644d6174683a20496e73756666696369656e74206261736520726573604482015264657276657360d81b6064820152608401610292565b6000610bf06001600160801b038316600160401b89610cf9565b6001600160801b039081168f82160391508111156105875760405162461bcd60e51b815260040161029290612189565b600080610c386107a9866001600160801b0316610e34565b9050600081600f0b1215610c5e5760405162461bcd60e51b8152600401610292906121ca565b6000610c716107b4600f86900b84610e51565b9050600081600f0b13610c965760405162461bcd60e51b815260040161029290612201565b600160401b600f82900b1315610cee5760405162461bcd60e51b815260206004820152601d60248201527f5969656c644d6174683a2067206d75737420626520706f7369746976650000006044820152606401610292565b9150505b9392505050565b60006001600160801b038216610d0e57600080fd5b6001600160801b038416610d37576001600160801b038316610d2f57600080fd5b506000610cf2565b6000826001600160801b0316846001600160801b0316610d5687610ebb565b6001600160801b03036001600160801b03160281610d7657610d7661224c565b0490506001600160801b03811115610d92576000915050610cf2565b610da4816001600160801b03036116d0565b915050610cf2565b600081610db857600080fd5b6000610dc48484611e85565b905060016001607f1b036001600160801b0382161115610cf257600080fd5b600080610dfb6107a9866001600160801b0316610e34565b9050600081600f0b1215610e215760405162461bcd60e51b8152600401610292906121ca565b6000610c716107b4600f84900b86611fe6565b600060016001603f1b03821115610e4a57600080fd5b5060401b90565b6000600f83810b9083900b0260401d60016001607f1b03198112801590610e7f575060016001607f1b038113155b610cf257600080fd5b6000600f82810b9084900b0360016001607f1b03198112801590610e7f575060016001607f1b03811315610cf257600080fd5b60006001600160801b038216610ed057600080fd5b6001600160801b038216607f60791b600160401b821015610efd5760409190911b9060016001607f1b0319015b600160601b821015610f1b5760209190911b9060016001607e1b0319015b600160701b821015610f395760109190911b9060016001607d1b0319015b600160781b821015610f575760089190911b9060016001607c1b0319015b6001607c1b821015610f755760049190911b9060016001607b1b0319015b6001607e1b821015610f935760029190911b9060016001607a1b0319015b6001607f1b821015610fb15760019190911b906001600160791b0319015b908002607f1c90600160801b8210610fd15760019190911c90600160781b175b908002607f1c90600160801b8210610ff15760019190911c90600160771b175b908002607f1c90600160801b82106110115760019190911c90600160761b175b908002607f1c90600160801b82106110315760019190911c90600160751b175b908002607f1c90600160801b82106110515760019190911c90600160741b175b908002607f1c90600160801b82106110715760019190911c90600160731b175b908002607f1c90600160801b82106110915760019190911c90600160721b175b908002607f1c90600160801b82106110b15760019190911c90600160711b175b908002607f1c90600160801b82106110d15760019190911c90600160701b175b908002607f1c90600160801b82106110f15760019190911c906001606f1b175b908002607f1c90600160801b82106111115760019190911c906001606e1b175b908002607f1c90600160801b82106111315760019190911c906001606d1b175b908002607f1c90600160801b82106111515760019190911c906001606c1b175b908002607f1c90600160801b82106111715760019190911c906001606b1b175b908002607f1c90600160801b82106111915760019190911c906001606a1b175b908002607f1c90600160801b82106111b15760019190911c90600160691b175b908002607f1c90600160801b82106111d15760019190911c90600160681b175b908002607f1c90600160801b82106111f15760019190911c90600160671b175b908002607f1c90600160801b82106112115760019190911c90600160661b175b908002607f1c90600160801b82106112315760019190911c90600160651b175b908002607f1c90600160801b82106112515760019190911c90600160641b175b908002607f1c90600160801b82106112715760019190911c90600160631b175b908002607f1c90600160801b82106112915760019190911c90600160621b175b908002607f1c90600160801b82106112b15760019190911c90600160611b175b908002607f1c90600160801b82106112d15760019190911c90600160601b175b908002607f1c90600160801b82106112f15760019190911c906001605f1b175b908002607f1c90600160801b82106113115760019190911c906001605e1b175b908002607f1c90600160801b82106113315760019190911c906001605d1b175b908002607f1c90600160801b82106113515760019190911c906001605c1b175b908002607f1c90600160801b82106113715760019190911c906001605b1b175b908002607f1c90600160801b82106113915760019190911c906001605a1b175b908002607f1c90600160801b82106113b15760019190911c90600160591b175b908002607f1c90600160801b82106113d15760019190911c90600160581b175b908002607f1c90600160801b82106113f15760019190911c90600160571b175b908002607f1c90600160801b82106114115760019190911c90600160561b175b908002607f1c90600160801b82106114315760019190911c90600160551b175b908002607f1c90600160801b82106114515760019190911c90600160541b175b908002607f1c90600160801b82106114715760019190911c90600160531b175b908002607f1c90600160801b82106114915760019190911c90600160521b175b908002607f1c90600160801b82106114b15760019190911c90600160511b175b908002607f1c90600160801b82106114d15760019190911c90600160501b175b908002607f1c90600160801b82106114f15760019190911c906001604f1b175b908002607f1c90600160801b82106115115760019190911c906001604e1b175b908002607f1c90600160801b82106115315760019190911c906001604d1b175b908002607f1c90600160801b82106115515760019190911c906001604c1b175b908002607f1c90600160801b82106115715760019190911c906001604b1b175b908002607f1c90600160801b82106115915760019190911c906001604a1b175b908002607f1c90600160801b82106115b15760019190911c90600160491b175b908002607f1c90600160801b82106115d15760019190911c90600160481b175b908002607f1c90600160801b82106115f15760019190911c90600160471b175b908002607f1c90600160801b82106116115760019190911c90600160461b175b908002607f1c90600160801b82106116315760019190911c90600160451b175b908002607f1c90600160801b82106116515760019190911c90600160441b175b908002607f1c90600160801b82106116715760019190911c90600160431b175b908002607f1c90600160801b82106116915760019190911c90600160421b175b908002607f1c90600160801b82106116b15760019190911c90600160411b175b908002607f1c90600160801b8210610cf257600160401b179392505050565b60006001607f1b600160781b8316156116f9576fb504f333f9de6484597d89b3754abe9f02607f1c5b600160771b83161561171b576f9837f0518db8a96f46ad23182e42f6f602607f1c5b600160761b83161561173d576f8b95c1e3ea8bd6e6fbe4628758a53c9002607f1c5b600160751b83161561175f576f85aac367cc487b14c5c95b8c2154c1b202607f1c5b600160741b831615611781576f82cd8698ac2ba1d73e2a475b46520bff02607f1c5b600160731b8316156117a3576f8164d1f3bc0307737be56527bd14def402607f1c5b600160721b8316156117c5576f80b1ed4fd999ab6c25335719b6e6fd2002607f1c5b600160711b8316156117e7576f8058d7d2d5e5f6b094d589f608ee4aa202607f1c5b600160701b831615611809576f802c6436d0e04f50ff8ce94a6797b3ce02607f1c5b6001606f1b83161561182b576f8016302f174676283690dfe44d11d00802607f1c5b6001606e1b83161561184d576f800b179c82028fd0945e54e2ae18f2f002607f1c5b6001606d1b83161561186f576f80058baf7fee3b5d1c718b38e549cb9302607f1c5b6001606c1b831615611891576f8002c5d00fdcfcb6b6566a58c048be1f02607f1c5b6001606b1b8316156118b3576f800162e61bed4a48e84c2e1a463473d902607f1c5b6001606a1b8316156118d5576f8000b17292f702a3aa22beacca94901302607f1c5b600160691b8316156118f7576f800058b92abbae02030c5fa5256f41fe02607f1c5b600160681b831615611919576f80002c5c8dade4d71776c0f4dbea67d602607f1c5b600160671b83161561193b576f8000162e44eaf636526be456600bdbe402607f1c5b600160661b83161561195d576f80000b1721fa7c188307016c1cd4e8b602607f1c5b600160651b83161561197f576f8000058b90de7e4cecfc487503488bb102607f1c5b600160641b8316156119a1576f800002c5c8678f36cbfce50a6de60b1402607f1c5b600160631b8316156119c3576f80000162e431db9f80b2347b5d62e51602607f1c5b600160621b8316156119e5576f800000b1721872d0c7b08cf1e011415202607f1c5b600160611b831615611a07576f80000058b90c1aa8a5c3736cb77e8dff02607f1c5b600160601b831615611a29576f8000002c5c8605a4635f2efc2362d97802607f1c5b6001605f1b831615611a4b576f800000162e4300e635cf4a109e3939bd02607f1c5b6001605e1b831615611a6d576f8000000b17217ff81bef9c551590cf8302607f1c5b6001605d1b831615611a8f576f800000058b90bfdd4e39cd52c0cfa27c02607f1c5b6001605c1b831615611ab1576f80000002c5c85fe6f72d669e0e76e41102607f1c5b6001605b1b831615611ad3576f8000000162e42ff18f9ad35186d0df2802607f1c5b6001605a1b831615611af5576f80000000b17217f84cce71aa0dcfffe702607f1c5b600160591b831615611b17576f8000000058b90bfc07a77ad56ed22aaa02607f1c5b600160581b831615611b39576f800000002c5c85fdfc23cdead40da8d602607f1c5b600160571b831615611b5b576f80000000162e42fefc25eb1571853a6602607f1c5b600160561b831615611b7d576f800000000b17217f7d97f692baacded502607f1c5b600160551b831615611b9f576f80000000058b90bfbead3b8b5dd254d702607f1c5b600160541b831615611bc1576f8000000002c5c85fdf4eedd62f084e6702607f1c5b600160531b831615611be3576f800000000162e42fefa58aef378bf58602607f1c5b600160521b831615611c05576f8000000000b17217f7d24a78a3c7ef0202607f1c5b600160511b831615611c27576f800000000058b90bfbe9067c93e474a602607f1c5b600160501b831615611c49576f80000000002c5c85fdf47b8e5a72599f02607f1c5b6001604f1b831615611c6b576f8000000000162e42fefa3bdb315934a202607f1c5b6001604e1b831615611c8d576f80000000000b17217f7d1d7299b49c4602607f1c5b6001604d1b831615611caf576f8000000000058b90bfbe8e9a8d1c4ea002607f1c5b6001604c1b831615611cd1576f800000000002c5c85fdf4745969ea76f02607f1c5b6001604b1b831615611cf3576f80000000000162e42fefa3a0df5373bf02607f1c5b6001604a1b831615611d15576f800000000000b17217f7d1cff4aac1e102607f1c5b600160491b831615611d37576f80000000000058b90bfbe8e7db95a2f102607f1c5b600160481b831615611d59576f8000000000002c5c85fdf473e61ae1f802607f1c5b600160471b831615611d7b576f800000000000162e42fefa39f121751c02607f1c5b600160461b831615611d9d576f8000000000000b17217f7d1cf815bb9602607f1c5b600160451b831615611dbf576f800000000000058b90bfbe8e7bec1e0d02607f1c5b600160441b831615611de1576f80000000000002c5c85fdf473dee5f1702607f1c5b600160431b831615611e03576f8000000000000162e42fefa39ef5438f02607f1c5b600160421b831615611e245768b17217f7d1cf7a26c86001607f1b0102607f1c5b600160411b831615611e45576858b90bfbe8e7bcf4a46001607f1b0102607f1c5b600160401b831615611e6657682c5c85fdf473de72a26001607f1b0102607f1c5b607f60799390931c83169092036001600160801b03169190911c919050565b600081611e9157600080fd5b60006001600160c01b038411611ebc5782604085901b81611eb457611eb461224c565b049050611fd2565b60c084811c600160201b8110611ed4576020918201911c5b620100008110611ee6576010918201911c5b6101008110611ef7576008918201911c5b60108110611f07576004918201911c5b60048110611f17576002918201911c5b60028110611f26576001820191505b60bf820360018603901c6001018260ff0387901b81611f4757611f4761224c565b0492506001600160801b03831115611f5e57600080fd5b608085901c83026001600160801b038616840260c088901c604089901b82811015611f8a576001820391505b608084901b92900382811015611fa1576001820391505b829003608084901c8214611fb757611fb7612236565b888181611fc657611fc661224c565b04870196505050505050505b6001600160801b03811115610cf257600080fd5b600081600f0b60001415611ff957600080fd5b600082600f0b604085600f0b901b816120145761201461224c565b05905060016001607f1b03198112801590610e7f575060016001607f1b03811315610cf257600080fd5b8035600f81900b811461205057600080fd5b919050565b80356001600160801b038116811461205057600080fd5b600080600080600060a0868803121561208457600080fd5b61208d86612055565b945061209b60208701612055565b93506120a960408701612055565b92506120b76060870161203e565b91506120c56080870161203e565b90509295509295909350565b60008060008060008060c087890312156120ea57600080fd5b6120f387612055565b955061210160208801612055565b945061210f60408801612055565b935061211d60608801612055565b925061212b6080880161203e565b915061213960a0880161203e565b90509295509295509295565b600080600080600060a0868803121561215d57600080fd5b61216686612055565b945061217460208701612055565b9350604086013592506120b760608701612055565b60208082526021908201527f5969656c644d6174683a20526f756e64696e6720696e6475636564206572726f6040820152603960f91b606082015260800190565b6020808252601d908201527f5969656c644d6174683a2074206d75737420626520706f736974697665000000604082015260600190565b6020808252818101527f5969656c644d6174683a20546f6f206661722066726f6d206d61747572697479604082015260600190565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea2646970667358221220b54cde05683ed3aea6725cf7f77b80a9fa7daf8cef2e265350dddd28163cc95a64736f6c63430008060033";

type YieldMathConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: YieldMathConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class YieldMath__factory extends ContractFactory {
  constructor(...args: YieldMathConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<YieldMath> {
    return super.deploy(overrides || {}) as Promise<YieldMath>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): YieldMath {
    return super.attach(address) as YieldMath;
  }
  connect(signer: Signer): YieldMath__factory {
    return super.connect(signer) as YieldMath__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): YieldMathInterface {
    return new utils.Interface(_abi) as YieldMathInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): YieldMath {
    return new Contract(address, _abi, signerOrProvider) as YieldMath;
  }
}
