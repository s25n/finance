/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type SeriesStruct = {
  fyToken: string;
  baseId: BytesLike;
  maturity: BigNumberish;
};

export type SeriesStructOutput = [string, string, number] & {
  fyToken: string;
  baseId: string;
  maturity: number;
};

export interface ICauldronGovInterface extends utils.Interface {
  functions: {
    "addAsset(bytes6,address)": FunctionFragment;
    "addIlks(bytes6,bytes6[])": FunctionFragment;
    "addSeries(bytes6,bytes6,address)": FunctionFragment;
    "assets(bytes6)": FunctionFragment;
    "lendingOracles(bytes6)": FunctionFragment;
    "series(bytes6)": FunctionFragment;
    "setDebtLimits(bytes6,bytes6,uint96,uint24,uint8)": FunctionFragment;
    "setLendingOracle(bytes6,address)": FunctionFragment;
    "setSpotOracle(bytes6,bytes6,address,uint32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAsset",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addIlks",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addSeries",
    values: [BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "assets", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "lendingOracles",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "series", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setDebtLimits",
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingOracle",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpotOracle",
    values: [BytesLike, BytesLike, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addIlks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addSeries", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lendingOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "series", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDebtLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpotOracle",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ICauldronGov extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICauldronGovInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAsset(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addIlks(
      arg0: BytesLike,
      arg1: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSeries(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assets(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    lendingOracles(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    series(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[SeriesStructOutput]>;

    setDebtLimits(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLendingOracle(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSpotOracle(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addAsset(
    arg0: BytesLike,
    arg1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addIlks(
    arg0: BytesLike,
    arg1: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSeries(
    arg0: BytesLike,
    arg1: BytesLike,
    arg2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assets(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  lendingOracles(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  series(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<SeriesStructOutput>;

  setDebtLimits(
    arg0: BytesLike,
    arg1: BytesLike,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLendingOracle(
    arg0: BytesLike,
    arg1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSpotOracle(
    arg0: BytesLike,
    arg1: BytesLike,
    arg2: string,
    arg3: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAsset(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addIlks(
      arg0: BytesLike,
      arg1: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    addSeries(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<void>;

    assets(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    lendingOracles(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    series(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<SeriesStructOutput>;

    setDebtLimits(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLendingOracle(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpotOracle(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addAsset(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addIlks(
      arg0: BytesLike,
      arg1: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSeries(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assets(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    lendingOracles(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    series(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    setDebtLimits(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLendingOracle(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSpotOracle(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAsset(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addIlks(
      arg0: BytesLike,
      arg1: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSeries(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assets(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lendingOracles(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    series(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDebtLimits(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLendingOracle(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSpotOracle(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
