/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type BalancesStruct = { art: BigNumberish; ink: BigNumberish };

export type BalancesStructOutput = [BigNumber, BigNumber] & {
  art: BigNumber;
  ink: BigNumber;
};

export type VaultStruct = {
  owner: string;
  seriesId: BytesLike;
  ilkId: BytesLike;
};

export type VaultStructOutput = [string, string, string] & {
  owner: string;
  seriesId: string;
  ilkId: string;
};

export type DebtStruct = {
  max: BigNumberish;
  min: BigNumberish;
  dec: BigNumberish;
  sum: BigNumberish;
};

export type DebtStructOutput = [BigNumber, number, number, BigNumber] & {
  max: BigNumber;
  min: number;
  dec: number;
  sum: BigNumber;
};

export type SeriesStruct = {
  fyToken: string;
  baseId: BytesLike;
  maturity: BigNumberish;
};

export type SeriesStructOutput = [string, string, number] & {
  fyToken: string;
  baseId: string;
  maturity: number;
};

export type SpotOracleStruct = { oracle: string; ratio: BigNumberish };

export type SpotOracleStructOutput = [string, number] & {
  oracle: string;
  ratio: number;
};

export interface ICauldronInterface extends utils.Interface {
  functions: {
    "accrual(bytes6)": FunctionFragment;
    "assets(bytes6)": FunctionFragment;
    "balances(bytes12)": FunctionFragment;
    "build(address,bytes12,bytes6,bytes6)": FunctionFragment;
    "debt(bytes6,bytes6)": FunctionFragment;
    "debtFromBase(bytes6,uint128)": FunctionFragment;
    "debtToBase(bytes6,uint128)": FunctionFragment;
    "destroy(bytes12)": FunctionFragment;
    "give(bytes12,address)": FunctionFragment;
    "lendingOracles(bytes6)": FunctionFragment;
    "level(bytes12)": FunctionFragment;
    "mature(bytes6)": FunctionFragment;
    "pour(bytes12,int128,int128)": FunctionFragment;
    "roll(bytes12,bytes6,int128)": FunctionFragment;
    "series(bytes6)": FunctionFragment;
    "slurp(bytes12,uint128,uint128)": FunctionFragment;
    "spotOracles(bytes6,bytes6)": FunctionFragment;
    "stir(bytes12,bytes12,uint128,uint128)": FunctionFragment;
    "tweak(bytes12,bytes6,bytes6)": FunctionFragment;
    "vaults(bytes12)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "accrual", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "assets", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "balances", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "build",
    values: [string, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "debt",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "debtFromBase",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "debtToBase",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "destroy", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "give",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lendingOracles",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "level", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "mature", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "pour",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "roll",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "series", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "slurp",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "spotOracles",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stir",
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tweak",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "vaults", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "accrual", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "build", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "debt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "debtFromBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtToBase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "destroy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "give", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lendingOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "level", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mature", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pour", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "series", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slurp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "spotOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stir", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tweak", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;

  events: {};
}

export interface ICauldron extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICauldronInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accrual(
      seriesId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assets(assetsId: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    balances(
      vault: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BalancesStructOutput]>;

    build(
      owner: string,
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    debt(
      baseId: BytesLike,
      ilkId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[DebtStructOutput]>;

    debtFromBase(
      seriesId: BytesLike,
      base: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    debtToBase(
      seriesId: BytesLike,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    destroy(
      vault: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    give(
      vaultId: BytesLike,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lendingOracles(
      baseId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    level(
      vaultId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mature(
      seriesId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pour(
      vaultId: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    roll(
      vaultId: BytesLike,
      seriesId: BytesLike,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    series(
      seriesId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[SeriesStructOutput]>;

    slurp(
      vaultId: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    spotOracles(
      baseId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stir(
      from: BytesLike,
      to: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tweak(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaults(
      vault: BytesLike,
      overrides?: CallOverrides
    ): Promise<[VaultStructOutput]>;
  };

  accrual(
    seriesId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assets(assetsId: BytesLike, overrides?: CallOverrides): Promise<string>;

  balances(
    vault: BytesLike,
    overrides?: CallOverrides
  ): Promise<BalancesStructOutput>;

  build(
    owner: string,
    vaultId: BytesLike,
    seriesId: BytesLike,
    ilkId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  debt(
    baseId: BytesLike,
    ilkId: BytesLike,
    overrides?: CallOverrides
  ): Promise<DebtStructOutput>;

  debtFromBase(
    seriesId: BytesLike,
    base: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  debtToBase(
    seriesId: BytesLike,
    art: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  destroy(
    vault: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  give(
    vaultId: BytesLike,
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lendingOracles(baseId: BytesLike, overrides?: CallOverrides): Promise<string>;

  level(
    vaultId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mature(
    seriesId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pour(
    vaultId: BytesLike,
    ink: BigNumberish,
    art: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  roll(
    vaultId: BytesLike,
    seriesId: BytesLike,
    art: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  series(
    seriesId: BytesLike,
    overrides?: CallOverrides
  ): Promise<SeriesStructOutput>;

  slurp(
    vaultId: BytesLike,
    ink: BigNumberish,
    art: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  spotOracles(
    baseId: BytesLike,
    ilkId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stir(
    from: BytesLike,
    to: BytesLike,
    ink: BigNumberish,
    art: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tweak(
    vaultId: BytesLike,
    seriesId: BytesLike,
    ilkId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaults(
    vault: BytesLike,
    overrides?: CallOverrides
  ): Promise<VaultStructOutput>;

  callStatic: {
    accrual(seriesId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    assets(assetsId: BytesLike, overrides?: CallOverrides): Promise<string>;

    balances(
      vault: BytesLike,
      overrides?: CallOverrides
    ): Promise<BalancesStructOutput>;

    build(
      owner: string,
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: CallOverrides
    ): Promise<VaultStructOutput>;

    debt(
      baseId: BytesLike,
      ilkId: BytesLike,
      overrides?: CallOverrides
    ): Promise<DebtStructOutput>;

    debtFromBase(
      seriesId: BytesLike,
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtToBase(
      seriesId: BytesLike,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    destroy(vault: BytesLike, overrides?: CallOverrides): Promise<void>;

    give(
      vaultId: BytesLike,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<VaultStructOutput>;

    lendingOracles(
      baseId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    level(vaultId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    mature(seriesId: BytesLike, overrides?: CallOverrides): Promise<void>;

    pour(
      vaultId: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BalancesStructOutput>;

    roll(
      vaultId: BytesLike,
      seriesId: BytesLike,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[VaultStructOutput, BalancesStructOutput]>;

    series(
      seriesId: BytesLike,
      overrides?: CallOverrides
    ): Promise<SeriesStructOutput>;

    slurp(
      vaultId: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BalancesStructOutput>;

    spotOracles(
      baseId: BytesLike,
      ilkId: BytesLike,
      overrides?: CallOverrides
    ): Promise<SpotOracleStructOutput>;

    stir(
      from: BytesLike,
      to: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BalancesStructOutput, BalancesStructOutput]>;

    tweak(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: CallOverrides
    ): Promise<VaultStructOutput>;

    vaults(
      vault: BytesLike,
      overrides?: CallOverrides
    ): Promise<VaultStructOutput>;
  };

  filters: {};

  estimateGas: {
    accrual(
      seriesId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assets(assetsId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    balances(vault: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    build(
      owner: string,
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    debt(
      baseId: BytesLike,
      ilkId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtFromBase(
      seriesId: BytesLike,
      base: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    debtToBase(
      seriesId: BytesLike,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    destroy(
      vault: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    give(
      vaultId: BytesLike,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lendingOracles(
      baseId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    level(
      vaultId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mature(
      seriesId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pour(
      vaultId: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    roll(
      vaultId: BytesLike,
      seriesId: BytesLike,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    series(seriesId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    slurp(
      vaultId: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    spotOracles(
      baseId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stir(
      from: BytesLike,
      to: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tweak(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaults(vault: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accrual(
      seriesId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assets(
      assetsId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      vault: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    build(
      owner: string,
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    debt(
      baseId: BytesLike,
      ilkId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtFromBase(
      seriesId: BytesLike,
      base: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    debtToBase(
      seriesId: BytesLike,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    destroy(
      vault: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    give(
      vaultId: BytesLike,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lendingOracles(
      baseId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    level(
      vaultId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mature(
      seriesId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pour(
      vaultId: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    roll(
      vaultId: BytesLike,
      seriesId: BytesLike,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    series(
      seriesId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    slurp(
      vaultId: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    spotOracles(
      baseId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stir(
      from: BytesLike,
      to: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tweak(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaults(
      vault: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
