/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IPoolFactoryInterface extends utils.Interface {
  functions: {
    "POOL_BYTECODE_HASH()": FunctionFragment;
    "calculatePoolAddress(address,address)": FunctionFragment;
    "createPool(address,address)": FunctionFragment;
    "g1()": FunctionFragment;
    "g2()": FunctionFragment;
    "getPool(address,address)": FunctionFragment;
    "nextBase()": FunctionFragment;
    "nextFYToken()": FunctionFragment;
    "ts()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "POOL_BYTECODE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePoolAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "g1", values?: undefined): string;
  encodeFunctionData(functionFragment: "g2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPool",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "nextBase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextFYToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ts", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "POOL_BYTECODE_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "g1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "g2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextFYToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ts", data: BytesLike): Result;

  events: {
    "PoolCreated(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
}

export type PoolCreatedEvent = TypedEvent<
  [string, string, string],
  { base: string; fyToken: string; pool: string }
>;

export type PoolCreatedEventFilter = TypedEventFilter<PoolCreatedEvent>;

export interface IPoolFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPoolFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    POOL_BYTECODE_HASH(overrides?: CallOverrides): Promise<[string]>;

    calculatePoolAddress(
      base: string,
      fyToken: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createPool(
      base: string,
      fyToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    g1(overrides?: CallOverrides): Promise<[BigNumber]>;

    g2(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPool(
      base: string,
      fyToken: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    nextBase(overrides?: CallOverrides): Promise<[string]>;

    nextFYToken(overrides?: CallOverrides): Promise<[string]>;

    ts(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  POOL_BYTECODE_HASH(overrides?: CallOverrides): Promise<string>;

  calculatePoolAddress(
    base: string,
    fyToken: string,
    overrides?: CallOverrides
  ): Promise<string>;

  createPool(
    base: string,
    fyToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  g1(overrides?: CallOverrides): Promise<BigNumber>;

  g2(overrides?: CallOverrides): Promise<BigNumber>;

  getPool(
    base: string,
    fyToken: string,
    overrides?: CallOverrides
  ): Promise<string>;

  nextBase(overrides?: CallOverrides): Promise<string>;

  nextFYToken(overrides?: CallOverrides): Promise<string>;

  ts(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    POOL_BYTECODE_HASH(overrides?: CallOverrides): Promise<string>;

    calculatePoolAddress(
      base: string,
      fyToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    createPool(
      base: string,
      fyToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    g1(overrides?: CallOverrides): Promise<BigNumber>;

    g2(overrides?: CallOverrides): Promise<BigNumber>;

    getPool(
      base: string,
      fyToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    nextBase(overrides?: CallOverrides): Promise<string>;

    nextFYToken(overrides?: CallOverrides): Promise<string>;

    ts(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "PoolCreated(address,address,address)"(
      base?: string | null,
      fyToken?: string | null,
      pool?: null
    ): PoolCreatedEventFilter;
    PoolCreated(
      base?: string | null,
      fyToken?: string | null,
      pool?: null
    ): PoolCreatedEventFilter;
  };

  estimateGas: {
    POOL_BYTECODE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePoolAddress(
      base: string,
      fyToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPool(
      base: string,
      fyToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    g1(overrides?: CallOverrides): Promise<BigNumber>;

    g2(overrides?: CallOverrides): Promise<BigNumber>;

    getPool(
      base: string,
      fyToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextBase(overrides?: CallOverrides): Promise<BigNumber>;

    nextFYToken(overrides?: CallOverrides): Promise<BigNumber>;

    ts(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    POOL_BYTECODE_HASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePoolAddress(
      base: string,
      fyToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createPool(
      base: string,
      fyToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    g1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    g2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPool(
      base: string,
      fyToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextFYToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ts(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
