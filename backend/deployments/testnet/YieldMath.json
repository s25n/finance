{
  "address": "0xaAce8Db985F05794634b39739ccD7a049Cd8CB8d",
  "abi": [
    {
      "inputs": [],
      "name": "MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TWO",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "baseReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "fyTokenReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "fyTokenAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "timeTillMaturity",
          "type": "uint128"
        },
        {
          "internalType": "int128",
          "name": "ts",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "g",
          "type": "int128"
        }
      ],
      "name": "baseInForFYTokenOut",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "baseReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "fyTokenReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "fyTokenAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "timeTillMaturity",
          "type": "uint128"
        },
        {
          "internalType": "int128",
          "name": "ts",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "g",
          "type": "int128"
        }
      ],
      "name": "baseOutForFYTokenIn",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "baseReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "fyTokenReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "baseAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "timeTillMaturity",
          "type": "uint128"
        },
        {
          "internalType": "int128",
          "name": "ts",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "g",
          "type": "int128"
        }
      ],
      "name": "fyTokenInForBaseOut",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "baseReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "fyTokenReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "baseAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "timeTillMaturity",
          "type": "uint128"
        },
        {
          "internalType": "int128",
          "name": "ts",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "g",
          "type": "int128"
        }
      ],
      "name": "fyTokenOutForBaseIn",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "baseReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "fyTokenReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "timeTillMaturity",
          "type": "uint128"
        },
        {
          "internalType": "int128",
          "name": "ts",
          "type": "int128"
        }
      ],
      "name": "invariant",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "baseReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "fyTokenReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "timeTillMaturity",
          "type": "uint128"
        },
        {
          "internalType": "int128",
          "name": "ts",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "g",
          "type": "int128"
        }
      ],
      "name": "maxBaseIn",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "baseReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "fyTokenReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "timeTillMaturity",
          "type": "uint128"
        },
        {
          "internalType": "int128",
          "name": "ts",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "g",
          "type": "int128"
        }
      ],
      "name": "maxBaseOut",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "baseReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "fyTokenReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "timeTillMaturity",
          "type": "uint128"
        },
        {
          "internalType": "int128",
          "name": "ts",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "g",
          "type": "int128"
        }
      ],
      "name": "maxFYTokenIn",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "baseReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "fyTokenReserves",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "timeTillMaturity",
          "type": "uint128"
        },
        {
          "internalType": "int128",
          "name": "ts",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "g",
          "type": "int128"
        }
      ],
      "name": "maxFYTokenOut",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x0604fd889e48714a67775eb4c0d63b4b798346b339d431b086cb1ed9ee2e22fa",
  "receipt": {
    "to": null,
    "from": "0x0B16E3ea120Aeb1DeEbE2Fd8476c6aee8d4F3964",
    "contractAddress": "0xaAce8Db985F05794634b39739ccD7a049Cd8CB8d",
    "transactionIndex": 6,
    "gasUsed": "1965271",
    "logsBloom": "0x
    "blockHash": "0xed462bb9d86ec8dc68a7f74208b5a540c268962c8d20e1539be98bc2ba19c8e9",
    "transactionHash": "0x0604fd889e48714a67775eb4c0d63b4b798346b339d431b086cb1ed9ee2e22fa",
    "logs": [],
    "blockNumber": 14846805,
    "cumulativeGasUsed": "4220637",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "33ce1b88dd6eab84b0d7ae38c48ff578",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TWO\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"baseReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyTokenReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyTokenAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeTillMaturity\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"ts\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"g\",\"type\":\"int128\"}],\"name\":\"baseInForFYTokenOut\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"baseReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyTokenReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyTokenAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeTillMaturity\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"ts\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"g\",\"type\":\"int128\"}],\"name\":\"baseOutForFYTokenIn\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"baseReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyTokenReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"baseAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeTillMaturity\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"ts\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"g\",\"type\":\"int128\"}],\"name\":\"fyTokenInForBaseOut\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"baseReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyTokenReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"baseAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeTillMaturity\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"ts\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"g\",\"type\":\"int128\"}],\"name\":\"fyTokenOutForBaseIn\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"baseReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyTokenReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"timeTillMaturity\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"ts\",\"type\":\"int128\"}],\"name\":\"invariant\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"baseReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyTokenReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeTillMaturity\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"ts\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"g\",\"type\":\"int128\"}],\"name\":\"maxBaseIn\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"baseReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyTokenReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeTillMaturity\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"ts\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"g\",\"type\":\"int128\"}],\"name\":\"maxBaseOut\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"baseReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyTokenReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeTillMaturity\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"ts\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"g\",\"type\":\"int128\"}],\"name\":\"maxFYTokenIn\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"baseReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fyTokenReserves\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeTillMaturity\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"ts\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"g\",\"type\":\"int128\"}],\"name\":\"maxFYTokenOut\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"baseInForFYTokenOut(uint128,uint128,uint128,uint128,int128,int128)\":{\"params\":{\"baseReserves\":\"Base reserves amount\",\"fyTokenAmount\":\"fyToken amount to be traded\",\"fyTokenReserves\":\"fyToken reserves amount\",\"g\":\"fee coefficient, multiplied by 2^64\",\"timeTillMaturity\":\"time till maturity in seconds\",\"ts\":\"time till maturity coefficient, multiplied by 2^64\"},\"returns\":{\"_0\":\"the amount of base a user would have to pay for given amount of         fyToken\"}},\"baseOutForFYTokenIn(uint128,uint128,uint128,uint128,int128,int128)\":{\"params\":{\"baseReserves\":\"base reserves amount\",\"fyTokenAmount\":\"fyToken amount to be traded\",\"fyTokenReserves\":\"fyToken reserves amount\",\"g\":\"fee coefficient, multiplied by 2^64\",\"timeTillMaturity\":\"time till maturity in seconds\",\"ts\":\"time till maturity coefficient, multiplied by 2^64\"},\"returns\":{\"_0\":\"the amount of Base a user would get for given amount of fyToken\"}},\"fyTokenInForBaseOut(uint128,uint128,uint128,uint128,int128,int128)\":{\"params\":{\"baseAmount\":\"Base amount to be traded\",\"baseReserves\":\"base reserves amount\",\"fyTokenReserves\":\"fyToken reserves amount\",\"g\":\"fee coefficient, multiplied by 2^64\",\"timeTillMaturity\":\"time till maturity in seconds\",\"ts\":\"time till maturity coefficient, multiplied by 2^64\"},\"returns\":{\"_0\":\"the amount of fyToken a user could sell for given amount of Base\"}},\"fyTokenOutForBaseIn(uint128,uint128,uint128,uint128,int128,int128)\":{\"params\":{\"baseAmount\":\"base amount to be traded\",\"baseReserves\":\"base reserves amount\",\"fyTokenReserves\":\"fyToken reserves amount\",\"g\":\"fee coefficient, multiplied by 2^64\",\"timeTillMaturity\":\"time till maturity in seconds\",\"ts\":\"time till maturity coefficient, multiplied by 2^64\"},\"returns\":{\"_0\":\"the amount of fyToken a user would get for given amount of Base\"}},\"maxBaseIn(uint128,uint128,uint128,int128,int128)\":{\"params\":{\"baseReserves\":\"Base reserves amount\",\"fyTokenReserves\":\"fyToken reserves amount\",\"g\":\"fee coefficient, multiplied by 2^64\",\"timeTillMaturity\":\"time till maturity in seconds\",\"ts\":\"time till maturity coefficient, multiplied by 2^64\"},\"returns\":{\"_0\":\"max amount of base that can be sold to into the pool\"}},\"maxBaseOut(uint128,uint128,uint128,int128,int128)\":{\"params\":{\"baseReserves\":\"Base reserves amount\",\"fyTokenReserves\":\"fyToken reserves amount\",\"g\":\"fee coefficient, multiplied by 2^64\",\"timeTillMaturity\":\"time till maturity in seconds\",\"ts\":\"time till maturity coefficient, multiplied by 2^64\"},\"returns\":{\"_0\":\"max amount of base that can be bought from the pool\"}},\"maxFYTokenIn(uint128,uint128,uint128,int128,int128)\":{\"params\":{\"baseReserves\":\"Base reserves amount\",\"fyTokenReserves\":\"fyToken reserves amount\",\"g\":\"fee coefficient, multiplied by 2^64\",\"timeTillMaturity\":\"time till maturity in seconds\",\"ts\":\"time till maturity coefficient, multiplied by 2^64\"},\"returns\":{\"_0\":\"max amount of fyTokens that can be sold to into the pool\"}},\"maxFYTokenOut(uint128,uint128,uint128,int128,int128)\":{\"params\":{\"baseReserves\":\"Base reserves amount\",\"fyTokenReserves\":\"fyToken reserves amount\",\"g\":\"fee coefficient, multiplied by 2^64\",\"timeTillMaturity\":\"time till maturity in seconds\",\"ts\":\"time till maturity coefficient, multiplied by 2^64\"},\"returns\":{\"_0\":\"max amount of fyTokens that can be bought from the pool\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"baseInForFYTokenOut(uint128,uint128,uint128,uint128,int128,int128)\":{\"notice\":\"Calculate the amount of base a user would have to pay for certain amount of fyToken. https://www.desmos.com/calculator/ws5oqj8x5i\"},\"baseOutForFYTokenIn(uint128,uint128,uint128,uint128,int128,int128)\":{\"notice\":\"Calculate the amount of base a user would get for certain amount of fyToken. https://www.desmos.com/calculator/6jlrre7ybt\"},\"fyTokenInForBaseOut(uint128,uint128,uint128,uint128,int128,int128)\":{\"notice\":\"Calculate the amount of fyToken a user could sell for given amount of Base. https://www.desmos.com/calculator/0rgnmtckvy\"},\"fyTokenOutForBaseIn(uint128,uint128,uint128,uint128,int128,int128)\":{\"notice\":\"Calculate the amount of fyToken a user would get for given amount of Base. https://www.desmos.com/calculator/5nf2xuy6yb\"},\"invariant(uint128,uint128,uint256,uint128,int128)\":{\"notice\":\"Calculate a YieldSpace pool invariant according to the whitepaper\"},\"maxBaseIn(uint128,uint128,uint128,int128,int128)\":{\"notice\":\"Calculate the max amount of base that can be sold to into the pool without making the interest rate negative.\"},\"maxBaseOut(uint128,uint128,uint128,int128,int128)\":{\"notice\":\"Calculate the max amount of base that can be bought from the pool.\"},\"maxFYTokenIn(uint128,uint128,uint128,int128,int128)\":{\"notice\":\"Calculate the max amount of fyTokens that can be sold to into the pool.\"},\"maxFYTokenOut(uint128,uint128,uint128,int128,int128)\":{\"notice\":\"Calculate the max amount of fyTokens that can be bought from the pool without making the interest rate negative. See section 6.3 of the YieldSpace White paper\"}},\"notice\":\"Ethereum smart contract library implementing Yield Math model.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/space/YieldMath.sol\":\"YieldMath\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/space/Math64x64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/*\\r\\n *  Math 64.64 Smart Contract Library.  Copyright \\u00a9 2019 by  Consulting.\\r\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\r\\n */\\r\\npragma solidity 0.8.6;\\r\\n\\r\\n/**\\r\\n * Smart contract library of mathematical functions operating with signed\\r\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\r\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\r\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\r\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\r\\n * represented by int128 type holding only the numerator.\\r\\n */\\r\\nlibrary Math64x64 {\\r\\n    /*\\r\\n     * Minimum value signed 64.64-bit fixed point number may have.\\r\\n     */\\r\\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\r\\n\\r\\n    /*\\r\\n     * Maximum value signed 64.64-bit fixed point number may have.\\r\\n     */\\r\\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n\\r\\n    /**\\r\\n     * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\r\\n     * number.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 256-bit integer number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function fromInt(int256 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\r\\n            return int128(x << 64);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Convert signed 64.64 fixed point number into signed 64-bit integer number\\r\\n     * rounding down.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @return signed 64-bit integer number\\r\\n     */\\r\\n    function toInt(int128 x) internal pure returns (int64) {\\r\\n        unchecked {\\r\\n            return int64(x >> 64);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\r\\n     * number.  Revert on overflow.\\r\\n     *\\r\\n     * @param x unsigned 256-bit integer number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function fromUInt(uint256 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(x <= 0x7FFFFFFFFFFFFFFF);\\r\\n            return int128(int256(x << 64));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\r\\n     * number rounding down.  Revert on underflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @return unsigned 64-bit integer number\\r\\n     */\\r\\n    function toUInt(int128 x) internal pure returns (uint64) {\\r\\n        unchecked {\\r\\n            require(x >= 0);\\r\\n            return uint64(uint128(x >> 64));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\r\\n     * number rounding down.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 128.128-bin fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function from128x128(int256 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            int256 result = x >> 64;\\r\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\r\\n            return int128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\r\\n     * number.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @return signed 128.128 fixed point number\\r\\n     */\\r\\n    function to128x128(int128 x) internal pure returns (int256) {\\r\\n        unchecked {\\r\\n            return int256(x) << 64;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x + y.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @param y signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function add(int128 x, int128 y) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            int256 result = int256(x) + y;\\r\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\r\\n            return int128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x - y.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @param y signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function sub(int128 x, int128 y) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            int256 result = int256(x) - y;\\r\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\r\\n            return int128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x * y rounding down.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @param y signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function mul(int128 x, int128 y) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            int256 result = (int256(x) * y) >> 64;\\r\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\r\\n            return int128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\r\\n     * number and y is signed 256-bit integer number.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64 fixed point number\\r\\n     * @param y signed 256-bit integer number\\r\\n     * @return signed 256-bit integer number\\r\\n     */\\r\\n    function muli(int128 x, int256 y) internal pure returns (int256) {\\r\\n        unchecked {\\r\\n            if (x == MIN_64x64) {\\r\\n                require(\\r\\n                    y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\r\\n                        y <= 0x1000000000000000000000000000000000000000000000000\\r\\n                );\\r\\n                return -y << 63;\\r\\n            } else {\\r\\n                bool negativeResult = false;\\r\\n                if (x < 0) {\\r\\n                    x = -x;\\r\\n                    negativeResult = true;\\r\\n                }\\r\\n                if (y < 0) {\\r\\n                    y = -y; // We rely on overflow behavior here\\r\\n                    negativeResult = !negativeResult;\\r\\n                }\\r\\n                uint256 absoluteResult = mulu(x, uint256(y));\\r\\n                if (negativeResult) {\\r\\n                    require(\\r\\n                        absoluteResult <=\\r\\n                            0x8000000000000000000000000000000000000000000000000000000000000000\\r\\n                    );\\r\\n                    return -int256(absoluteResult); // We rely on overflow behavior here\\r\\n                } else {\\r\\n                    require(\\r\\n                        absoluteResult <=\\r\\n                            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\r\\n                    );\\r\\n                    return int256(absoluteResult);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\r\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64 fixed point number\\r\\n     * @param y unsigned 256-bit integer number\\r\\n     * @return unsigned 256-bit integer number\\r\\n     */\\r\\n    function mulu(int128 x, uint256 y) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            if (y == 0) return 0;\\r\\n\\r\\n            require(x >= 0);\\r\\n\\r\\n            uint256 lo = (uint256(int256(x)) *\\r\\n                (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\r\\n            uint256 hi = uint256(int256(x)) * (y >> 128);\\r\\n\\r\\n            require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n            hi <<= 64;\\r\\n\\r\\n            require(\\r\\n                hi <=\\r\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -\\r\\n                        lo\\r\\n            );\\r\\n            return hi + lo;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\r\\n     * zero.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @param y signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function div(int128 x, int128 y) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(y != 0);\\r\\n            int256 result = (int256(x) << 64) / y;\\r\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\r\\n            return int128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\r\\n     * integer numbers.  Revert on overflow or when y is zero.\\r\\n     *\\r\\n     * @param x signed 256-bit integer number\\r\\n     * @param y signed 256-bit integer number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function divi(int256 x, int256 y) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(y != 0);\\r\\n\\r\\n            bool negativeResult = false;\\r\\n            if (x < 0) {\\r\\n                x = -x; // We rely on overflow behavior here\\r\\n                negativeResult = true;\\r\\n            }\\r\\n            if (y < 0) {\\r\\n                y = -y; // We rely on overflow behavior here\\r\\n                negativeResult = !negativeResult;\\r\\n            }\\r\\n            uint128 absoluteResult = divuu(uint256(x), uint256(y));\\r\\n            if (negativeResult) {\\r\\n                require(absoluteResult <= 0x80000000000000000000000000000000);\\r\\n                return -int128(absoluteResult); // We rely on overflow behavior here\\r\\n            } else {\\r\\n                require(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n                return int128(absoluteResult); // We rely on overflow behavior here\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\r\\n     * integer numbers.  Revert on overflow or when y is zero.\\r\\n     *\\r\\n     * @param x unsigned 256-bit integer number\\r\\n     * @param y unsigned 256-bit integer number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function divu(uint256 x, uint256 y) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(y != 0);\\r\\n            uint128 result = divuu(x, y);\\r\\n            require(result <= uint128(MAX_64x64));\\r\\n            return int128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate -x.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function neg(int128 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(x != MIN_64x64);\\r\\n            return -x;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate |x|.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function abs(int128 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(x != MIN_64x64);\\r\\n            return x < 0 ? -x : x;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\r\\n     * zero.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function inv(int128 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(x != 0);\\r\\n            int256 result = int256(0x100000000000000000000000000000000) / x;\\r\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\r\\n            return int128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @param y signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function avg(int128 x, int128 y) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            return int128((int256(x) + int256(y)) >> 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\r\\n     * Revert on overflow or in case x * y is negative.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @param y signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function gavg(int128 x, int128 y) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            int256 m = int256(x) * int256(y);\\r\\n            require(m >= 0);\\r\\n            require(\\r\\n                m <\\r\\n                    0x4000000000000000000000000000000000000000000000000000000000000000\\r\\n            );\\r\\n            return int128(sqrtu(uint256(m)));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\r\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @param y uint256 value\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function pow(int128 x, uint256 y) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            bool negative = x < 0 && y & 1 == 1;\\r\\n\\r\\n            uint256 absX = uint128(x < 0 ? -x : x);\\r\\n            uint256 absResult;\\r\\n            absResult = 0x100000000000000000000000000000000;\\r\\n\\r\\n            if (absX <= 0x10000000000000000) {\\r\\n                absX <<= 63;\\r\\n                while (y != 0) {\\r\\n                    if (y & 0x1 != 0) {\\r\\n                        absResult = (absResult * absX) >> 127;\\r\\n                    }\\r\\n                    absX = (absX * absX) >> 127;\\r\\n\\r\\n                    if (y & 0x2 != 0) {\\r\\n                        absResult = (absResult * absX) >> 127;\\r\\n                    }\\r\\n                    absX = (absX * absX) >> 127;\\r\\n\\r\\n                    if (y & 0x4 != 0) {\\r\\n                        absResult = (absResult * absX) >> 127;\\r\\n                    }\\r\\n                    absX = (absX * absX) >> 127;\\r\\n\\r\\n                    if (y & 0x8 != 0) {\\r\\n                        absResult = (absResult * absX) >> 127;\\r\\n                    }\\r\\n                    absX = (absX * absX) >> 127;\\r\\n\\r\\n                    y >>= 4;\\r\\n                }\\r\\n\\r\\n                absResult >>= 64;\\r\\n            } else {\\r\\n                uint256 absXShift = 63;\\r\\n                if (absX < 0x1000000000000000000000000) {\\r\\n                    absX <<= 32;\\r\\n                    absXShift -= 32;\\r\\n                }\\r\\n                if (absX < 0x10000000000000000000000000000) {\\r\\n                    absX <<= 16;\\r\\n                    absXShift -= 16;\\r\\n                }\\r\\n                if (absX < 0x1000000000000000000000000000000) {\\r\\n                    absX <<= 8;\\r\\n                    absXShift -= 8;\\r\\n                }\\r\\n                if (absX < 0x10000000000000000000000000000000) {\\r\\n                    absX <<= 4;\\r\\n                    absXShift -= 4;\\r\\n                }\\r\\n                if (absX < 0x40000000000000000000000000000000) {\\r\\n                    absX <<= 2;\\r\\n                    absXShift -= 2;\\r\\n                }\\r\\n                if (absX < 0x80000000000000000000000000000000) {\\r\\n                    absX <<= 1;\\r\\n                    absXShift -= 1;\\r\\n                }\\r\\n\\r\\n                uint256 resultShift = 0;\\r\\n                while (y != 0) {\\r\\n                    require(absXShift < 64);\\r\\n\\r\\n                    if (y & 0x1 != 0) {\\r\\n                        absResult = (absResult * absX) >> 127;\\r\\n                        resultShift += absXShift;\\r\\n                        if (absResult > 0x100000000000000000000000000000000) {\\r\\n                            absResult >>= 1;\\r\\n                            resultShift += 1;\\r\\n                        }\\r\\n                    }\\r\\n                    absX = (absX * absX) >> 127;\\r\\n                    absXShift <<= 1;\\r\\n                    if (absX >= 0x100000000000000000000000000000000) {\\r\\n                        absX >>= 1;\\r\\n                        absXShift += 1;\\r\\n                    }\\r\\n\\r\\n                    y >>= 1;\\r\\n                }\\r\\n\\r\\n                require(resultShift < 64);\\r\\n                absResult >>= 64 - resultShift;\\r\\n            }\\r\\n            int256 result = negative ? -int256(absResult) : int256(absResult);\\r\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\r\\n            return int128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate sqrt (x) rounding down.  Revert if x < 0.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function sqrt(int128 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(x >= 0);\\r\\n            return int128(sqrtu(uint256(int256(x)) << 64));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate binary logarithm of x.  Revert if x <= 0.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function log_2(int128 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(x > 0);\\r\\n\\r\\n            int256 msb = 0;\\r\\n            int256 xc = x;\\r\\n            if (xc >= 0x10000000000000000) {\\r\\n                xc >>= 64;\\r\\n                msb += 64;\\r\\n            }\\r\\n            if (xc >= 0x100000000) {\\r\\n                xc >>= 32;\\r\\n                msb += 32;\\r\\n            }\\r\\n            if (xc >= 0x10000) {\\r\\n                xc >>= 16;\\r\\n                msb += 16;\\r\\n            }\\r\\n            if (xc >= 0x100) {\\r\\n                xc >>= 8;\\r\\n                msb += 8;\\r\\n            }\\r\\n            if (xc >= 0x10) {\\r\\n                xc >>= 4;\\r\\n                msb += 4;\\r\\n            }\\r\\n            if (xc >= 0x4) {\\r\\n                xc >>= 2;\\r\\n                msb += 2;\\r\\n            }\\r\\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\r\\n\\r\\n            int256 result = (msb - 64) << 64;\\r\\n            uint256 ux = uint256(int256(x)) << uint256(127 - msb);\\r\\n            for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\r\\n                ux *= ux;\\r\\n                uint256 b = ux >> 255;\\r\\n                ux >>= 127 + b;\\r\\n                result += bit * int256(b);\\r\\n            }\\r\\n\\r\\n            return int128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate natural logarithm of x.  Revert if x <= 0.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function ln(int128 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(x > 0);\\r\\n\\r\\n            return\\r\\n                int128(\\r\\n                    int256(\\r\\n                        (uint256(int256(log_2(x))) *\\r\\n                            0xB17217F7D1CF79ABC9E3B39803F2F6AF) >> 128\\r\\n                    )\\r\\n                );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate binary exponent of x.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function exp_2(int128 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(x < 0x400000000000000000); // Overflow\\r\\n\\r\\n            if (x < -0x400000000000000000) return 0; // Underflow\\r\\n\\r\\n            uint256 result = 0x80000000000000000000000000000000;\\r\\n\\r\\n            if (x & 0x8000000000000000 > 0)\\r\\n                result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\\r\\n            if (x & 0x4000000000000000 > 0)\\r\\n                result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\\r\\n            if (x & 0x2000000000000000 > 0)\\r\\n                result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\\r\\n            if (x & 0x1000000000000000 > 0)\\r\\n                result = (result * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\\r\\n            if (x & 0x800000000000000 > 0)\\r\\n                result = (result * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\\r\\n            if (x & 0x400000000000000 > 0)\\r\\n                result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\\r\\n            if (x & 0x200000000000000 > 0)\\r\\n                result = (result * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\\r\\n            if (x & 0x100000000000000 > 0)\\r\\n                result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\\r\\n            if (x & 0x80000000000000 > 0)\\r\\n                result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\\r\\n            if (x & 0x40000000000000 > 0)\\r\\n                result = (result * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\\r\\n            if (x & 0x20000000000000 > 0)\\r\\n                result = (result * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\\r\\n            if (x & 0x10000000000000 > 0)\\r\\n                result = (result * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\\r\\n            if (x & 0x8000000000000 > 0)\\r\\n                result = (result * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\\r\\n            if (x & 0x4000000000000 > 0)\\r\\n                result = (result * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\\r\\n            if (x & 0x2000000000000 > 0)\\r\\n                result = (result * 0x1000162E525EE054754457D5995292026) >> 128;\\r\\n            if (x & 0x1000000000000 > 0)\\r\\n                result = (result * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\\r\\n            if (x & 0x800000000000 > 0)\\r\\n                result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\\r\\n            if (x & 0x400000000000 > 0)\\r\\n                result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\\r\\n            if (x & 0x200000000000 > 0)\\r\\n                result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\\r\\n            if (x & 0x100000000000 > 0)\\r\\n                result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\\r\\n            if (x & 0x80000000000 > 0)\\r\\n                result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\\r\\n            if (x & 0x40000000000 > 0)\\r\\n                result = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\\r\\n            if (x & 0x20000000000 > 0)\\r\\n                result = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\\r\\n            if (x & 0x10000000000 > 0)\\r\\n                result = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\\r\\n            if (x & 0x8000000000 > 0)\\r\\n                result = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\\r\\n            if (x & 0x4000000000 > 0)\\r\\n                result = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\\r\\n            if (x & 0x2000000000 > 0)\\r\\n                result = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\\r\\n            if (x & 0x1000000000 > 0)\\r\\n                result = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\\r\\n            if (x & 0x800000000 > 0)\\r\\n                result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\\r\\n            if (x & 0x400000000 > 0)\\r\\n                result = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\\r\\n            if (x & 0x200000000 > 0)\\r\\n                result = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\\r\\n            if (x & 0x100000000 > 0)\\r\\n                result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\\r\\n            if (x & 0x80000000 > 0)\\r\\n                result = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\\r\\n            if (x & 0x40000000 > 0)\\r\\n                result = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\\r\\n            if (x & 0x20000000 > 0)\\r\\n                result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\\r\\n            if (x & 0x10000000 > 0)\\r\\n                result = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\\r\\n            if (x & 0x8000000 > 0)\\r\\n                result = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\\r\\n            if (x & 0x4000000 > 0)\\r\\n                result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\\r\\n            if (x & 0x2000000 > 0)\\r\\n                result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\\r\\n            if (x & 0x1000000 > 0)\\r\\n                result = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\\r\\n            if (x & 0x800000 > 0)\\r\\n                result = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\\r\\n            if (x & 0x400000 > 0)\\r\\n                result = (result * 0x100000000002C5C85FDF477B662B26945) >> 128;\\r\\n            if (x & 0x200000 > 0)\\r\\n                result = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128;\\r\\n            if (x & 0x100000 > 0)\\r\\n                result = (result * 0x100000000000B17217F7D1D351A389D40) >> 128;\\r\\n            if (x & 0x80000 > 0)\\r\\n                result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\\r\\n            if (x & 0x40000 > 0)\\r\\n                result = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\\r\\n            if (x & 0x20000 > 0)\\r\\n                result = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128;\\r\\n            if (x & 0x10000 > 0)\\r\\n                result = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\\r\\n            if (x & 0x8000 > 0)\\r\\n                result = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\\r\\n            if (x & 0x4000 > 0)\\r\\n                result = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128;\\r\\n            if (x & 0x2000 > 0)\\r\\n                result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\\r\\n            if (x & 0x1000 > 0)\\r\\n                result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\\r\\n            if (x & 0x800 > 0)\\r\\n                result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\\r\\n            if (x & 0x400 > 0)\\r\\n                result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\\r\\n            if (x & 0x200 > 0)\\r\\n                result = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128;\\r\\n            if (x & 0x100 > 0)\\r\\n                result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\\r\\n            if (x & 0x80 > 0)\\r\\n                result = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\\r\\n            if (x & 0x40 > 0)\\r\\n                result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\\r\\n            if (x & 0x20 > 0)\\r\\n                result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\\r\\n            if (x & 0x10 > 0)\\r\\n                result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\\r\\n            if (x & 0x8 > 0)\\r\\n                result = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\\r\\n            if (x & 0x4 > 0)\\r\\n                result = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\\r\\n            if (x & 0x2 > 0)\\r\\n                result = (result * 0x1000000000000000162E42FEFA39EF358) >> 128;\\r\\n            if (x & 0x1 > 0)\\r\\n                result = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128;\\r\\n\\r\\n            result >>= uint256(int256(63 - (x >> 64)));\\r\\n            require(result <= uint256(int256(MAX_64x64)));\\r\\n\\r\\n            return int128(int256(result));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate natural exponent of x.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function exp(int128 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(x < 0x400000000000000000); // Overflow\\r\\n\\r\\n            if (x < -0x400000000000000000) return 0; // Underflow\\r\\n\\r\\n            return\\r\\n                exp_2(\\r\\n                    int128(\\r\\n                        (int256(x) * 0x171547652B82FE1777D0FFDA0D23A7D12) >> 128\\r\\n                    )\\r\\n                );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\r\\n     * integer numbers.  Revert on overflow or when y is zero.\\r\\n     *\\r\\n     * @param x unsigned 256-bit integer number\\r\\n     * @param y unsigned 256-bit integer number\\r\\n     * @return unsigned 64.64-bit fixed point number\\r\\n     */\\r\\n    function divuu(uint256 x, uint256 y) private pure returns (uint128) {\\r\\n        unchecked {\\r\\n            require(y != 0);\\r\\n\\r\\n            uint256 result;\\r\\n\\r\\n            if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\r\\n                result = (x << 64) / y;\\r\\n            else {\\r\\n                uint256 msb = 192;\\r\\n                uint256 xc = x >> 192;\\r\\n                if (xc >= 0x100000000) {\\r\\n                    xc >>= 32;\\r\\n                    msb += 32;\\r\\n                }\\r\\n                if (xc >= 0x10000) {\\r\\n                    xc >>= 16;\\r\\n                    msb += 16;\\r\\n                }\\r\\n                if (xc >= 0x100) {\\r\\n                    xc >>= 8;\\r\\n                    msb += 8;\\r\\n                }\\r\\n                if (xc >= 0x10) {\\r\\n                    xc >>= 4;\\r\\n                    msb += 4;\\r\\n                }\\r\\n                if (xc >= 0x4) {\\r\\n                    xc >>= 2;\\r\\n                    msb += 2;\\r\\n                }\\r\\n                if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\r\\n\\r\\n                result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1);\\r\\n                require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n\\r\\n                uint256 hi = result * (y >> 128);\\r\\n                uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n\\r\\n                uint256 xh = x >> 192;\\r\\n                uint256 xl = x << 64;\\r\\n\\r\\n                if (xl < lo) xh -= 1;\\r\\n                xl -= lo; // We rely on overflow behavior here\\r\\n                lo = hi << 128;\\r\\n                if (xl < lo) xh -= 1;\\r\\n                xl -= lo; // We rely on overflow behavior here\\r\\n\\r\\n                assert(xh == hi >> 128);\\r\\n\\r\\n                result += xl / y;\\r\\n            }\\r\\n\\r\\n            require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n            return uint128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\r\\n     * number.\\r\\n     *\\r\\n     * @param x unsigned 256-bit integer number\\r\\n     * @return unsigned 128-bit integer number\\r\\n     */\\r\\n    function sqrtu(uint256 x) private pure returns (uint128) {\\r\\n        unchecked {\\r\\n            if (x == 0) return 0;\\r\\n            else {\\r\\n                uint256 xx = x;\\r\\n                uint256 r = 1;\\r\\n                if (xx >= 0x100000000000000000000000000000000) {\\r\\n                    xx >>= 128;\\r\\n                    r <<= 64;\\r\\n                }\\r\\n                if (xx >= 0x10000000000000000) {\\r\\n                    xx >>= 64;\\r\\n                    r <<= 32;\\r\\n                }\\r\\n                if (xx >= 0x100000000) {\\r\\n                    xx >>= 32;\\r\\n                    r <<= 16;\\r\\n                }\\r\\n                if (xx >= 0x10000) {\\r\\n                    xx >>= 16;\\r\\n                    r <<= 8;\\r\\n                }\\r\\n                if (xx >= 0x100) {\\r\\n                    xx >>= 8;\\r\\n                    r <<= 4;\\r\\n                }\\r\\n                if (xx >= 0x10) {\\r\\n                    xx >>= 4;\\r\\n                    r <<= 2;\\r\\n                }\\r\\n                if (xx >= 0x8) {\\r\\n                    r <<= 1;\\r\\n                }\\r\\n                r = (r + x / r) >> 1;\\r\\n                r = (r + x / r) >> 1;\\r\\n                r = (r + x / r) >> 1;\\r\\n                r = (r + x / r) >> 1;\\r\\n                r = (r + x / r) >> 1;\\r\\n                r = (r + x / r) >> 1;\\r\\n                r = (r + x / r) >> 1; // Seven iterations should be enough\\r\\n                uint256 r1 = x / r;\\r\\n                return uint128(r < r1 ? r : r1);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x08dbcb5699154b3aea6b476ad624e8016fb8a2285bee3fd341c6d8ddf2580ceb\",\"license\":\"MIT\"},\"contracts/space/YieldMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./Math64x64.sol\\\";\\r\\n\\r\\nlibrary Exp64x64 {\\r\\n    /**\\r\\n     * Raise given number x into power specified as a simple fraction y/z and then\\r\\n     * multiply the result by the normalization factor 2^(128 * (1 - y/z)).\\r\\n     * Revert if z is zero, or if both x and y are zeros.\\r\\n     *\\r\\n     * @param x number to raise into given power y/z\\r\\n     * @param y numerator of the power to raise x into\\r\\n     * @param z denominator of the power to raise x into\\r\\n     * @return x raised into power y/z and then multiplied by 2^(128 * (1 - y/z))\\r\\n     */\\r\\n    function pow(\\r\\n        uint128 x,\\r\\n        uint128 y,\\r\\n        uint128 z\\r\\n    ) internal pure returns (uint128) {\\r\\n        unchecked {\\r\\n            require(z != 0);\\r\\n\\r\\n            if (x == 0) {\\r\\n                require(y != 0);\\r\\n                return 0;\\r\\n            } else {\\r\\n                uint256 l = (uint256(\\r\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - log_2(x)\\r\\n                ) * y) / z;\\r\\n                if (l > 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) return 0;\\r\\n                else\\r\\n                    return\\r\\n                        pow_2(uint128(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - l));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate base 2 logarithm of an unsigned 128-bit integer number.  Revert\\r\\n     * in case x is zero.\\r\\n     *\\r\\n     * @param x number to calculate base 2 logarithm of\\r\\n     * @return base 2 logarithm of x, multiplied by 2^121\\r\\n     */\\r\\n    function log_2(uint128 x) internal pure returns (uint128) {\\r\\n        unchecked {\\r\\n            require(x != 0);\\r\\n\\r\\n            uint256 b = x;\\r\\n\\r\\n            uint256 l = 0xFE000000000000000000000000000000;\\r\\n\\r\\n            if (b < 0x10000000000000000) {\\r\\n                l -= 0x80000000000000000000000000000000;\\r\\n                b <<= 64;\\r\\n            }\\r\\n            if (b < 0x1000000000000000000000000) {\\r\\n                l -= 0x40000000000000000000000000000000;\\r\\n                b <<= 32;\\r\\n            }\\r\\n            if (b < 0x10000000000000000000000000000) {\\r\\n                l -= 0x20000000000000000000000000000000;\\r\\n                b <<= 16;\\r\\n            }\\r\\n            if (b < 0x1000000000000000000000000000000) {\\r\\n                l -= 0x10000000000000000000000000000000;\\r\\n                b <<= 8;\\r\\n            }\\r\\n            if (b < 0x10000000000000000000000000000000) {\\r\\n                l -= 0x8000000000000000000000000000000;\\r\\n                b <<= 4;\\r\\n            }\\r\\n            if (b < 0x40000000000000000000000000000000) {\\r\\n                l -= 0x4000000000000000000000000000000;\\r\\n                b <<= 2;\\r\\n            }\\r\\n            if (b < 0x80000000000000000000000000000000) {\\r\\n                l -= 0x2000000000000000000000000000000;\\r\\n                b <<= 1;\\r\\n            }\\r\\n\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x1000000000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x800000000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x400000000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x200000000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x100000000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x80000000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x40000000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x20000000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x10000000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x8000000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x4000000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x2000000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x1000000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x800000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x400000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x200000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x100000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x80000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x40000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x20000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x10000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x8000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x4000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x2000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x1000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x800000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x400000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x200000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x100000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x80000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x40000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x20000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x10000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x8000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x4000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x2000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x1000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x800000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x400000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x200000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x100000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x80000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x40000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x20000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x10000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x8000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x4000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x2000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x1000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x800000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x400000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x200000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x100000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x80000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x40000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x20000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x10000000000000000;\\r\\n            } /*\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) l |= 0x1; */\\r\\n\\r\\n            return uint128(l);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate 2 raised into given power.\\r\\n     *\\r\\n     * @param x power to raise 2 into, multiplied by 2^121\\r\\n     * @return 2 raised into given power\\r\\n     */\\r\\n    function pow_2(uint128 x) internal pure returns (uint128) {\\r\\n        unchecked {\\r\\n            uint256 r = 0x80000000000000000000000000000000;\\r\\n            if (x & 0x1000000000000000000000000000000 > 0)\\r\\n                r = (r * 0xb504f333f9de6484597d89b3754abe9f) >> 127;\\r\\n            if (x & 0x800000000000000000000000000000 > 0)\\r\\n                r = (r * 0x9837f0518db8a96f46ad23182e42f6f6) >> 127;\\r\\n            if (x & 0x400000000000000000000000000000 > 0)\\r\\n                r = (r * 0x8b95c1e3ea8bd6e6fbe4628758a53c90) >> 127;\\r\\n            if (x & 0x200000000000000000000000000000 > 0)\\r\\n                r = (r * 0x85aac367cc487b14c5c95b8c2154c1b2) >> 127;\\r\\n            if (x & 0x100000000000000000000000000000 > 0)\\r\\n                r = (r * 0x82cd8698ac2ba1d73e2a475b46520bff) >> 127;\\r\\n            if (x & 0x80000000000000000000000000000 > 0)\\r\\n                r = (r * 0x8164d1f3bc0307737be56527bd14def4) >> 127;\\r\\n            if (x & 0x40000000000000000000000000000 > 0)\\r\\n                r = (r * 0x80b1ed4fd999ab6c25335719b6e6fd20) >> 127;\\r\\n            if (x & 0x20000000000000000000000000000 > 0)\\r\\n                r = (r * 0x8058d7d2d5e5f6b094d589f608ee4aa2) >> 127;\\r\\n            if (x & 0x10000000000000000000000000000 > 0)\\r\\n                r = (r * 0x802c6436d0e04f50ff8ce94a6797b3ce) >> 127;\\r\\n            if (x & 0x8000000000000000000000000000 > 0)\\r\\n                r = (r * 0x8016302f174676283690dfe44d11d008) >> 127;\\r\\n            if (x & 0x4000000000000000000000000000 > 0)\\r\\n                r = (r * 0x800b179c82028fd0945e54e2ae18f2f0) >> 127;\\r\\n            if (x & 0x2000000000000000000000000000 > 0)\\r\\n                r = (r * 0x80058baf7fee3b5d1c718b38e549cb93) >> 127;\\r\\n            if (x & 0x1000000000000000000000000000 > 0)\\r\\n                r = (r * 0x8002c5d00fdcfcb6b6566a58c048be1f) >> 127;\\r\\n            if (x & 0x800000000000000000000000000 > 0)\\r\\n                r = (r * 0x800162e61bed4a48e84c2e1a463473d9) >> 127;\\r\\n            if (x & 0x400000000000000000000000000 > 0)\\r\\n                r = (r * 0x8000b17292f702a3aa22beacca949013) >> 127;\\r\\n            if (x & 0x200000000000000000000000000 > 0)\\r\\n                r = (r * 0x800058b92abbae02030c5fa5256f41fe) >> 127;\\r\\n            if (x & 0x100000000000000000000000000 > 0)\\r\\n                r = (r * 0x80002c5c8dade4d71776c0f4dbea67d6) >> 127;\\r\\n            if (x & 0x80000000000000000000000000 > 0)\\r\\n                r = (r * 0x8000162e44eaf636526be456600bdbe4) >> 127;\\r\\n            if (x & 0x40000000000000000000000000 > 0)\\r\\n                r = (r * 0x80000b1721fa7c188307016c1cd4e8b6) >> 127;\\r\\n            if (x & 0x20000000000000000000000000 > 0)\\r\\n                r = (r * 0x8000058b90de7e4cecfc487503488bb1) >> 127;\\r\\n            if (x & 0x10000000000000000000000000 > 0)\\r\\n                r = (r * 0x800002c5c8678f36cbfce50a6de60b14) >> 127;\\r\\n            if (x & 0x8000000000000000000000000 > 0)\\r\\n                r = (r * 0x80000162e431db9f80b2347b5d62e516) >> 127;\\r\\n            if (x & 0x4000000000000000000000000 > 0)\\r\\n                r = (r * 0x800000b1721872d0c7b08cf1e0114152) >> 127;\\r\\n            if (x & 0x2000000000000000000000000 > 0)\\r\\n                r = (r * 0x80000058b90c1aa8a5c3736cb77e8dff) >> 127;\\r\\n            if (x & 0x1000000000000000000000000 > 0)\\r\\n                r = (r * 0x8000002c5c8605a4635f2efc2362d978) >> 127;\\r\\n            if (x & 0x800000000000000000000000 > 0)\\r\\n                r = (r * 0x800000162e4300e635cf4a109e3939bd) >> 127;\\r\\n            if (x & 0x400000000000000000000000 > 0)\\r\\n                r = (r * 0x8000000b17217ff81bef9c551590cf83) >> 127;\\r\\n            if (x & 0x200000000000000000000000 > 0)\\r\\n                r = (r * 0x800000058b90bfdd4e39cd52c0cfa27c) >> 127;\\r\\n            if (x & 0x100000000000000000000000 > 0)\\r\\n                r = (r * 0x80000002c5c85fe6f72d669e0e76e411) >> 127;\\r\\n            if (x & 0x80000000000000000000000 > 0)\\r\\n                r = (r * 0x8000000162e42ff18f9ad35186d0df28) >> 127;\\r\\n            if (x & 0x40000000000000000000000 > 0)\\r\\n                r = (r * 0x80000000b17217f84cce71aa0dcfffe7) >> 127;\\r\\n            if (x & 0x20000000000000000000000 > 0)\\r\\n                r = (r * 0x8000000058b90bfc07a77ad56ed22aaa) >> 127;\\r\\n            if (x & 0x10000000000000000000000 > 0)\\r\\n                r = (r * 0x800000002c5c85fdfc23cdead40da8d6) >> 127;\\r\\n            if (x & 0x8000000000000000000000 > 0)\\r\\n                r = (r * 0x80000000162e42fefc25eb1571853a66) >> 127;\\r\\n            if (x & 0x4000000000000000000000 > 0)\\r\\n                r = (r * 0x800000000b17217f7d97f692baacded5) >> 127;\\r\\n            if (x & 0x2000000000000000000000 > 0)\\r\\n                r = (r * 0x80000000058b90bfbead3b8b5dd254d7) >> 127;\\r\\n            if (x & 0x1000000000000000000000 > 0)\\r\\n                r = (r * 0x8000000002c5c85fdf4eedd62f084e67) >> 127;\\r\\n            if (x & 0x800000000000000000000 > 0)\\r\\n                r = (r * 0x800000000162e42fefa58aef378bf586) >> 127;\\r\\n            if (x & 0x400000000000000000000 > 0)\\r\\n                r = (r * 0x8000000000b17217f7d24a78a3c7ef02) >> 127;\\r\\n            if (x & 0x200000000000000000000 > 0)\\r\\n                r = (r * 0x800000000058b90bfbe9067c93e474a6) >> 127;\\r\\n            if (x & 0x100000000000000000000 > 0)\\r\\n                r = (r * 0x80000000002c5c85fdf47b8e5a72599f) >> 127;\\r\\n            if (x & 0x80000000000000000000 > 0)\\r\\n                r = (r * 0x8000000000162e42fefa3bdb315934a2) >> 127;\\r\\n            if (x & 0x40000000000000000000 > 0)\\r\\n                r = (r * 0x80000000000b17217f7d1d7299b49c46) >> 127;\\r\\n            if (x & 0x20000000000000000000 > 0)\\r\\n                r = (r * 0x8000000000058b90bfbe8e9a8d1c4ea0) >> 127;\\r\\n            if (x & 0x10000000000000000000 > 0)\\r\\n                r = (r * 0x800000000002c5c85fdf4745969ea76f) >> 127;\\r\\n            if (x & 0x8000000000000000000 > 0)\\r\\n                r = (r * 0x80000000000162e42fefa3a0df5373bf) >> 127;\\r\\n            if (x & 0x4000000000000000000 > 0)\\r\\n                r = (r * 0x800000000000b17217f7d1cff4aac1e1) >> 127;\\r\\n            if (x & 0x2000000000000000000 > 0)\\r\\n                r = (r * 0x80000000000058b90bfbe8e7db95a2f1) >> 127;\\r\\n            if (x & 0x1000000000000000000 > 0)\\r\\n                r = (r * 0x8000000000002c5c85fdf473e61ae1f8) >> 127;\\r\\n            if (x & 0x800000000000000000 > 0)\\r\\n                r = (r * 0x800000000000162e42fefa39f121751c) >> 127;\\r\\n            if (x & 0x400000000000000000 > 0)\\r\\n                r = (r * 0x8000000000000b17217f7d1cf815bb96) >> 127;\\r\\n            if (x & 0x200000000000000000 > 0)\\r\\n                r = (r * 0x800000000000058b90bfbe8e7bec1e0d) >> 127;\\r\\n            if (x & 0x100000000000000000 > 0)\\r\\n                r = (r * 0x80000000000002c5c85fdf473dee5f17) >> 127;\\r\\n            if (x & 0x80000000000000000 > 0)\\r\\n                r = (r * 0x8000000000000162e42fefa39ef5438f) >> 127;\\r\\n            if (x & 0x40000000000000000 > 0)\\r\\n                r = (r * 0x80000000000000b17217f7d1cf7a26c8) >> 127;\\r\\n            if (x & 0x20000000000000000 > 0)\\r\\n                r = (r * 0x8000000000000058b90bfbe8e7bcf4a4) >> 127;\\r\\n            if (x & 0x10000000000000000 > 0)\\r\\n                r = (r * 0x800000000000002c5c85fdf473de72a2) >> 127; /*\\r\\n      if(x & 0x8000000000000000 > 0) r = r * 0x80000000000000162e42fefa39ef3765 >> 127;\\r\\n      if(x & 0x4000000000000000 > 0) r = r * 0x800000000000000b17217f7d1cf79b37 >> 127;\\r\\n      if(x & 0x2000000000000000 > 0) r = r * 0x80000000000000058b90bfbe8e7bcd7d >> 127;\\r\\n      if(x & 0x1000000000000000 > 0) r = r * 0x8000000000000002c5c85fdf473de6b6 >> 127;\\r\\n      if(x & 0x800000000000000 > 0) r = r * 0x800000000000000162e42fefa39ef359 >> 127;\\r\\n      if(x & 0x400000000000000 > 0) r = r * 0x8000000000000000b17217f7d1cf79ac >> 127;\\r\\n      if(x & 0x200000000000000 > 0) r = r * 0x800000000000000058b90bfbe8e7bcd6 >> 127;\\r\\n      if(x & 0x100000000000000 > 0) r = r * 0x80000000000000002c5c85fdf473de6a >> 127;\\r\\n      if(x & 0x80000000000000 > 0) r = r * 0x8000000000000000162e42fefa39ef35 >> 127;\\r\\n      if(x & 0x40000000000000 > 0) r = r * 0x80000000000000000b17217f7d1cf79a >> 127;\\r\\n      if(x & 0x20000000000000 > 0) r = r * 0x8000000000000000058b90bfbe8e7bcd >> 127;\\r\\n      if(x & 0x10000000000000 > 0) r = r * 0x800000000000000002c5c85fdf473de6 >> 127;\\r\\n      if(x & 0x8000000000000 > 0) r = r * 0x80000000000000000162e42fefa39ef3 >> 127;\\r\\n      if(x & 0x4000000000000 > 0) r = r * 0x800000000000000000b17217f7d1cf79 >> 127;\\r\\n      if(x & 0x2000000000000 > 0) r = r * 0x80000000000000000058b90bfbe8e7bc >> 127;\\r\\n      if(x & 0x1000000000000 > 0) r = r * 0x8000000000000000002c5c85fdf473de >> 127;\\r\\n      if(x & 0x800000000000 > 0) r = r * 0x800000000000000000162e42fefa39ef >> 127;\\r\\n      if(x & 0x400000000000 > 0) r = r * 0x8000000000000000000b17217f7d1cf7 >> 127;\\r\\n      if(x & 0x200000000000 > 0) r = r * 0x800000000000000000058b90bfbe8e7b >> 127;\\r\\n      if(x & 0x100000000000 > 0) r = r * 0x80000000000000000002c5c85fdf473d >> 127;\\r\\n      if(x & 0x80000000000 > 0) r = r * 0x8000000000000000000162e42fefa39e >> 127;\\r\\n      if(x & 0x40000000000 > 0) r = r * 0x80000000000000000000b17217f7d1cf >> 127;\\r\\n      if(x & 0x20000000000 > 0) r = r * 0x8000000000000000000058b90bfbe8e7 >> 127;\\r\\n      if(x & 0x10000000000 > 0) r = r * 0x800000000000000000002c5c85fdf473 >> 127;\\r\\n      if(x & 0x8000000000 > 0) r = r * 0x80000000000000000000162e42fefa39 >> 127;\\r\\n      if(x & 0x4000000000 > 0) r = r * 0x800000000000000000000b17217f7d1c >> 127;\\r\\n      if(x & 0x2000000000 > 0) r = r * 0x80000000000000000000058b90bfbe8e >> 127;\\r\\n      if(x & 0x1000000000 > 0) r = r * 0x8000000000000000000002c5c85fdf47 >> 127;\\r\\n      if(x & 0x800000000 > 0) r = r * 0x800000000000000000000162e42fefa3 >> 127;\\r\\n      if(x & 0x400000000 > 0) r = r * 0x8000000000000000000000b17217f7d1 >> 127;\\r\\n      if(x & 0x200000000 > 0) r = r * 0x800000000000000000000058b90bfbe8 >> 127;\\r\\n      if(x & 0x100000000 > 0) r = r * 0x80000000000000000000002c5c85fdf4 >> 127;\\r\\n      if(x & 0x80000000 > 0) r = r * 0x8000000000000000000000162e42fefa >> 127;\\r\\n      if(x & 0x40000000 > 0) r = r * 0x80000000000000000000000b17217f7d >> 127;\\r\\n      if(x & 0x20000000 > 0) r = r * 0x8000000000000000000000058b90bfbe >> 127;\\r\\n      if(x & 0x10000000 > 0) r = r * 0x800000000000000000000002c5c85fdf >> 127;\\r\\n      if(x & 0x8000000 > 0) r = r * 0x80000000000000000000000162e42fef >> 127;\\r\\n      if(x & 0x4000000 > 0) r = r * 0x800000000000000000000000b17217f7 >> 127;\\r\\n      if(x & 0x2000000 > 0) r = r * 0x80000000000000000000000058b90bfb >> 127;\\r\\n      if(x & 0x1000000 > 0) r = r * 0x8000000000000000000000002c5c85fd >> 127;\\r\\n      if(x & 0x800000 > 0) r = r * 0x800000000000000000000000162e42fe >> 127;\\r\\n      if(x & 0x400000 > 0) r = r * 0x8000000000000000000000000b17217f >> 127;\\r\\n      if(x & 0x200000 > 0) r = r * 0x800000000000000000000000058b90bf >> 127;\\r\\n      if(x & 0x100000 > 0) r = r * 0x80000000000000000000000002c5c85f >> 127;\\r\\n      if(x & 0x80000 > 0) r = r * 0x8000000000000000000000000162e42f >> 127;\\r\\n      if(x & 0x40000 > 0) r = r * 0x80000000000000000000000000b17217 >> 127;\\r\\n      if(x & 0x20000 > 0) r = r * 0x8000000000000000000000000058b90b >> 127;\\r\\n      if(x & 0x10000 > 0) r = r * 0x800000000000000000000000002c5c85 >> 127;\\r\\n      if(x & 0x8000 > 0) r = r * 0x80000000000000000000000000162e42 >> 127;\\r\\n      if(x & 0x4000 > 0) r = r * 0x800000000000000000000000000b1721 >> 127;\\r\\n      if(x & 0x2000 > 0) r = r * 0x80000000000000000000000000058b90 >> 127;\\r\\n      if(x & 0x1000 > 0) r = r * 0x8000000000000000000000000002c5c8 >> 127;\\r\\n      if(x & 0x800 > 0) r = r * 0x800000000000000000000000000162e4 >> 127;\\r\\n      if(x & 0x400 > 0) r = r * 0x8000000000000000000000000000b172 >> 127;\\r\\n      if(x & 0x200 > 0) r = r * 0x800000000000000000000000000058b9 >> 127;\\r\\n      if(x & 0x100 > 0) r = r * 0x80000000000000000000000000002c5c >> 127;\\r\\n      if(x & 0x80 > 0) r = r * 0x8000000000000000000000000000162e >> 127;\\r\\n      if(x & 0x40 > 0) r = r * 0x80000000000000000000000000000b17 >> 127;\\r\\n      if(x & 0x20 > 0) r = r * 0x8000000000000000000000000000058b >> 127;\\r\\n      if(x & 0x10 > 0) r = r * 0x800000000000000000000000000002c5 >> 127;\\r\\n      if(x & 0x8 > 0) r = r * 0x80000000000000000000000000000162 >> 127;\\r\\n      if(x & 0x4 > 0) r = r * 0x800000000000000000000000000000b1 >> 127;\\r\\n      if(x & 0x2 > 0) r = r * 0x80000000000000000000000000000058 >> 127;\\r\\n      if(x & 0x1 > 0) r = r * 0x8000000000000000000000000000002c >> 127; */\\r\\n\\r\\n            r >>= 127 - (x >> 121);\\r\\n\\r\\n            return uint128(r);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Ethereum smart contract library implementing Yield Math model.\\r\\n */\\r\\nlibrary YieldMath {\\r\\n    using Math64x64 for int128;\\r\\n    using Math64x64 for uint128;\\r\\n    using Math64x64 for int256;\\r\\n    using Math64x64 for uint256;\\r\\n    using Exp64x64 for uint128;\\r\\n\\r\\n    uint128 public constant ONE = 0x10000000000000000; // In 64.64\\r\\n    uint128 public constant TWO = 0x20000000000000000; // In 64.64\\r\\n    uint256 public constant MAX = type(uint128).max; // Used for overflow checks\\r\\n    uint256 public constant VAR = 1e12; // The logarithm math used is not precise to the wei, but can deviate up to 1e12 from the real value.\\r\\n\\r\\n    /**\\r\\n     * Calculate a YieldSpace pool invariant according to the whitepaper\\r\\n     */\\r\\n    function invariant(\\r\\n        uint128 baseReserves,\\r\\n        uint128 fyTokenReserves,\\r\\n        uint256 totalSupply,\\r\\n        uint128 timeTillMaturity,\\r\\n        int128 ts\\r\\n    ) public pure returns (uint128) {\\r\\n        if (totalSupply == 0) return 0;\\r\\n\\r\\n        unchecked {\\r\\n            // a = (1 - ts * timeTillMaturity)\\r\\n            int128 a = int128(ONE).sub(ts.mul(timeTillMaturity.fromUInt()));\\r\\n            require(a > 0, \\\"YieldMath: Too far from maturity\\\");\\r\\n\\r\\n            uint256 sum = (uint256(baseReserves.pow(uint128(a), ONE)) +\\r\\n                uint256(fyTokenReserves.pow(uint128(a), ONE))) >> 1;\\r\\n            require(sum < MAX, \\\"YieldMath: Sum overflow\\\");\\r\\n\\r\\n            uint256 result = uint256(uint128(sum).pow(ONE, uint128(a))) /\\r\\n                totalSupply;\\r\\n            require(result < MAX, \\\"YieldMath: Result overflow\\\");\\r\\n\\r\\n            return uint128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate the amount of fyToken a user would get for given amount of Base.\\r\\n     * https://www.desmos.com/calculator/5nf2xuy6yb\\r\\n     * @param baseReserves base reserves amount\\r\\n     * @param fyTokenReserves fyToken reserves amount\\r\\n     * @param baseAmount base amount to be traded\\r\\n     * @param timeTillMaturity time till maturity in seconds\\r\\n     * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n     * @param g fee coefficient, multiplied by 2^64\\r\\n     * @return the amount of fyToken a user would get for given amount of Base\\r\\n     */\\r\\n    function fyTokenOutForBaseIn(\\r\\n        uint128 baseReserves,\\r\\n        uint128 fyTokenReserves,\\r\\n        uint128 baseAmount,\\r\\n        uint128 timeTillMaturity,\\r\\n        int128 ts,\\r\\n        int128 g\\r\\n    ) public pure returns (uint128) {\\r\\n        unchecked {\\r\\n            uint128 a = _computeA(timeTillMaturity, ts, g);\\r\\n\\r\\n            // za = baseReserves ** a\\r\\n            uint256 za = baseReserves.pow(a, ONE);\\r\\n\\r\\n            // ya = fyTokenReserves ** a\\r\\n            uint256 ya = fyTokenReserves.pow(a, ONE);\\r\\n\\r\\n            // zx = baseReserves + baseAmount\\r\\n            uint256 zx = uint256(baseReserves) + uint256(baseAmount);\\r\\n            require(zx <= MAX, \\\"YieldMath: Too much base in\\\");\\r\\n\\r\\n            // zxa = zx ** a\\r\\n            uint256 zxa = uint128(zx).pow(a, ONE);\\r\\n\\r\\n            // sum = za + ya - zxa\\r\\n            uint256 sum = za + ya - zxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\\r\\n            require(sum <= MAX, \\\"YieldMath: Insufficient fyToken reserves\\\");\\r\\n\\r\\n            // result = fyTokenReserves - (sum ** (1/a))\\r\\n            uint256 result = uint256(fyTokenReserves) -\\r\\n                uint256(uint128(sum).pow(ONE, a));\\r\\n            require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n            result = result > VAR ? result - VAR : 0; // Subtract error guard, flooring the result at zero\\r\\n\\r\\n            return uint128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate the amount of base a user would get for certain amount of fyToken.\\r\\n     * https://www.desmos.com/calculator/6jlrre7ybt\\r\\n     * @param baseReserves base reserves amount\\r\\n     * @param fyTokenReserves fyToken reserves amount\\r\\n     * @param fyTokenAmount fyToken amount to be traded\\r\\n     * @param timeTillMaturity time till maturity in seconds\\r\\n     * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n     * @param g fee coefficient, multiplied by 2^64\\r\\n     * @return the amount of Base a user would get for given amount of fyToken\\r\\n     */\\r\\n    function baseOutForFYTokenIn(\\r\\n        uint128 baseReserves,\\r\\n        uint128 fyTokenReserves,\\r\\n        uint128 fyTokenAmount,\\r\\n        uint128 timeTillMaturity,\\r\\n        int128 ts,\\r\\n        int128 g\\r\\n    ) public pure returns (uint128) {\\r\\n        unchecked {\\r\\n            uint128 a = _computeA(timeTillMaturity, ts, g);\\r\\n\\r\\n            // za = baseReserves ** a\\r\\n            uint256 za = baseReserves.pow(a, ONE);\\r\\n\\r\\n            // ya = fyTokenReserves ** a\\r\\n            uint256 ya = fyTokenReserves.pow(a, ONE);\\r\\n\\r\\n            // yx = fyDayReserves + fyTokenAmount\\r\\n            uint256 yx = uint256(fyTokenReserves) + uint256(fyTokenAmount);\\r\\n            require(yx <= MAX, \\\"YieldMath: Too much fyToken in\\\");\\r\\n\\r\\n            // yxa = yx ** a\\r\\n            uint256 yxa = uint128(yx).pow(a, ONE);\\r\\n\\r\\n            // sum = za + ya - yxa\\r\\n            uint256 sum = za + ya - yxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\\r\\n            require(sum <= MAX, \\\"YieldMath: Insufficient base reserves\\\");\\r\\n\\r\\n            // result = baseReserves - (sum ** (1/a))\\r\\n            uint256 result = uint256(baseReserves) -\\r\\n                uint256(uint128(sum).pow(ONE, a));\\r\\n            require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n            result = result > VAR ? result - VAR : 0; // Subtract error guard, flooring the result at zero\\r\\n\\r\\n            return uint128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate the amount of fyToken a user could sell for given amount of Base.\\r\\n     * https://www.desmos.com/calculator/0rgnmtckvy\\r\\n     * @param baseReserves base reserves amount\\r\\n     * @param fyTokenReserves fyToken reserves amount\\r\\n     * @param baseAmount Base amount to be traded\\r\\n     * @param timeTillMaturity time till maturity in seconds\\r\\n     * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n     * @param g fee coefficient, multiplied by 2^64\\r\\n     * @return the amount of fyToken a user could sell for given amount of Base\\r\\n     */\\r\\n    function fyTokenInForBaseOut(\\r\\n        uint128 baseReserves,\\r\\n        uint128 fyTokenReserves,\\r\\n        uint128 baseAmount,\\r\\n        uint128 timeTillMaturity,\\r\\n        int128 ts,\\r\\n        int128 g\\r\\n    ) public pure returns (uint128) {\\r\\n        unchecked {\\r\\n            uint128 a = _computeA(timeTillMaturity, ts, g);\\r\\n\\r\\n            // za = baseReserves ** a\\r\\n            uint256 za = baseReserves.pow(a, ONE);\\r\\n\\r\\n            // ya = fyTokenReserves ** a\\r\\n            uint256 ya = fyTokenReserves.pow(a, ONE);\\r\\n\\r\\n            // zx = baseReserves - baseAmount\\r\\n            uint256 zx = uint256(baseReserves) - uint256(baseAmount);\\r\\n            require(zx <= MAX, \\\"YieldMath: Too much base out\\\");\\r\\n\\r\\n            // zxa = zx ** a\\r\\n            uint256 zxa = uint128(zx).pow(a, ONE);\\r\\n\\r\\n            // sum = za + ya - zxa\\r\\n            uint256 sum = za + ya - zxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\\r\\n            require(\\r\\n                sum <= MAX,\\r\\n                \\\"YieldMath: Resulting fyToken reserves too high\\\"\\r\\n            );\\r\\n\\r\\n            // result = (sum ** (1/a)) - fyTokenReserves\\r\\n            uint256 result = uint256(uint128(sum).pow(ONE, a)) -\\r\\n                uint256(fyTokenReserves);\\r\\n            require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n            result = result < MAX - VAR ? result + VAR : MAX; // Add error guard, ceiling the result at max\\r\\n\\r\\n            return uint128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate the amount of base a user would have to pay for certain amount of fyToken.\\r\\n     * https://www.desmos.com/calculator/ws5oqj8x5i\\r\\n     * @param baseReserves Base reserves amount\\r\\n     * @param fyTokenReserves fyToken reserves amount\\r\\n     * @param fyTokenAmount fyToken amount to be traded\\r\\n     * @param timeTillMaturity time till maturity in seconds\\r\\n     * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n     * @param g fee coefficient, multiplied by 2^64\\r\\n     * @return the amount of base a user would have to pay for given amount of\\r\\n     *         fyToken\\r\\n     */\\r\\n    function baseInForFYTokenOut(\\r\\n        uint128 baseReserves,\\r\\n        uint128 fyTokenReserves,\\r\\n        uint128 fyTokenAmount,\\r\\n        uint128 timeTillMaturity,\\r\\n        int128 ts,\\r\\n        int128 g\\r\\n    ) public pure returns (uint128) {\\r\\n        unchecked {\\r\\n            uint128 a = _computeA(timeTillMaturity, ts, g);\\r\\n\\r\\n            // za = baseReserves ** a\\r\\n            uint256 za = baseReserves.pow(a, ONE);\\r\\n\\r\\n            // ya = fyTokenReserves ** a\\r\\n            uint256 ya = fyTokenReserves.pow(a, ONE);\\r\\n\\r\\n            // yx = baseReserves - baseAmount\\r\\n            uint256 yx = uint256(fyTokenReserves) - uint256(fyTokenAmount);\\r\\n            require(yx <= MAX, \\\"YieldMath: Too much fyToken out\\\");\\r\\n\\r\\n            // yxa = yx ** a\\r\\n            uint256 yxa = uint128(yx).pow(a, ONE);\\r\\n\\r\\n            // sum = za + ya - yxa\\r\\n            uint256 sum = za + ya - yxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\\r\\n            require(sum <= MAX, \\\"YieldMath: Resulting base reserves too high\\\");\\r\\n\\r\\n            // result = (sum ** (1/a)) - baseReserves\\r\\n            uint256 result = uint256(uint128(sum).pow(ONE, a)) -\\r\\n                uint256(baseReserves);\\r\\n            require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n            result = result < MAX - VAR ? result + VAR : MAX; // Add error guard, ceiling the result at max\\r\\n\\r\\n            return uint128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate the max amount of fyTokens that can be bought from the pool without making the interest rate negative.\\r\\n     * See section 6.3 of the YieldSpace White paper\\r\\n     * @param baseReserves Base reserves amount\\r\\n     * @param fyTokenReserves fyToken reserves amount\\r\\n     * @param timeTillMaturity time till maturity in seconds\\r\\n     * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n     * @param g fee coefficient, multiplied by 2^64\\r\\n     * @return max amount of fyTokens that can be bought from the pool\\r\\n     */\\r\\n    function maxFYTokenOut(\\r\\n        uint128 baseReserves,\\r\\n        uint128 fyTokenReserves,\\r\\n        uint128 timeTillMaturity,\\r\\n        int128 ts,\\r\\n        int128 g\\r\\n    ) public pure returns (uint128) {\\r\\n        if (baseReserves == fyTokenReserves) return 0;\\r\\n        unchecked {\\r\\n            uint128 a = _computeA(timeTillMaturity, ts, g);\\r\\n\\r\\n            // xa = baseReserves ** a\\r\\n            uint128 xa = baseReserves.pow(a, ONE);\\r\\n\\r\\n            // ya = fyTokenReserves ** a\\r\\n            uint128 ya = fyTokenReserves.pow(a, ONE);\\r\\n\\r\\n            int128 xy2 = (xa + ya).divu(TWO);\\r\\n\\r\\n            uint256 inaccessible = uint256(uint128(xy2).pow(ONE, a));\\r\\n            require(inaccessible <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n            inaccessible = inaccessible < MAX - VAR ? inaccessible + VAR : MAX; // Add error guard, ceiling the result at max\\r\\n\\r\\n            return\\r\\n                uint128(inaccessible) > fyTokenReserves\\r\\n                    ? 0\\r\\n                    : fyTokenReserves - uint128(inaccessible);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate the max amount of fyTokens that can be sold to into the pool.\\r\\n     * @param baseReserves Base reserves amount\\r\\n     * @param fyTokenReserves fyToken reserves amount\\r\\n     * @param timeTillMaturity time till maturity in seconds\\r\\n     * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n     * @param g fee coefficient, multiplied by 2^64\\r\\n     * @return max amount of fyTokens that can be sold to into the pool\\r\\n     */\\r\\n    function maxFYTokenIn(\\r\\n        uint128 baseReserves,\\r\\n        uint128 fyTokenReserves,\\r\\n        uint128 timeTillMaturity,\\r\\n        int128 ts,\\r\\n        int128 g\\r\\n    ) public pure returns (uint128) {\\r\\n        unchecked {\\r\\n            uint128 b = _computeB(timeTillMaturity, ts, g);\\r\\n\\r\\n            // xa = baseReserves ** a\\r\\n            uint128 xa = baseReserves.pow(b, ONE);\\r\\n\\r\\n            // ya = fyTokenReserves ** a\\r\\n            uint128 ya = fyTokenReserves.pow(b, ONE);\\r\\n\\r\\n            uint256 result = (xa + ya).pow(ONE, b) - fyTokenReserves;\\r\\n            require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n            result = result > VAR ? result - VAR : 0; // Subtract error guard, flooring the result at zero\\r\\n\\r\\n            return uint128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate the max amount of base that can be sold to into the pool without making the interest rate negative.\\r\\n     * @param baseReserves Base reserves amount\\r\\n     * @param fyTokenReserves fyToken reserves amount\\r\\n     * @param timeTillMaturity time till maturity in seconds\\r\\n     * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n     * @param g fee coefficient, multiplied by 2^64\\r\\n     * @return max amount of base that can be sold to into the pool\\r\\n     */\\r\\n    function maxBaseIn(\\r\\n        uint128 baseReserves,\\r\\n        uint128 fyTokenReserves,\\r\\n        uint128 timeTillMaturity,\\r\\n        int128 ts,\\r\\n        int128 g\\r\\n    ) public pure returns (uint128) {\\r\\n        uint128 _maxFYTokenOut = maxFYTokenOut(\\r\\n            baseReserves,\\r\\n            fyTokenReserves,\\r\\n            timeTillMaturity,\\r\\n            ts,\\r\\n            g\\r\\n        );\\r\\n        if (_maxFYTokenOut > 0)\\r\\n            return\\r\\n                baseInForFYTokenOut(\\r\\n                    baseReserves,\\r\\n                    fyTokenReserves,\\r\\n                    _maxFYTokenOut,\\r\\n                    timeTillMaturity,\\r\\n                    ts,\\r\\n                    g\\r\\n                );\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate the max amount of base that can be bought from the pool.\\r\\n     * @param baseReserves Base reserves amount\\r\\n     * @param fyTokenReserves fyToken reserves amount\\r\\n     * @param timeTillMaturity time till maturity in seconds\\r\\n     * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n     * @param g fee coefficient, multiplied by 2^64\\r\\n     * @return max amount of base that can be bought from the pool\\r\\n     */\\r\\n    function maxBaseOut(\\r\\n        uint128 baseReserves,\\r\\n        uint128 fyTokenReserves,\\r\\n        uint128 timeTillMaturity,\\r\\n        int128 ts,\\r\\n        int128 g\\r\\n    ) public pure returns (uint128) {\\r\\n        uint128 _maxFYTokenIn = maxFYTokenIn(\\r\\n            baseReserves,\\r\\n            fyTokenReserves,\\r\\n            timeTillMaturity,\\r\\n            ts,\\r\\n            g\\r\\n        );\\r\\n        return\\r\\n            baseOutForFYTokenIn(\\r\\n                baseReserves,\\r\\n                fyTokenReserves,\\r\\n                _maxFYTokenIn,\\r\\n                timeTillMaturity,\\r\\n                ts,\\r\\n                g\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _computeA(\\r\\n        uint128 timeTillMaturity,\\r\\n        int128 ts,\\r\\n        int128 g\\r\\n    ) private pure returns (uint128) {\\r\\n        unchecked {\\r\\n            // t = ts * timeTillMaturity\\r\\n            int128 t = ts.mul(timeTillMaturity.fromUInt());\\r\\n            require(t >= 0, \\\"YieldMath: t must be positive\\\"); // Meaning neither T or ts can be negative\\r\\n\\r\\n            // a = (1 - gt)\\r\\n            int128 a = int128(ONE).sub(g.mul(t));\\r\\n            require(a > 0, \\\"YieldMath: Too far from maturity\\\");\\r\\n            require(a <= int128(ONE), \\\"YieldMath: g must be positive\\\");\\r\\n\\r\\n            return uint128(a);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _computeB(\\r\\n        uint128 timeTillMaturity,\\r\\n        int128 ts,\\r\\n        int128 g\\r\\n    ) private pure returns (uint128) {\\r\\n        unchecked {\\r\\n            // t = ts * timeTillMaturity\\r\\n            int128 t = ts.mul(timeTillMaturity.fromUInt());\\r\\n            require(t >= 0, \\\"YieldMath: t must be positive\\\"); // Meaning neither T or ts can be negative\\r\\n\\r\\n            // b = (1 - t/g)\\r\\n            int128 b = int128(ONE).sub(t.div(g));\\r\\n            require(b > 0, \\\"YieldMath: Too far from maturity\\\");\\r\\n            require(b <= int128(ONE), \\\"YieldMath: g must be positive\\\");\\r\\n\\r\\n            return uint128(b);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2d06cf25795534a33f68cd9ac20c9a3b1e57f2f2d0fdaa5ed5172b7c29201298\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61229861003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100b95760003560e01c80630219e702146100be578063102d196e146100ee578063209f44651461010157806334945b3a14610114578063405289321461011f5780635fd8dc0814610132578063638c568a146101455780636a31b2d7146101585780639a7d157014610172578063b7ff1b1e14610185578063c2ee3a0814610198578063d49d5181146101a3578063e03824d6146101b1575b600080fd5b6100d16100cc36600461206c565b6101c4565b6040516001600160801b0390911681526020015b60405180910390f35b6100d16100fc36600461206c565b6102fa565b6100d161010f36600461206c565b6103be565b6100d1600160411b81565b6100d161012d3660046120d1565b610402565b6100d16101403660046120d1565b6105b5565b6100d1610153366004612145565b610780565b61016464e8d4a5100081565b6040519081526020016100e5565b6100d16101803660046120d1565b610910565b6100d161019336600461206c565b610a71565b6100d1600160401b81565b6101646001600160801b0381565b6100d16101bf3660046120d1565b610a9c565b6000846001600160801b0316866001600160801b031614156101e8575060006102f1565b60006101f5858585610c20565b905060006102116001600160801b03891683600160401b610cf9565b9050600061022d6001600160801b03891684600160401b610cf9565b9050600061024a8383016001600160801b0316600160411b610dac565b905060006102666001600160801b038316600160401b87610cf9565b6001600160801b03908116915081111561029b5760405162461bcd60e51b815260040161029290612189565b60405180910390fd5b64e8d4a51001600160801b0381106102ba576001600160801b036102c3565b64e8d4a5100081015b9050896001600160801b0316816001600160801b0316116102e657808a036102e9565b60005b955050505050505b95945050505050565b600080610308858585610de3565b905060006103246001600160801b03891683600160401b610cf9565b905060006103406001600160801b03891684600160401b610cf9565b905060008861035f6001600160801b0385850116600160401b87610cf9565b036001600160801b031690506001600160801b0380168111156103945760405162461bcd60e51b815260040161029290612189565b64e8d4a5100081116103a75760006103b0565b64e8d4a5100081035b9a9950505050505050505050565b6000806103ce87878787876101c4565b90506001600160801b038116156103f5576103ed8787838888886105b5565b9150506102f1565b5060009695505050505050565b600080610410858585610c20565b9050600061042c6001600160801b038a1683600160401b610cf9565b6001600160801b03908116915060009061044d908a1684600160401b610cf9565b6001600160801b0390811691508a811689821601908111156104af5760405162461bcd60e51b815260206004820152601b60248201527a2cb4b2b63226b0ba341d102a37b79036bab1b4103130b9b29034b760291b6044820152606401610292565b60006104c96001600160801b03831686600160401b610cf9565b6001600160801b0390811691508484018290039081111561053d5760405162461bcd60e51b815260206004820152602860248201527f5969656c644d6174683a20496e73756666696369656e74206679546f6b656e20604482015267726573657276657360c01b6064820152608401610292565b60006105576001600160801b038316600160401b89610cf9565b6001600160801b039081168e82160391508111156105875760405162461bcd60e51b815260040161029290612189565b64e8d4a51000811161059a5760006105a3565b64e8d4a5100081035b9e9d5050505050505050505050505050565b6000806105c3858585610c20565b905060006105df6001600160801b038a1683600160401b610cf9565b6001600160801b039081169150600090610600908a1684600160401b610cf9565b6001600160801b0390811691508881168a821603908111156106645760405162461bcd60e51b815260206004820152601f60248201527f5969656c644d6174683a20546f6f206d756368206679546f6b656e206f7574006044820152606401610292565b600061067e6001600160801b03831686600160401b610cf9565b6001600160801b039081169150848401829003908111156106f55760405162461bcd60e51b815260206004820152602b60248201527f5969656c644d6174683a20526573756c74696e6720626173652072657365727660448201526a0cae640e8dede40d0d2ced60ab1b6064820152608401610292565b60006001600160801b03808f1690610714908416600160401b8a610cf9565b6001600160801b03160390506001600160801b0380168111156107495760405162461bcd60e51b815260040161029290612189565b64e8d4a51001600160801b038110610768576001600160801b036105a3565b64e8d4a51000019d9c50505050505050505050505050565b60008361078f575060006102f1565b60006107bf6107b46107a9866001600160801b0316610e34565b600f86900b90610e51565b600160401b90610e88565b9050600081600f0b136107e45760405162461bcd60e51b815260040161029290612201565b600060016108006001600160801b03891684600160401b610cf9565b6001600160801b039081169061081d908b1685600160401b610cf9565b6001600160801b031601901c90506001600160801b038016811061087d5760405162461bcd60e51b81526020600482015260176024820152765969656c644d6174683a2053756d206f766572666c6f7760481b6044820152606401610292565b6000866108986001600160801b038416600160401b86610cf9565b6001600160801b0316816108ae576108ae61224c565b0490506001600160801b0381106109045760405162461bcd60e51b815260206004820152601a6024820152795969656c644d6174683a20526573756c74206f766572666c6f7760301b6044820152606401610292565b98975050505050505050565b60008061091e858585610c20565b9050600061093a6001600160801b038a1683600160401b610cf9565b6001600160801b03908116915060009061095b908a1684600160401b610cf9565b6001600160801b0390811691508881168b821603908111156109be5760405162461bcd60e51b815260206004820152601c60248201527b165a595b1913585d1a0e88151bdbc81b5d58da0818985cd9481bdd5d60221b6044820152606401610292565b60006109d86001600160801b03831686600160401b610cf9565b6001600160801b03908116915084840182900390811115610a525760405162461bcd60e51b815260206004820152602e60248201527f5969656c644d6174683a20526573756c74696e67206679546f6b656e2072657360448201526d0cae4eccae640e8dede40d0d2ced60931b6064820152608401610292565b60006001600160801b03808e1690610714908416600160401b8a610cf9565b600080610a8187878787876102fa565b9050610a91878783888888610a9c565b979650505050505050565b600080610aaa858585610c20565b90506000610ac66001600160801b038a1683600160401b610cf9565b6001600160801b039081169150600090610ae7908a1684600160401b610cf9565b6001600160801b0390811691508981168982160190811115610b4b5760405162461bcd60e51b815260206004820152601e60248201527f5969656c644d6174683a20546f6f206d756368206679546f6b656e20696e00006044820152606401610292565b6000610b656001600160801b03831686600160401b610cf9565b6001600160801b03908116915084840182900390811115610bd65760405162461bcd60e51b815260206004820152602560248201527f5969656c644d6174683a20496e73756666696369656e74206261736520726573604482015264657276657360d81b6064820152608401610292565b6000610bf06001600160801b038316600160401b89610cf9565b6001600160801b039081168f82160391508111156105875760405162461bcd60e51b815260040161029290612189565b600080610c386107a9866001600160801b0316610e34565b9050600081600f0b1215610c5e5760405162461bcd60e51b8152600401610292906121ca565b6000610c716107b4600f86900b84610e51565b9050600081600f0b13610c965760405162461bcd60e51b815260040161029290612201565b600160401b600f82900b1315610cee5760405162461bcd60e51b815260206004820152601d60248201527f5969656c644d6174683a2067206d75737420626520706f7369746976650000006044820152606401610292565b9150505b9392505050565b60006001600160801b038216610d0e57600080fd5b6001600160801b038416610d37576001600160801b038316610d2f57600080fd5b506000610cf2565b6000826001600160801b0316846001600160801b0316610d5687610ebb565b6001600160801b03036001600160801b03160281610d7657610d7661224c565b0490506001600160801b03811115610d92576000915050610cf2565b610da4816001600160801b03036116d0565b915050610cf2565b600081610db857600080fd5b6000610dc48484611e85565b905060016001607f1b036001600160801b0382161115610cf257600080fd5b600080610dfb6107a9866001600160801b0316610e34565b9050600081600f0b1215610e215760405162461bcd60e51b8152600401610292906121ca565b6000610c716107b4600f84900b86611fe6565b600060016001603f1b03821115610e4a57600080fd5b5060401b90565b6000600f83810b9083900b0260401d60016001607f1b03198112801590610e7f575060016001607f1b038113155b610cf257600080fd5b6000600f82810b9084900b0360016001607f1b03198112801590610e7f575060016001607f1b03811315610cf257600080fd5b60006001600160801b038216610ed057600080fd5b6001600160801b038216607f60791b600160401b821015610efd5760409190911b9060016001607f1b0319015b600160601b821015610f1b5760209190911b9060016001607e1b0319015b600160701b821015610f395760109190911b9060016001607d1b0319015b600160781b821015610f575760089190911b9060016001607c1b0319015b6001607c1b821015610f755760049190911b9060016001607b1b0319015b6001607e1b821015610f935760029190911b9060016001607a1b0319015b6001607f1b821015610fb15760019190911b906001600160791b0319015b908002607f1c90600160801b8210610fd15760019190911c90600160781b175b908002607f1c90600160801b8210610ff15760019190911c90600160771b175b908002607f1c90600160801b82106110115760019190911c90600160761b175b908002607f1c90600160801b82106110315760019190911c90600160751b175b908002607f1c90600160801b82106110515760019190911c90600160741b175b908002607f1c90600160801b82106110715760019190911c90600160731b175b908002607f1c90600160801b82106110915760019190911c90600160721b175b908002607f1c90600160801b82106110b15760019190911c90600160711b175b908002607f1c90600160801b82106110d15760019190911c90600160701b175b908002607f1c90600160801b82106110f15760019190911c906001606f1b175b908002607f1c90600160801b82106111115760019190911c906001606e1b175b908002607f1c90600160801b82106111315760019190911c906001606d1b175b908002607f1c90600160801b82106111515760019190911c906001606c1b175b908002607f1c90600160801b82106111715760019190911c906001606b1b175b908002607f1c90600160801b82106111915760019190911c906001606a1b175b908002607f1c90600160801b82106111b15760019190911c90600160691b175b908002607f1c90600160801b82106111d15760019190911c90600160681b175b908002607f1c90600160801b82106111f15760019190911c90600160671b175b908002607f1c90600160801b82106112115760019190911c90600160661b175b908002607f1c90600160801b82106112315760019190911c90600160651b175b908002607f1c90600160801b82106112515760019190911c90600160641b175b908002607f1c90600160801b82106112715760019190911c90600160631b175b908002607f1c90600160801b82106112915760019190911c90600160621b175b908002607f1c90600160801b82106112b15760019190911c90600160611b175b908002607f1c90600160801b82106112d15760019190911c90600160601b175b908002607f1c90600160801b82106112f15760019190911c906001605f1b175b908002607f1c90600160801b82106113115760019190911c906001605e1b175b908002607f1c90600160801b82106113315760019190911c906001605d1b175b908002607f1c90600160801b82106113515760019190911c906001605c1b175b908002607f1c90600160801b82106113715760019190911c906001605b1b175b908002607f1c90600160801b82106113915760019190911c906001605a1b175b908002607f1c90600160801b82106113b15760019190911c90600160591b175b908002607f1c90600160801b82106113d15760019190911c90600160581b175b908002607f1c90600160801b82106113f15760019190911c90600160571b175b908002607f1c90600160801b82106114115760019190911c90600160561b175b908002607f1c90600160801b82106114315760019190911c90600160551b175b908002607f1c90600160801b82106114515760019190911c90600160541b175b908002607f1c90600160801b82106114715760019190911c90600160531b175b908002607f1c90600160801b82106114915760019190911c90600160521b175b908002607f1c90600160801b82106114b15760019190911c90600160511b175b908002607f1c90600160801b82106114d15760019190911c90600160501b175b908002607f1c90600160801b82106114f15760019190911c906001604f1b175b908002607f1c90600160801b82106115115760019190911c906001604e1b175b908002607f1c90600160801b82106115315760019190911c906001604d1b175b908002607f1c90600160801b82106115515760019190911c906001604c1b175b908002607f1c90600160801b82106115715760019190911c906001604b1b175b908002607f1c90600160801b82106115915760019190911c906001604a1b175b908002607f1c90600160801b82106115b15760019190911c90600160491b175b908002607f1c90600160801b82106115d15760019190911c90600160481b175b908002607f1c90600160801b82106115f15760019190911c90600160471b175b908002607f1c90600160801b82106116115760019190911c90600160461b175b908002607f1c90600160801b82106116315760019190911c90600160451b175b908002607f1c90600160801b82106116515760019190911c90600160441b175b908002607f1c90600160801b82106116715760019190911c90600160431b175b908002607f1c90600160801b82106116915760019190911c90600160421b175b908002607f1c90600160801b82106116b15760019190911c90600160411b175b908002607f1c90600160801b8210610cf257600160401b179392505050565b60006001607f1b600160781b8316156116f9576fb504f333f9de6484597d89b3754abe9f02607f1c5b600160771b83161561171b576f9837f0518db8a96f46ad23182e42f6f602607f1c5b600160761b83161561173d576f8b95c1e3ea8bd6e6fbe4628758a53c9002607f1c5b600160751b83161561175f576f85aac367cc487b14c5c95b8c2154c1b202607f1c5b600160741b831615611781576f82cd8698ac2ba1d73e2a475b46520bff02607f1c5b600160731b8316156117a3576f8164d1f3bc0307737be56527bd14def402607f1c5b600160721b8316156117c5576f80b1ed4fd999ab6c25335719b6e6fd2002607f1c5b600160711b8316156117e7576f8058d7d2d5e5f6b094d589f608ee4aa202607f1c5b600160701b831615611809576f802c6436d0e04f50ff8ce94a6797b3ce02607f1c5b6001606f1b83161561182b576f8016302f174676283690dfe44d11d00802607f1c5b6001606e1b83161561184d576f800b179c82028fd0945e54e2ae18f2f002607f1c5b6001606d1b83161561186f576f80058baf7fee3b5d1c718b38e549cb9302607f1c5b6001606c1b831615611891576f8002c5d00fdcfcb6b6566a58c048be1f02607f1c5b6001606b1b8316156118b3576f800162e61bed4a48e84c2e1a463473d902607f1c5b6001606a1b8316156118d5576f8000b17292f702a3aa22beacca94901302607f1c5b600160691b8316156118f7576f800058b92abbae02030c5fa5256f41fe02607f1c5b600160681b831615611919576f80002c5c8dade4d71776c0f4dbea67d602607f1c5b600160671b83161561193b576f8000162e44eaf636526be456600bdbe402607f1c5b600160661b83161561195d576f80000b1721fa7c188307016c1cd4e8b602607f1c5b600160651b83161561197f576f8000058b90de7e4cecfc487503488bb102607f1c5b600160641b8316156119a1576f800002c5c8678f36cbfce50a6de60b1402607f1c5b600160631b8316156119c3576f80000162e431db9f80b2347b5d62e51602607f1c5b600160621b8316156119e5576f800000b1721872d0c7b08cf1e011415202607f1c5b600160611b831615611a07576f80000058b90c1aa8a5c3736cb77e8dff02607f1c5b600160601b831615611a29576f8000002c5c8605a4635f2efc2362d97802607f1c5b6001605f1b831615611a4b576f800000162e4300e635cf4a109e3939bd02607f1c5b6001605e1b831615611a6d576f8000000b17217ff81bef9c551590cf8302607f1c5b6001605d1b831615611a8f576f800000058b90bfdd4e39cd52c0cfa27c02607f1c5b6001605c1b831615611ab1576f80000002c5c85fe6f72d669e0e76e41102607f1c5b6001605b1b831615611ad3576f8000000162e42ff18f9ad35186d0df2802607f1c5b6001605a1b831615611af5576f80000000b17217f84cce71aa0dcfffe702607f1c5b600160591b831615611b17576f8000000058b90bfc07a77ad56ed22aaa02607f1c5b600160581b831615611b39576f800000002c5c85fdfc23cdead40da8d602607f1c5b600160571b831615611b5b576f80000000162e42fefc25eb1571853a6602607f1c5b600160561b831615611b7d576f800000000b17217f7d97f692baacded502607f1c5b600160551b831615611b9f576f80000000058b90bfbead3b8b5dd254d702607f1c5b600160541b831615611bc1576f8000000002c5c85fdf4eedd62f084e6702607f1c5b600160531b831615611be3576f800000000162e42fefa58aef378bf58602607f1c5b600160521b831615611c05576f8000000000b17217f7d24a78a3c7ef0202607f1c5b600160511b831615611c27576f800000000058b90bfbe9067c93e474a602607f1c5b600160501b831615611c49576f80000000002c5c85fdf47b8e5a72599f02607f1c5b6001604f1b831615611c6b576f8000000000162e42fefa3bdb315934a202607f1c5b6001604e1b831615611c8d576f80000000000b17217f7d1d7299b49c4602607f1c5b6001604d1b831615611caf576f8000000000058b90bfbe8e9a8d1c4ea002607f1c5b6001604c1b831615611cd1576f800000000002c5c85fdf4745969ea76f02607f1c5b6001604b1b831615611cf3576f80000000000162e42fefa3a0df5373bf02607f1c5b6001604a1b831615611d15576f800000000000b17217f7d1cff4aac1e102607f1c5b600160491b831615611d37576f80000000000058b90bfbe8e7db95a2f102607f1c5b600160481b831615611d59576f8000000000002c5c85fdf473e61ae1f802607f1c5b600160471b831615611d7b576f800000000000162e42fefa39f121751c02607f1c5b600160461b831615611d9d576f8000000000000b17217f7d1cf815bb9602607f1c5b600160451b831615611dbf576f800000000000058b90bfbe8e7bec1e0d02607f1c5b600160441b831615611de1576f80000000000002c5c85fdf473dee5f1702607f1c5b600160431b831615611e03576f8000000000000162e42fefa39ef5438f02607f1c5b600160421b831615611e245768b17217f7d1cf7a26c86001607f1b0102607f1c5b600160411b831615611e45576858b90bfbe8e7bcf4a46001607f1b0102607f1c5b600160401b831615611e6657682c5c85fdf473de72a26001607f1b0102607f1c5b607f60799390931c83169092036001600160801b03169190911c919050565b600081611e9157600080fd5b60006001600160c01b038411611ebc5782604085901b81611eb457611eb461224c565b049050611fd2565b60c084811c600160201b8110611ed4576020918201911c5b620100008110611ee6576010918201911c5b6101008110611ef7576008918201911c5b60108110611f07576004918201911c5b60048110611f17576002918201911c5b60028110611f26576001820191505b60bf820360018603901c6001018260ff0387901b81611f4757611f4761224c565b0492506001600160801b03831115611f5e57600080fd5b608085901c83026001600160801b038616840260c088901c604089901b82811015611f8a576001820391505b608084901b92900382811015611fa1576001820391505b829003608084901c8214611fb757611fb7612236565b888181611fc657611fc661224c565b04870196505050505050505b6001600160801b03811115610cf257600080fd5b600081600f0b60001415611ff957600080fd5b600082600f0b604085600f0b901b816120145761201461224c565b05905060016001607f1b03198112801590610e7f575060016001607f1b03811315610cf257600080fd5b8035600f81900b811461205057600080fd5b919050565b80356001600160801b038116811461205057600080fd5b600080600080600060a0868803121561208457600080fd5b61208d86612055565b945061209b60208701612055565b93506120a960408701612055565b92506120b76060870161203e565b91506120c56080870161203e565b90509295509295909350565b60008060008060008060c087890312156120ea57600080fd5b6120f387612055565b955061210160208801612055565b945061210f60408801612055565b935061211d60608801612055565b925061212b6080880161203e565b915061213960a0880161203e565b90509295509295509295565b600080600080600060a0868803121561215d57600080fd5b61216686612055565b945061217460208701612055565b9350604086013592506120b760608701612055565b60208082526021908201527f5969656c644d6174683a20526f756e64696e6720696e6475636564206572726f6040820152603960f91b606082015260800190565b6020808252601d908201527f5969656c644d6174683a2074206d75737420626520706f736974697665000000604082015260600190565b6020808252818101527f5969656c644d6174683a20546f6f206661722066726f6d206d61747572697479604082015260600190565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea2646970667358221220982f474c4d56a226789c6ebe8b8d5369538238a02b32267023f67cd7994ce66664736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "baseInForFYTokenOut(uint128,uint128,uint128,uint128,int128,int128)": {
        "params": {
          "baseReserves": "Base reserves amount",
          "fyTokenAmount": "fyToken amount to be traded",
          "fyTokenReserves": "fyToken reserves amount",
          "g": "fee coefficient, multiplied by 2^64",
          "timeTillMaturity": "time till maturity in seconds",
          "ts": "time till maturity coefficient, multiplied by 2^64"
        },
        "returns": {
          "_0": "the amount of base a user would have to pay for given amount of         fyToken"
        }
      },
      "baseOutForFYTokenIn(uint128,uint128,uint128,uint128,int128,int128)": {
        "params": {
          "baseReserves": "base reserves amount",
          "fyTokenAmount": "fyToken amount to be traded",
          "fyTokenReserves": "fyToken reserves amount",
          "g": "fee coefficient, multiplied by 2^64",
          "timeTillMaturity": "time till maturity in seconds",
          "ts": "time till maturity coefficient, multiplied by 2^64"
        },
        "returns": {
          "_0": "the amount of Base a user would get for given amount of fyToken"
        }
      },
      "fyTokenInForBaseOut(uint128,uint128,uint128,uint128,int128,int128)": {
        "params": {
          "baseAmount": "Base amount to be traded",
          "baseReserves": "base reserves amount",
          "fyTokenReserves": "fyToken reserves amount",
          "g": "fee coefficient, multiplied by 2^64",
          "timeTillMaturity": "time till maturity in seconds",
          "ts": "time till maturity coefficient, multiplied by 2^64"
        },
        "returns": {
          "_0": "the amount of fyToken a user could sell for given amount of Base"
        }
      },
      "fyTokenOutForBaseIn(uint128,uint128,uint128,uint128,int128,int128)": {
        "params": {
          "baseAmount": "base amount to be traded",
          "baseReserves": "base reserves amount",
          "fyTokenReserves": "fyToken reserves amount",
          "g": "fee coefficient, multiplied by 2^64",
          "timeTillMaturity": "time till maturity in seconds",
          "ts": "time till maturity coefficient, multiplied by 2^64"
        },
        "returns": {
          "_0": "the amount of fyToken a user would get for given amount of Base"
        }
      },
      "maxBaseIn(uint128,uint128,uint128,int128,int128)": {
        "params": {
          "baseReserves": "Base reserves amount",
          "fyTokenReserves": "fyToken reserves amount",
          "g": "fee coefficient, multiplied by 2^64",
          "timeTillMaturity": "time till maturity in seconds",
          "ts": "time till maturity coefficient, multiplied by 2^64"
        },
        "returns": {
          "_0": "max amount of base that can be sold to into the pool"
        }
      },
      "maxBaseOut(uint128,uint128,uint128,int128,int128)": {
        "params": {
          "baseReserves": "Base reserves amount",
          "fyTokenReserves": "fyToken reserves amount",
          "g": "fee coefficient, multiplied by 2^64",
          "timeTillMaturity": "time till maturity in seconds",
          "ts": "time till maturity coefficient, multiplied by 2^64"
        },
        "returns": {
          "_0": "max amount of base that can be bought from the pool"
        }
      },
      "maxFYTokenIn(uint128,uint128,uint128,int128,int128)": {
        "params": {
          "baseReserves": "Base reserves amount",
          "fyTokenReserves": "fyToken reserves amount",
          "g": "fee coefficient, multiplied by 2^64",
          "timeTillMaturity": "time till maturity in seconds",
          "ts": "time till maturity coefficient, multiplied by 2^64"
        },
        "returns": {
          "_0": "max amount of fyTokens that can be sold to into the pool"
        }
      },
      "maxFYTokenOut(uint128,uint128,uint128,int128,int128)": {
        "params": {
          "baseReserves": "Base reserves amount",
          "fyTokenReserves": "fyToken reserves amount",
          "g": "fee coefficient, multiplied by 2^64",
          "timeTillMaturity": "time till maturity in seconds",
          "ts": "time till maturity coefficient, multiplied by 2^64"
        },
        "returns": {
          "_0": "max amount of fyTokens that can be bought from the pool"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "baseInForFYTokenOut(uint128,uint128,uint128,uint128,int128,int128)": {
        "notice": "Calculate the amount of base a user would have to pay for certain amount of fyToken. https://www.desmos.com/calculator/ws5oqj8x5i"
      },
      "baseOutForFYTokenIn(uint128,uint128,uint128,uint128,int128,int128)": {
        "notice": "Calculate the amount of base a user would get for certain amount of fyToken. https://www.desmos.com/calculator/6jlrre7ybt"
      },
      "fyTokenInForBaseOut(uint128,uint128,uint128,uint128,int128,int128)": {
        "notice": "Calculate the amount of fyToken a user could sell for given amount of Base. https://www.desmos.com/calculator/0rgnmtckvy"
      },
      "fyTokenOutForBaseIn(uint128,uint128,uint128,uint128,int128,int128)": {
        "notice": "Calculate the amount of fyToken a user would get for given amount of Base. https://www.desmos.com/calculator/5nf2xuy6yb"
      },
      "invariant(uint128,uint128,uint256,uint128,int128)": {
        "notice": "Calculate a YieldSpace pool invariant according to the whitepaper"
      },
      "maxBaseIn(uint128,uint128,uint128,int128,int128)": {
        "notice": "Calculate the max amount of base that can be sold to into the pool without making the interest rate negative."
      },
      "maxBaseOut(uint128,uint128,uint128,int128,int128)": {
        "notice": "Calculate the max amount of base that can be bought from the pool."
      },
      "maxFYTokenIn(uint128,uint128,uint128,int128,int128)": {
        "notice": "Calculate the max amount of fyTokens that can be sold to into the pool."
      },
      "maxFYTokenOut(uint128,uint128,uint128,int128,int128)": {
        "notice": "Calculate the max amount of fyTokens that can be bought from the pool without making the interest rate negative. See section 6.3 of the YieldSpace White paper"
      }
    },
    "notice": "Ethereum smart contract library implementing Yield Math model.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}