{
  "address": "0xbF3E846E88437A068b471D99D42a2b5D1e6a695e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ICauldron",
          "name": "cauldron_",
          "type": "address"
        },
        {
          "internalType": "contract ILadle",
          "name": "ladle_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes12",
          "name": "vaultId",
          "type": "bytes12"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        }
      ],
      "name": "Auctioned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes12",
          "name": "vaultId",
          "type": "bytes12"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ink",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "art",
          "type": "uint256"
        }
      ],
      "name": "Bought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes6",
          "name": "ilkId",
          "type": "bytes6"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "initialOffer",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "line",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "dust",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "dec",
          "type": "uint8"
        }
      ],
      "name": "IlkSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "param",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "Point",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "role",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "newAdminRole",
          "type": "bytes4"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "role",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "role",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LOCK",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOCK8605463013",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT4146650865",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes12",
          "name": "vaultId",
          "type": "bytes12"
        }
      ],
      "name": "auction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes12",
          "name": "",
          "type": "bytes12"
        }
      ],
      "name": "auctions",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "start",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes12",
          "name": "vaultId",
          "type": "bytes12"
        },
        {
          "internalType": "uint128",
          "name": "base",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "min",
          "type": "uint128"
        }
      ],
      "name": "buy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ink",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cauldron",
      "outputs": [
        {
          "internalType": "contract ICauldron",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "role",
          "type": "bytes4"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "role",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4[]",
          "name": "roles",
          "type": "bytes4[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRoles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "role",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes6",
          "name": "",
          "type": "bytes6"
        }
      ],
      "name": "ilks",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "initialOffer",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ladle",
      "outputs": [
        {
          "internalType": "contract ILadle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes6",
          "name": "",
          "type": "bytes6"
        }
      ],
      "name": "limits",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "line",
          "type": "uint96"
        },
        {
          "internalType": "uint24",
          "name": "dust",
          "type": "uint24"
        },
        {
          "internalType": "uint8",
          "name": "dec",
          "type": "uint8"
        },
        {
          "internalType": "uint128",
          "name": "sum",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "role",
          "type": "bytes4"
        }
      ],
      "name": "lockRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes12",
          "name": "vaultId",
          "type": "bytes12"
        },
        {
          "internalType": "uint128",
          "name": "min",
          "type": "uint128"
        }
      ],
      "name": "payAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ink",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "param",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "point",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "role",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "role",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4[]",
          "name": "roles",
          "type": "bytes4[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRoles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes6",
          "name": "ilkId",
          "type": "bytes6"
        },
        {
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "initialOffer",
          "type": "uint64"
        },
        {
          "internalType": "uint96",
          "name": "line",
          "type": "uint96"
        },
        {
          "internalType": "uint24",
          "name": "dust",
          "type": "uint24"
        },
        {
          "internalType": "uint8",
          "name": "dec",
          "type": "uint8"
        }
      ],
      "name": "setIlk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "role",
          "type": "bytes4"
        },
        {
          "internalType": "bytes4",
          "name": "adminRole",
          "type": "bytes4"
        }
      ],
      "name": "setRoleAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7140b138dcccf6a76eb649629fd10d2bdeb6b86af644e3c13f2ac1c80d5ce64f",
  "receipt": {
    "to": null,
    "from": "0x0B16E3ea120Aeb1DeEbE2Fd8476c6aee8d4F3964",
    "contractAddress": "0xbF3E846E88437A068b471D99D42a2b5D1e6a695e",
    "transactionIndex": 0,
    "gasUsed": "2536869",
    "logsBloom": "0x
    "blockHash": "0xfeb4431fbad9cc1f7e3c944fa6ad2d4c6fba99d4b682be4fbef88e25a570bdba",
    "transactionHash": "0x7140b138dcccf6a76eb649629fd10d2bdeb6b86af644e3c13f2ac1c80d5ce64f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14846814,
        "transactionHash": "0x7140b138dcccf6a76eb649629fd10d2bdeb6b86af644e3c13f2ac1c80d5ce64f",
        "address": "0xbF3E846E88437A068b471D99D42a2b5D1e6a695e",
        "topics": [
          "0xe6231789d19137da31d0550f4ba9ee379020a8cfb64cb79bf1790c996d2e6165",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000b16e3ea120aeb1deebe2fd8476c6aee8d4f3964",
          "0x0000000000000000000000000b16e3ea120aeb1deebe2fd8476c6aee8d4f3964"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xfeb4431fbad9cc1f7e3c944fa6ad2d4c6fba99d4b682be4fbef88e25a570bdba"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14846814,
        "transactionHash": "0x7140b138dcccf6a76eb649629fd10d2bdeb6b86af644e3c13f2ac1c80d5ce64f",
        "address": "0xbF3E846E88437A068b471D99D42a2b5D1e6a695e",
        "topics": [
          "0xd348e2220a50b4500ec353f6e802d2f14dd1b5d6786148fd1bbcc570bf92d473",
          "0xffffffff00000000000000000000000000000000000000000000000000000000",
          "0xffffffff00000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xfeb4431fbad9cc1f7e3c944fa6ad2d4c6fba99d4b682be4fbef88e25a570bdba"
      }
    ],
    "blockNumber": 14846814,
    "cumulativeGasUsed": "2536869",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x954D38e998c4306af2Ea184da309b84452F15f22",
    "0xF8b602f9f668d2fbF07cbAC4607F0a3E3C20b63f"
  ],
  "solcInputHash": "33ce1b88dd6eab84b0d7ae38c48ff578",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ICauldron\",\"name\":\"cauldron_\",\"type\":\"address\"},{\"internalType\":\"contract ILadle\",\"name\":\"ladle_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes12\",\"name\":\"vaultId\",\"type\":\"bytes12\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"name\":\"Auctioned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes12\",\"name\":\"vaultId\",\"type\":\"bytes12\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ink\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"art\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes6\",\"name\":\"ilkId\",\"type\":\"bytes6\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"initialOffer\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"line\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"dust\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"dec\",\"type\":\"uint8\"}],\"name\":\"IlkSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"param\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"Point\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"newAdminRole\",\"type\":\"bytes4\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LOCK\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCK8605463013\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT4146650865\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes12\",\"name\":\"vaultId\",\"type\":\"bytes12\"}],\"name\":\"auction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes12\",\"name\":\"\",\"type\":\"bytes12\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"start\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes12\",\"name\":\"vaultId\",\"type\":\"bytes12\"},{\"internalType\":\"uint128\",\"name\":\"base\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"min\",\"type\":\"uint128\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ink\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cauldron\",\"outputs\":[{\"internalType\":\"contract ICauldron\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"roles\",\"type\":\"bytes4[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes6\",\"name\":\"\",\"type\":\"bytes6\"}],\"name\":\"ilks\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"initialOffer\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ladle\",\"outputs\":[{\"internalType\":\"contract ILadle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes6\",\"name\":\"\",\"type\":\"bytes6\"}],\"name\":\"limits\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"line\",\"type\":\"uint96\"},{\"internalType\":\"uint24\",\"name\":\"dust\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"dec\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"sum\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"}],\"name\":\"lockRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes12\",\"name\":\"vaultId\",\"type\":\"bytes12\"},{\"internalType\":\"uint128\",\"name\":\"min\",\"type\":\"uint128\"}],\"name\":\"payAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ink\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"param\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"point\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"roles\",\"type\":\"bytes4[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes6\",\"name\":\"ilkId\",\"type\":\"bytes6\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"initialOffer\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"line\",\"type\":\"uint96\"},{\"internalType\":\"uint24\",\"name\":\"dust\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"dec\",\"type\":\"uint8\"}],\"name\":\"setIlk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"adminRole\",\"type\":\"bytes4\"}],\"name\":\"setRoleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"auction(bytes12)\":{\"details\":\"Put an undercollateralized vault up for liquidation.\"},\"buy(bytes12,uint128,uint128)\":{\"details\":\"Pay `base` of the debt in a vault in liquidation, getting at least `min` collateral. Use `payAll` to pay all the debt, using `buy` for amounts close to the whole vault might revert.\"},\"getRoleAdmin(bytes4)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes4,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"grantRoles(bytes4[],address)\":{\"details\":\"Grants all of `role` in `roles` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - For each `role` in `roles`, the caller must have ``role``'s admin role.\"},\"hasRole(bytes4,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"lockRole(bytes4)\":{\"details\":\"Sets LOCK as ``role``'s admin role. LOCK has no members, so this disables admin management of ``role``. Emits a {RoleAdminChanged} event. Requirements: - the caller must have ``role``'s admin role.\"},\"payAll(bytes12,uint128)\":{\"details\":\"Pay all debt from a vault in liquidation, getting at least `min` collateral.\"},\"point(bytes32,address)\":{\"details\":\"Point to a different ladle\"},\"renounceRole(bytes4,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes4,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"revokeRoles(bytes4[],address)\":{\"details\":\"Revokes all of `role` in `roles` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - For each `role` in `roles`, the caller must have ``role``'s admin role.\"},\"setIlk(bytes6,uint32,uint64,uint96,uint24,uint8)\":{\"details\":\"Governance function to set:  - the auction duration to calculate liquidation prices  - the proportion of the collateral that will be sold at auction start  - the maximum collateral that can be auctioned at the same time  - the minimum collateral that must be left when buying, unless buying all  - The decimals for maximum and minimum\"},\"setRoleAdmin(bytes4,bytes4)\":{\"details\":\"Sets `adminRole` as ``role``'s admin role. If ``role``'s admin role is not `adminRole` emits a {RoleAdminChanged} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/Witch.sol\":\"Witch\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@yield-protocol/utils-v2/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes4` identifier. These are expected to be the \\n * signatures for all the functions in the contract. Special roles should be exposed\\n * in the external API and be unique:\\n *\\n * ```\\n * bytes4 public constant ROOT = 0x00000000;\\n * ```\\n *\\n * Roles represent restricted access to a function call. For that purpose, use {auth}:\\n *\\n * ```\\n * function foo() public auth {\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `ROOT`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {setRoleAdmin}.\\n *\\n * WARNING: The `ROOT` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\ncontract AccessControl {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes4 adminRole;\\n    }\\n\\n    mapping (bytes4 => RoleData) private _roles;\\n\\n    bytes4 public constant ROOT = 0x00000000;\\n    bytes4 public constant ROOT4146650865 = 0x00000000; // Collision protection for ROOT, test with ROOT12007226833()\\n    bytes4 public constant LOCK = 0xFFFFFFFF;           // Used to disable further permissioning of a function\\n    bytes4 public constant LOCK8605463013 = 0xFFFFFFFF; // Collision protection for LOCK, test with LOCK10462387368()\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role\\n     *\\n     * `ROOT` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes4 indexed role, bytes4 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call.\\n     */\\n    event RoleGranted(bytes4 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes4 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Give msg.sender the ROOT role and create a LOCK role with itself as the admin role and no members. \\n     * Calling setRoleAdmin(msg.sig, LOCK) means no one can grant that msg.sig role anymore.\\n     */\\n    constructor () {\\n        _grantRole(ROOT, msg.sender);   // Grant ROOT to msg.sender\\n        _setRoleAdmin(LOCK, LOCK);      // Create the LOCK role by setting itself as its own admin, creating an independent role tree\\n    }\\n\\n    /**\\n     * @dev Each function in the contract has its own role, identified by their msg.sig signature.\\n     * ROOT can give and remove access to each function, lock any further access being granted to\\n     * a specific action, or even create other roles to delegate admin control over a function.\\n     */\\n    modifier auth() {\\n        require (_hasRole(msg.sig, msg.sender), \\\"Access denied\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allow only if the caller has been granted the admin role of `role`.\\n     */\\n    modifier admin(bytes4 role) {\\n        require (_hasRole(_getRoleAdmin(role), msg.sender), \\\"Only admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes4 role, address account) external view returns (bool) {\\n        return _hasRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes4 role) external view returns (bytes4) {\\n        return _getRoleAdmin(role);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n\\n     * If ``role``'s admin role is not `adminRole` emits a {RoleAdminChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function setRoleAdmin(bytes4 role, bytes4 adminRole) external virtual admin(role) {\\n        _setRoleAdmin(role, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes4 role, address account) external virtual admin(role) {\\n        _grantRole(role, account);\\n    }\\n\\n    \\n    /**\\n     * @dev Grants all of `role` in `roles` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - For each `role` in `roles`, the caller must have ``role``'s admin role.\\n     */\\n    function grantRoles(bytes4[] memory roles, address account) external virtual {\\n        for (uint256 i = 0; i < roles.length; i++) {\\n            require (_hasRole(_getRoleAdmin(roles[i]), msg.sender), \\\"Only admin\\\");\\n            _grantRole(roles[i], account);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets LOCK as ``role``'s admin role. LOCK has no members, so this disables admin management of ``role``.\\n\\n     * Emits a {RoleAdminChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function lockRole(bytes4 role) external virtual admin(role) {\\n        _setRoleAdmin(role, LOCK);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes4 role, address account) external virtual admin(role) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes all of `role` in `roles` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - For each `role` in `roles`, the caller must have ``role``'s admin role.\\n     */\\n    function revokeRoles(bytes4[] memory roles, address account) external virtual {\\n        for (uint256 i = 0; i < roles.length; i++) {\\n            require (_hasRole(_getRoleAdmin(roles[i]), msg.sender), \\\"Only admin\\\");\\n            _revokeRole(roles[i], account);\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes4 role, address account) external virtual {\\n        require(account == msg.sender, \\\"Renounce only for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    function _hasRole(bytes4 role, address account) internal view returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    function _getRoleAdmin(bytes4 role) internal view returns (bytes4) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    function _setRoleAdmin(bytes4 role, bytes4 adminRole) internal virtual {\\n        if (_getRoleAdmin(role) != adminRole) {\\n            _roles[role].adminRole = adminRole;\\n            emit RoleAdminChanged(role, adminRole);\\n        }\\n    }\\n\\n    function _grantRole(bytes4 role, address account) internal {\\n        if (!_hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    function _revokeRole(bytes4 role, address account) internal {\\n        if (_hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n}\",\"keccak256\":\"0x435855fa29ef8e1d5d74ba538947dc47e264f20abb35a2686658dfcadb3ce630\",\"license\":\"MIT\"},\"@yield-protocol/utils-v2/contracts/cast/CastU256U128.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n\\nlibrary CastU256U128 {\\n    /// @dev Safely cast an uint256 to an uint128\\n    function u128(uint256 x) internal pure returns (uint128 y) {\\n        require (x <= type(uint128).max, \\\"Cast overflow\\\");\\n        y = uint128(x);\\n    }\\n}\",\"keccak256\":\"0x97bfabb12f64e6e710ddf6baa55b2ba05136dbac1d50e59e805d48d3bcae8e50\",\"license\":\"BUSL-1.1\"},\"@yield-protocol/utils-v2/contracts/cast/CastU256U32.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n\\nlibrary CastU256U32 {\\n    /// @dev Safely cast an uint256 to an u32\\n    function u32(uint256 x) internal pure returns (uint32 y) {\\n        require (x <= type(uint32).max, \\\"Cast overflow\\\");\\n        y = uint32(x);\\n    }\\n}\",\"keccak256\":\"0x41b9c0da70aec9f7cf66e9add70df24816adca3f04d09a9db368ec8422932bd9\",\"license\":\"BUSL-1.1\"},\"@yield-protocol/utils-v2/contracts/math/WDiv.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n\\nlibrary WDiv { // Fixed point arithmetic in 18 decimal units\\n    // Taken from https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol\\n    /// @dev Divide an amount by a fixed point factor with 18 decimals\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = (x * 1e18) / y;\\n    }\\n}\",\"keccak256\":\"0xf8c9de13b81b1f05704ea9113c0f9a76c3540e75d15ca8333e10574a2ac5d4ef\",\"license\":\"BUSL-1.1\"},\"@yield-protocol/utils-v2/contracts/math/WDivUp.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n\\nlibrary WDivUp { // Fixed point arithmetic in 18 decimal units\\n    // Taken from https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol\\n    /// @dev Divide x and y, with y being fixed point. If both are integers, the result is a fixed point factor. Rounds up.\\n    function wdivup(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * 1e18 + y;            // 101 (1.01) / 1000 (10) -> (101 * 100 + 1000 - 1) / 1000 -> 11 (0.11 = 0.101 rounded up).\\n        unchecked { z -= 1; }       // Can do unchecked subtraction since division in next line will catch y = 0 case anyway\\n        z /= y;\\n    }\\n}\",\"keccak256\":\"0x668a89f918ef6d5b1697249f368cae11bf5efcdb7c1e915c0bb7bb139b22bcab\",\"license\":\"BUSL-1.1\"},\"@yield-protocol/utils-v2/contracts/math/WMul.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n\\nlibrary WMul {\\n    // Taken from https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol\\n    /// @dev Multiply an amount by a fixed point factor with 18 decimals, rounds down.\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * y;\\n        unchecked { z /= 1e18; }\\n    }\\n}\",\"keccak256\":\"0xaacd19261e6d614dc11af925e3525b782b49ec3c1ee63ce3f1ff5b0e06f92a57\",\"license\":\"BUSL-1.1\"},\"@yield-protocol/utils-v2/contracts/math/WMulUp.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n\\nlibrary WMulUp { // Fixed point arithmetic in 18 decimal units\\n    // Taken from https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol\\n    /// @dev Multiply x and y, with y being fixed point. If both are integers, the result is a fixed point factor. Rounds up.\\n    function wmulup(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x * y + 1e18 - 1;        // Rounds up.  So (again imagining 2 decimal places):\\n        unchecked { z /= 1e18; }     // 383 (3.83) * 235 (2.35) -> 90005 (9.0005), + 99 (0.0099) -> 90104, / 100 -> 901 (9.01).\\n    }\\n}\",\"keccak256\":\"0x8d5a1e95dff26ea4e30f7f8ea183f1f934f2d6c602618f1440279e4e473e2dfc\",\"license\":\"BUSL-1.1\"},\"@yield-protocol/utils-v2/contracts/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xa38ec4e151e4d397d05bdfb94e6e4eb91e57a9fca3bc1c655289a4adf31a58fa\",\"license\":\"MIT\"},\"@yield-protocol/vault-interfaces/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./IFYToken.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\n\\nlibrary DataTypes {\\n    struct Series {\\n        IFYToken fyToken;                                               // Redeemable token for the series.\\n        bytes6  baseId;                                                 // Asset received on redemption.\\n        uint32  maturity;                                               // Unix time at which redemption becomes possible.\\n        // bytes2 free\\n    }\\n\\n    struct Debt {\\n        uint96 max;                                                     // Maximum debt accepted for a given underlying, across all series\\n        uint24 min;                                                     // Minimum debt accepted for a given underlying, across all series\\n        uint8 dec;                                                      // Multiplying factor (10**dec) for max and min \\n        uint128 sum;                                                    // Current debt for a given underlying, across all series\\n    }\\n\\n    struct SpotOracle {\\n        IOracle oracle;                                                 // Address for the spot price oracle\\n        uint32  ratio;                                                  // Collateralization ratio to multiply the price for\\n        // bytes8 free\\n    }\\n\\n    struct Vault {\\n        address owner;\\n        bytes6  seriesId;                                                // Each vault is related to only one series, which also determines the underlying.\\n        bytes6  ilkId;                                                   // Asset accepted as collateral\\n    }\\n\\n    struct Balances {\\n        uint128 art;                                                     // Debt amount\\n        uint128 ink;                                                     // Collateral amount\\n    }\\n}\",\"keccak256\":\"0x9b5347152e2ad1fdba19b7cbb4a8a6a1a111c419b03ff1ca00b8e7b29857be84\",\"license\":\"MIT\"},\"@yield-protocol/vault-interfaces/ICauldron.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./IFYToken.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./DataTypes.sol\\\";\\n\\n\\ninterface ICauldron {\\n\\n    /// @dev Variable rate lending oracle for an underlying\\n    function lendingOracles(bytes6 baseId) external view returns (IOracle);\\n\\n    /// @dev An user can own one or more Vaults, with each vault being able to borrow from a single series.\\n    function vaults(bytes12 vault) external view returns (DataTypes.Vault memory);\\n\\n    /// @dev Series available in Cauldron.\\n    function series(bytes6 seriesId) external view returns (DataTypes.Series memory);\\n\\n    /// @dev Assets available in Cauldron.\\n    function assets(bytes6 assetsId) external view returns (address);\\n\\n    /// @dev Each vault records debt and collateral balances_.\\n    function balances(bytes12 vault) external view returns (DataTypes.Balances memory);\\n\\n    /// @dev Max, min and sum of debt per underlying and collateral.\\n    function debt(bytes6 baseId, bytes6 ilkId) external view returns (DataTypes.Debt memory);\\n\\n    // @dev Spot price oracle addresses and collateralization ratios\\n    function spotOracles(bytes6 baseId, bytes6 ilkId) external returns (DataTypes.SpotOracle memory);\\n\\n    /// @dev Create a new vault, linked to a series (and therefore underlying) and up to 5 collateral types\\n    function build(address owner, bytes12 vaultId, bytes6 seriesId, bytes6 ilkId) external returns (DataTypes.Vault memory);\\n\\n    /// @dev Destroy an empty vault. Used to recover gas costs.\\n    function destroy(bytes12 vault) external;\\n\\n    /// @dev Change a vault series and/or collateral types.\\n    function tweak(bytes12 vaultId, bytes6 seriesId, bytes6 ilkId) external returns (DataTypes.Vault memory);\\n\\n    /// @dev Give a vault to another user.\\n    function give(bytes12 vaultId, address receiver) external returns (DataTypes.Vault memory);\\n\\n    /// @dev Move collateral and debt between vaults.\\n    function stir(bytes12 from, bytes12 to, uint128 ink, uint128 art) external returns (DataTypes.Balances memory, DataTypes.Balances memory);\\n\\n    /// @dev Manipulate a vault debt and collateral.\\n    function pour(bytes12 vaultId, int128 ink, int128 art) external returns (DataTypes.Balances memory);\\n\\n    /// @dev Change series and debt of a vault.\\n    /// The module calling this function also needs to buy underlying in the pool for the new series, and sell it in pool for the old series.\\n    function roll(bytes12 vaultId, bytes6 seriesId, int128 art) external returns (DataTypes.Vault memory, DataTypes.Balances memory);\\n\\n    /// @dev Reduce debt and collateral from a vault, ignoring collateralization checks.\\n    function slurp(bytes12 vaultId, uint128 ink, uint128 art) external returns (DataTypes.Balances memory);\\n\\n    // ==== Helpers ====\\n\\n    /// @dev Convert a debt amount for a series from base to fyToken terms.\\n    /// @notice Think about rounding if using, since we are dividing.\\n    function debtFromBase(bytes6 seriesId, uint128 base) external returns (uint128 art);\\n\\n    /// @dev Convert a debt amount for a series from fyToken to base terms\\n    function debtToBase(bytes6 seriesId, uint128 art) external returns (uint128 base);\\n\\n    // ==== Accounting ====\\n\\n    /// @dev Record the borrowing rate at maturity for a series\\n    function mature(bytes6 seriesId) external;\\n    \\n    /// @dev Retrieve the rate accrual since maturity, maturing if necessary.\\n    function accrual(bytes6 seriesId) external returns (uint256);\\n\\n    /// @dev Return the collateralization level of a vault. It will be negative if undercollateralized.\\n    function level(bytes12 vaultId) external returns (int256);\\n}\",\"keccak256\":\"0xd5ab8a49025d614a1856c5f6289a32eea3960cee901e1690224441371560666f\",\"license\":\"MIT\"},\"@yield-protocol/vault-interfaces/IFYToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@yield-protocol/utils-v2/contracts/token/IERC20.sol\\\";\\n\\n\\ninterface IFYToken is IERC20 {\\n    /// @dev Asset that is returned on redemption.\\n    function underlying() external view returns (address);\\n\\n    /// @dev Unix time at which redemption of fyToken for underlying are possible\\n    function maturity() external view returns (uint256);\\n    \\n    /// @dev Record price data at maturity\\n    function mature() external;\\n\\n    /// @dev Mint fyToken providing an equal amount of underlying to the protocol\\n    function mintWithUnderlying(address to, uint256 amount) external;\\n\\n    /// @dev Burn fyToken after maturity for an amount of underlying.\\n    function redeem(address to, uint256 amount) external returns (uint256);\\n\\n    /// @dev Mint fyToken.\\n    /// This function can only be called by other Yield contracts, not users directly.\\n    /// @param to Wallet to mint the fyToken in.\\n    /// @param fyTokenAmount Amount of fyToken to mint.\\n    function mint(address to, uint256 fyTokenAmount) external;\\n\\n    /// @dev Burn fyToken.\\n    /// This function can only be called by other Yield contracts, not users directly.\\n    /// @param from Wallet to burn the fyToken from.\\n    /// @param fyTokenAmount Amount of fyToken to burn.\\n    function burn(address from, uint256 fyTokenAmount) external;\\n}\",\"keccak256\":\"0xee56062d708103ffb7eb965a0a3f1cb77df24effb9ec16e9d58de3eabe7b55d3\",\"license\":\"MIT\"},\"@yield-protocol/vault-interfaces/IJoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@yield-protocol/utils-v2/contracts/token/IERC20.sol\\\";\\n\\n\\ninterface IJoin {\\n    /// @dev asset managed by this contract\\n    function asset() external view returns (address);\\n\\n    /// @dev Add tokens to this contract.\\n    function join(address user, uint128 wad) external returns (uint128);\\n\\n    /// @dev Remove tokens to this contract.\\n    function exit(address user, uint128 wad) external returns (uint128);\\n}\",\"keccak256\":\"0x83c4f43ab4f3e721eaa9462264392e91f39404f10202c8b64b50ef030c36b750\",\"license\":\"MIT\"},\"@yield-protocol/vault-interfaces/ILadle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./IJoin.sol\\\";\\nimport \\\"./ICauldron.sol\\\";\\n\\n\\ninterface ILadle {\\n    function joins(bytes6) external view returns (IJoin);\\n    function cauldron() external view returns (ICauldron);\\n    function build(bytes6 seriesId, bytes6 ilkId, uint8 salt) external returns (bytes12 vaultId, DataTypes.Vault memory vault);\\n    function destroy(bytes12 vaultId) external;\\n    function pour(bytes12 vaultId, address to, int128 ink, int128 art) external;\\n    function close(bytes12 vaultId, address to, int128 ink, int128 art) external;\\n}\\n\",\"keccak256\":\"0xa846b91febb1a099cafac397c2366520bfd6584e9f937baed6644e3c81bd2c16\",\"license\":\"MIT\"},\"@yield-protocol/vault-interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    /**\\n     * @notice Doesn't refresh the price, but returns the latest value available without doing any transactional operations:\\n     * @return value in wei\\n     */\\n    function peek(bytes32 base, bytes32 quote, uint256 amount) external view returns (uint256 value, uint256 updateTime);\\n\\n    /**\\n     * @notice Does whatever work or queries will yield the most up-to-date price, and returns it.\\n     * @return value in wei\\n     */\\n    function get(bytes32 base, bytes32 quote, uint256 amount) external returns (uint256 value, uint256 updateTime);\\n}\\n\",\"keccak256\":\"0xfdcf22915a77069b267f5f464c0564b24b7216ecf3dccb692ddbb2c60feeb6c4\",\"license\":\"MIT\"},\"contracts/vault/Witch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@yield-protocol/utils-v2/contracts/access/AccessControl.sol\\\";\\nimport \\\"@yield-protocol/vault-interfaces/ILadle.sol\\\";\\nimport \\\"@yield-protocol/vault-interfaces/ICauldron.sol\\\";\\nimport \\\"@yield-protocol/vault-interfaces/IJoin.sol\\\";\\nimport \\\"@yield-protocol/vault-interfaces/DataTypes.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/math/WMul.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/math/WMulUp.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/math/WDiv.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/math/WDivUp.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/cast/CastU256U128.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/cast/CastU256U32.sol\\\";\\n\\ncontract Witch is AccessControl {\\n    using WMul for uint256;\\n    using WMulUp for uint256;\\n    using WDiv for uint256;\\n    using WDivUp for uint256;\\n    using CastU256U128 for uint256;\\n    using CastU256U32 for uint256;\\n\\n    event Point(bytes32 indexed param, address value);\\n    event IlkSet(\\n        bytes6 indexed ilkId,\\n        uint32 duration,\\n        uint64 initialOffer,\\n        uint96 line,\\n        uint24 dust,\\n        uint8 dec\\n    );\\n    event Bought(\\n        bytes12 indexed vaultId,\\n        address indexed buyer,\\n        uint256 ink,\\n        uint256 art\\n    );\\n    event Auctioned(bytes12 indexed vaultId, uint256 indexed start);\\n\\n    struct Auction {\\n        address owner;\\n        uint32 start;\\n    }\\n\\n    struct Ilk {\\n        uint32 duration; // Time that auctions take to go to minimal price and stay there.\\n        uint64 initialOffer; // Proportion of collateral that is sold at auction start (1e18 = 100%)\\n    }\\n\\n    struct Limits {\\n        uint96 line; // Maximum concurrent auctioned collateral\\n        uint24 dust; // Minimum collateral that must be left when buying, unless buying all\\n        uint8 dec; // Multiplying factor (10**dec) for line and dust\\n        uint128 sum; // Current concurrent auctioned collateral\\n    }\\n\\n    ICauldron public immutable cauldron;\\n    ILadle public ladle;\\n    mapping(bytes12 => Auction) public auctions;\\n    mapping(bytes6 => Ilk) public ilks;\\n    mapping(bytes6 => Limits) public limits;\\n\\n    constructor(ICauldron cauldron_, ILadle ladle_) {\\n        cauldron = cauldron_;\\n        ladle = ladle_;\\n    }\\n\\n    /// @dev Point to a different ladle\\n    function point(bytes32 param, address value) external auth {\\n        if (param == \\\"ladle\\\") ladle = ILadle(value);\\n        else revert(\\\"Unrecognized parameter\\\");\\n        emit Point(param, value);\\n    }\\n\\n    /// @dev Governance function to set:\\n    ///  - the auction duration to calculate liquidation prices\\n    ///  - the proportion of the collateral that will be sold at auction start\\n    ///  - the maximum collateral that can be auctioned at the same time\\n    ///  - the minimum collateral that must be left when buying, unless buying all\\n    ///  - The decimals for maximum and minimum\\n    function setIlk(\\n        bytes6 ilkId,\\n        uint32 duration,\\n        uint64 initialOffer,\\n        uint96 line,\\n        uint24 dust,\\n        uint8 dec\\n    ) external auth {\\n        require(initialOffer <= 1e18, \\\"Only at or under 100%\\\");\\n        ilks[ilkId] = Ilk({duration: duration, initialOffer: initialOffer});\\n        limits[ilkId] = Limits({\\n            line: line,\\n            dust: dust,\\n            dec: dec,\\n            sum: limits[ilkId].sum // sum is initialized at zero, and doesn't change when changing any ilk parameters\\n        });\\n        emit IlkSet(ilkId, duration, initialOffer, line, dust, dec);\\n    }\\n\\n    /// @dev Put an undercollateralized vault up for liquidation.\\n    function auction(bytes12 vaultId) external {\\n        require(auctions[vaultId].start == 0, \\\"Vault already under auction\\\");\\n        require(cauldron.level(vaultId) < 0, \\\"Not undercollateralized\\\");\\n\\n        DataTypes.Vault memory vault_ = cauldron.vaults(vaultId);\\n        DataTypes.Balances memory balances_ = cauldron.balances(vaultId);\\n        Limits memory limits_ = limits[vault_.ilkId];\\n        limits_.sum += balances_.ink;\\n        require(\\n            limits_.sum <= limits_.line * (10**limits_.dec),\\n            \\\"Collateral limit reached\\\"\\n        );\\n\\n        limits[vault_.ilkId] = limits_;\\n        auctions[vaultId] = Auction({\\n            owner: vault_.owner,\\n            start: block.timestamp.u32()\\n        });\\n        cauldron.give(vaultId, address(this));\\n        emit Auctioned(vaultId, block.timestamp.u32());\\n    }\\n\\n    /// @dev Pay `base` of the debt in a vault in liquidation, getting at least `min` collateral.\\n    /// Use `payAll` to pay all the debt, using `buy` for amounts close to the whole vault might revert.\\n    function buy(\\n        bytes12 vaultId,\\n        uint128 base,\\n        uint128 min\\n    ) external returns (uint256 ink) {\\n        require(auctions[vaultId].start > 0, \\\"Vault not under auction\\\");\\n        DataTypes.Vault memory vault_ = cauldron.vaults(vaultId);\\n        DataTypes.Series memory series_ = cauldron.series(vault_.seriesId);\\n        DataTypes.Balances memory balances_ = cauldron.balances(vaultId);\\n        require(balances_.art > 0, \\\"Nothing to buy\\\"); // Cheapest way of failing gracefully if given a non existing vault\\n\\n        Auction memory auction_ = auctions[vaultId];\\n        Ilk memory ilk_ = ilks[vault_.ilkId];\\n        Limits memory limits_ = limits[vault_.ilkId];\\n\\n        uint256 art = cauldron.debtFromBase(vault_.seriesId, base);\\n        {\\n            uint256 elapsed = uint32(block.timestamp) - auction_.start; // Auctions will malfunction on the 7th of February 2106, at 06:28:16 GMT, we should replace this contract before then.\\n            uint256 price = inkPrice(\\n                balances_,\\n                ilk_.initialOffer,\\n                ilk_.duration,\\n                elapsed\\n            );\\n            ink = uint256(art).wmul(price); // Calculate collateral to sell. Using divdrup stops rounding from leaving 1 stray wei in vaults.\\n            require(ink >= min, \\\"Not enough bought\\\");\\n            require(\\n                art == balances_.art ||\\n                    balances_.ink - ink >= limits_.dust * (10**limits_.dec),\\n                \\\"Leaves dust\\\"\\n            );\\n            limits[vault_.ilkId].sum -= ink.u128();\\n        }\\n\\n        cauldron.slurp(vaultId, ink.u128(), art.u128()); // Remove debt and collateral from the vault\\n        settle(msg.sender, vault_.ilkId, series_.baseId, ink.u128(), base); // Move the assets\\n        if (balances_.art - art == 0) {\\n            // If there is no debt left, return the vault with the collateral to the owner\\n            cauldron.give(vaultId, auction_.owner);\\n            delete auctions[vaultId];\\n        }\\n\\n        emit Bought(vaultId, msg.sender, ink, art);\\n    }\\n\\n    /// @dev Pay all debt from a vault in liquidation, getting at least `min` collateral.\\n    function payAll(bytes12 vaultId, uint128 min)\\n        external\\n        returns (uint256 ink)\\n    {\\n        require(auctions[vaultId].start > 0, \\\"Vault not under auction\\\");\\n        DataTypes.Vault memory vault_ = cauldron.vaults(vaultId);\\n        DataTypes.Series memory series_ = cauldron.series(vault_.seriesId);\\n        DataTypes.Balances memory balances_ = cauldron.balances(vaultId);\\n        Auction memory auction_ = auctions[vaultId];\\n        Ilk memory ilk_ = ilks[vault_.ilkId];\\n\\n        require(balances_.art > 0, \\\"Nothing to buy\\\"); // Cheapest way of failing gracefully if given a non existing vault\\n        {\\n            uint256 elapsed = uint32(block.timestamp) - auction_.start; // Auctions will malfunction on the 7th of February 2106, at 06:28:16 GMT, we should replace this contract before then.\\n            uint256 price = inkPrice(\\n                balances_,\\n                ilk_.initialOffer,\\n                ilk_.duration,\\n                elapsed\\n            );\\n            ink = uint256(balances_.art).wmul(price); // Calculate collateral to sell. Using divdrup stops rounding from leaving 1 stray wei in vaults.\\n            require(ink >= min, \\\"Not enough bought\\\");\\n            ink = (ink > balances_.ink) ? balances_.ink : ink; // The price is rounded up, so we cap this at all the collateral and no more\\n            limits[vault_.ilkId].sum -= ink.u128();\\n        }\\n\\n        cauldron.slurp(vaultId, ink.u128(), balances_.art); // Remove debt and collateral from the vault\\n        settle(\\n            msg.sender,\\n            vault_.ilkId,\\n            series_.baseId,\\n            ink.u128(),\\n            cauldron.debtToBase(vault_.seriesId, balances_.art)\\n        ); // Move the assets\\n        cauldron.give(vaultId, auction_.owner);\\n        delete auctions[vaultId];\\n\\n        emit Bought(vaultId, msg.sender, ink, balances_.art); // Still the initially read `art` value, not the updated one\\n    }\\n\\n    /// @dev Move base from the buyer to the protocol, and collateral from the protocol to the buyer\\n    function settle(\\n        address user,\\n        bytes6 ilkId,\\n        bytes6 baseId,\\n        uint128 ink,\\n        uint128 art\\n    ) private {\\n        if (ink != 0) {\\n            // Give collateral to the user\\n            IJoin ilkJoin = ladle.joins(ilkId);\\n            require(ilkJoin != IJoin(address(0)), \\\"Join not found\\\");\\n            ilkJoin.exit(user, ink);\\n        }\\n        if (art != 0) {\\n            // Take underlying from user\\n            IJoin baseJoin = ladle.joins(baseId);\\n            require(baseJoin != IJoin(address(0)), \\\"Join not found\\\");\\n            baseJoin.join(user, art);\\n        }\\n    }\\n\\n    /// @dev Price of a collateral unit, in underlying, at the present moment, for a given vault. Rounds up, sometimes twice.\\n    ///            ink                     min(auction, elapsed)\\n    /// price = (------- * (p + (1 - p) * -----------------------))\\n    ///            art                          auction\\n    function inkPrice(\\n        DataTypes.Balances memory balances,\\n        uint256 initialOffer_,\\n        uint256 duration_,\\n        uint256 elapsed\\n    ) private pure returns (uint256 price) {\\n        uint256 term1 = uint256(balances.ink).wdivup(balances.art);\\n        uint256 dividend2 = duration_ < elapsed ? duration_ : elapsed;\\n        uint256 divisor2 = duration_;\\n        uint256 term2 = initialOffer_ +\\n            (1e18 - initialOffer_).wmulup(dividend2.wdivup(divisor2));\\n        price = term1.wmulup(term2);\\n    }\\n}\\n\",\"keccak256\":\"0x1317adae8ea01834a8bd6fc80966d05e4222b0d4b8a3047bd9cff14de2e9d0e8\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002e4238038062002e428339810160408190526200003491620001c3565b620000416000336200008d565b620000556001600160e01b03198062000125565b60609190911b6001600160601b031916608052600180546001600160a01b0319166001600160a01b039092169190911790556200021b565b6001600160e01b031982166000908152602081815260408083206001600160a01b038516845290915290205460ff1662000121576001600160e01b031982166000818152602081815260408083206001600160a01b0386168085529252808320805460ff1916600117905551339391927fe6231789d19137da31d0550f4ba9ee379020a8cfb64cb79bf1790c996d2e616591a45b5050565b6001600160e01b0319811662000157836001600160e01b03191660009081526020819052604090206001015460e01b90565b6001600160e01b0319161462000121576001600160e01b0319828116600081815260208190526040808220600101805463ffffffff191660e087901c17905551928416927fd348e2220a50b4500ec353f6e802d2f14dd1b5d6786148fd1bbcc570bf92d4739190a35050565b60008060408385031215620001d757600080fd5b8251620001e48162000202565b6020840151909250620001f78162000202565b809150509250929050565b6001600160a01b03811681146200021857600080fd5b50565b60805160601c612b98620002aa6000396000818161027c0152818161086b015281816108f60152818161099a01528181610b4f01528181610d5201528181610e52015281816110860152818161116e015281816111f9015281816114ae0152818161168b01528181611716015281816117ba01528181611a1a01528181611afd0152611ba00152612b986000f3fe608060405234801561001057600080fd5b50600436106101185760003560e01c801561011d5780630f078e521461014357806310ab9432146101585780631295bd081461017b57806344faded01461018e578063559742d9146101a15780635909c12f1461011d5780635ba5e9f0146101b4578063687f0e4c146101c757806376c62635146101da5780637b141c5b1461023657806394b8e38f1461025757806397ff6a0414610277578063a4f0d7d01461029e578063ad82110f146102ad578063ae93c1b5146102c0578063b46b07f3146102d3578063c6b13d5b146102e6578063cf17b4e914610342578063de02cde7146103d4578063effae353146103e7578063f837dc72146103fa578063ffffffff1461029e575b600080fd5b610125600081565b6040516001600160e01b031990911681526020015b60405180910390f35b610156610151366004612486565b61040d565b005b61016b610166366004612403565b610637565b604051901515815260200161013a565b6101566101893660046123c3565b61064c565b61015661019c366004612403565b61072b565b6101566101af3660046123e8565b610769565b6101256101c23660046123e8565b6107a8565b6101566101d5366004612403565b6107b3565b6102126101e8366004612462565b60036020526000908152604090205463ffffffff811690600160201b90046001600160401b031682565b6040805163ffffffff90931683526001600160401b0390911660208301520161013a565b61024961024436600461237a565b61080e565b60405190815260200161013a565b60015461026a906001600160a01b031681565b60405161013a919061267b565b61026a7f000000000000000000000000000000000000000000000000000000000000000081565b6101256001600160e01b031981565b6101566102bb366004612263565b610f45565b6101566102ce36600461242f565b610fc7565b6101566102e1366004612328565b610ffa565b61031e6102f4366004612328565b6002602052600090815260409020546001600160a01b03811690600160a01b900463ffffffff1682565b604080516001600160a01b03909316835263ffffffff90911660208301520161013a565b610395610350366004612462565b6004602052600090815260409020546001600160601b03811690600160601b810462ffffff1690600160781b810460ff1690600160801b90046001600160801b031684565b604080516001600160601b03909516855262ffffff909316602085015260ff909116918301919091526001600160801b0316606082015260800161013a565b6101566103e2366004612403565b611586565b6101566103f5366004612263565b6115b9565b610249610408366004612343565b61162e565b6104236000356001600160e01b03191633611c96565b6104485760405162461bcd60e51b815260040161043f90612812565b60405180910390fd5b670de0b6b3a7640000846001600160401b031611156104a15760405162461bcd60e51b81526020600482015260156024820152744f6e6c79206174206f7220756e646572203130302560581b604482015260640161043f565b60408051808201825263ffffffff80881682526001600160401b0380881660208085019182526001600160d01b03198c16600081815260038352878120965187549451909516600160201b026001600160601b031990941694909516939093179190911790935583516080810185526001600160601b03808916825262ffffff80891683870190815260ff808a16858a019081528688526004808a528a892080546001600160801b03600160801b808304821660608c019081529c8c905293909c5297519451925199518b1690910298909216600160781b029098166001600160781b0398909316600160601b026001600160781b031990951691909316179290921794909416179190911790915590517f2d2aecbd565ef43424ad300cd36535633b584e48991d49c653fe5316cd4d6d0990610627908890889088908890889063ffffffff9590951685526001600160401b039390931660208501526001600160601b0391909116604084015262ffffff16606083015260ff16608082015260a00190565b60405180910390a2505050505050565b60006106438383611c96565b90505b92915050565b6106626000356001600160e01b03191633611c96565b61067e5760405162461bcd60e51b815260040161043f90612812565b81646c61646c6560d81b14156106ae57600180546001600160a01b0319166001600160a01b0383161790556106ef565b60405162461bcd60e51b81526020600482015260166024820152752ab73932b1b7b3b734bd32b2103830b930b6b2ba32b960511b604482015260640161043f565b817fd61f2f59686784f82db8673820acfa642f9709c800724e09f7ac0e1aaedf4af78260405161071f919061267b565b60405180910390a25050565b8161073e61073882611ccb565b33611c96565b61075a5760405162461bcd60e51b815260040161043f906127c6565b6107648383611ced565b505050565b8061077661073882611ccb565b6107925760405162461bcd60e51b815260040161043f906127c6565b6107a4826001600160e01b0319611d5c565b5050565b600061064682611ccb565b6001600160a01b03811633146108045760405162461bcd60e51b81526020600482015260166024820152752932b737bab731b29037b7363c903337b91039b2b63360511b604482015260640161043f565b6107a48282611ced565b6001600160a01b03198316600090815260026020526040812054600160a01b900463ffffffff166108515760405162461bcd60e51b815260040161043f90612839565b604051631e81f82960e01b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631e81f829906108a09088906004016126b1565b60606040518083038186803b1580156108b857600080fd5b505afa1580156108cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f09190612616565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166355d03e3483602001516040518263ffffffff1660e01b81526004016109449190612714565b60606040518083038186803b15801561095c57600080fd5b505afa158015610970573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099491906125c2565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637229280c886040518263ffffffff1660e01b81526004016109e491906126b1565b604080518083038186803b1580156109fb57600080fd5b505afa158015610a0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a339190612564565b80519091506001600160801b0316610a5d5760405162461bcd60e51b815260040161043f906127ea565b6001600160a01b0319871660009081526002602090815260408083208151808301835290546001600160a01b038082168352600160a01b90910463ffffffff9081168386015288840180516001600160d01b03199081168852600387528588208651808801885290549384168152600160201b9093046001600160401b03168388015290511686526004808652848720855160808101875290546001600160601b0381168252600160601b810462ffffff1682890152600160781b810460ff1682880152600160801b90046001600160801b03166060820152958a01519451634eeb600760e11b8152939691959491937f000000000000000000000000000000000000000000000000000000000000000090931692639dd6c00e92610b869290918f9101612729565b602060405180830381600087803b158015610ba057600080fd5b505af1158015610bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd8919061265e565b6001600160801b031690506000846020015142610bf59190612a73565b63ffffffff1690506000610c228786602001516001600160401b0316876000015163ffffffff1685611ddb565b9050610c2e8382611e6b565b99508a6001600160801b03168a1015610c595760405162461bcd60e51b815260040161043f90612773565b86516001600160801b0316831480610cac57506040840151610c7c90600a61296a565b846020015162ffffff16610c909190612a15565b8a88602001516001600160801b0316610ca99190612a5c565b10155b610ce65760405162461bcd60e51b815260206004820152600b60248201526a1319585d995cc8191d5cdd60aa1b604482015260640161043f565b610cef8a611e89565b60408a8101516001600160d01b03191660009081526004602052208054601090610d2a908490600160801b90046001600160801b0316612a34565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632b7b312f8c610d898b611e89565b610d9285611e89565b6040518463ffffffff1660e01b8152600401610db0939291906126e9565b6040805180830381600087803b158015610dc957600080fd5b505af1158015610ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e019190612564565b50610e1f3388604001518860200151610e198c611e89565b8e611eb6565b8451610e359082906001600160801b0316612a5c565b610f0257835160405163798a828b60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163798a828b91610e87918f916004016126c6565b606060405180830381600087803b158015610ea157600080fd5b505af1158015610eb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed99190612616565b506001600160a01b03198b16600090815260026020526040902080546001600160c01b03191690555b604080518981526020810183905233916001600160a01b03198e1691600080516020612b43833981519152910160405180910390a3505050505050509392505050565b60005b825181101561076457610f76610738848381518110610f6957610f69612ac1565b6020026020010151611ccb565b610f925760405162461bcd60e51b815260040161043f906127c6565b610fb5838281518110610fa757610fa7612ac1565b602002602001015183611ced565b80610fbf81612a90565b915050610f48565b81610fd461073882611ccb565b610ff05760405162461bcd60e51b815260040161043f906127c6565b6107648383611d5c565b6001600160a01b03198116600090815260026020526040902054600160a01b900463ffffffff161561106c5760405162461bcd60e51b815260206004820152601b60248201527a2b30bab63a1030b63932b0b23c903ab73232b91030bab1ba34b7b760291b604482015260640161043f565b60405163f413577160e01b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f4135771906110bb9085906004016126b1565b602060405180830381600087803b1580156110d557600080fd5b505af11580156110e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110d919061254b565b126111545760405162461bcd60e51b8152602060048201526017602482015276139bdd081d5b99195c98dbdb1b185d195c985b1a5e9959604a1b604482015260640161043f565b604051631e81f82960e01b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631e81f829906111a39085906004016126b1565b60606040518083038186803b1580156111bb57600080fd5b505afa1580156111cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f39190612616565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637229280c846040518263ffffffff1660e01b815260040161124391906126b1565b604080518083038186803b15801561125a57600080fd5b505afa15801561126e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112929190612564565b6040838101516001600160d01b03191660009081526004602090815290829020825160808101845290546001600160601b0381168252600160601b810462ffffff1682840152600160781b810460ff1693820193909352600160801b9092046001600160801b031660608301818152918401519394509192916113169083906128c2565b6001600160801b0316905250604081015161133290600a61296a565b815161134791906001600160601b0316612a15565b81606001516001600160801b0316111561139e5760405162461bcd60e51b815260206004820152601860248201527710dbdb1b185d195c985b081b1a5b5a5d081c995858da195960421b604482015260640161043f565b6040808401516001600160d01b0319166000908152600460209081529082902083518154838601518587015160608801516001600160801b03908116600160801b0260ff909216600160781b02166001600160781b0362ffffff909316600160601b026001600160781b03199094166001600160601b0390951694909417929092171691909117179055815180830190925284516001600160a01b03168252810161144842612133565b63ffffffff9081169091526001600160a01b03198616600090815260026020908152604091829020845181549590920151909316600160a01b026001600160c01b03199094166001600160a01b0391821617939093179091555163798a828b60e01b81527f00000000000000000000000000000000000000000000000000000000000000009091169063798a828b906114e790879030906004016126c6565b606060405180830381600087803b15801561150157600080fd5b505af1158015611515573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115399190612616565b5061154342612133565b63ffffffff16846001600160a01b0319167ff5f0f31704b7ca16ced82a8f879c00f695dc647fb9412ba4cdb2264611b364a760405160405180910390a350505050565b8161159361073882611ccb565b6115af5760405162461bcd60e51b815260040161043f906127c6565b6107648383612159565b60005b8251811015610764576115dd610738848381518110610f6957610f69612ac1565b6115f95760405162461bcd60e51b815260040161043f906127c6565b61161c83828151811061160e5761160e612ac1565b602002602001015183612159565b8061162681612a90565b9150506115bc565b6001600160a01b03198216600090815260026020526040812054600160a01b900463ffffffff166116715760405162461bcd60e51b815260040161043f90612839565b604051631e81f82960e01b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631e81f829906116c09087906004016126b1565b60606040518083038186803b1580156116d857600080fd5b505afa1580156116ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117109190612616565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166355d03e3483602001516040518263ffffffff1660e01b81526004016117649190612714565b60606040518083038186803b15801561177c57600080fd5b505afa158015611790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b491906125c2565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637229280c876040518263ffffffff1660e01b815260040161180491906126b1565b604080518083038186803b15801561181b57600080fd5b505afa15801561182f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118539190612564565b6001600160a01b0319871660009081526002602090815260408083208151808301835290546001600160a01b0381168252600160a01b900463ffffffff90811682850152888301516001600160d01b031916855260038452938290208251808401909352549384168252600160201b9093046001600160401b031691810191909152825192935090916001600160801b03166119015760405162461bcd60e51b815260040161043f906127ea565b60008260200151426119139190612a73565b63ffffffff16905060006119408584602001516001600160401b0316856000015163ffffffff1685611ddb565b8551909150611958906001600160801b031682611e6b565b9750886001600160801b03168810156119835760405162461bcd60e51b815260040161043f90612773565b84602001516001600160801b0316881161199d57876119ac565b84602001516001600160801b03165b97506119b788611e89565b6040888101516001600160d01b031916600090815260046020522080546010906119f2908490600160801b90046001600160801b0316612a34565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632b7b312f89611a5189611e89565b86516040516001600160e01b031960e086901b168152611a76939291906004016126e9565b6040805180830381600087803b158015611a8f57600080fd5b505af1158015611aa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac79190612564565b50611b873386604001518660200151611adf8a611e89565b60208a0151885160405163550b025360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263550b025392611b3092600401612729565b602060405180830381600087803b158015611b4a57600080fd5b505af1158015611b5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b82919061265e565b611eb6565b815160405163798a828b60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163798a828b91611bd5918c916004016126c6565b606060405180830381600087803b158015611bef57600080fd5b505af1158015611c03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c279190612616565b506001600160a01b031988166000818152600260205260409081902080546001600160c01b031916905584519051339291600080516020612b4383398151915291611c83918b82526001600160801b0316602082015260400190565b60405180910390a3505050505092915050565b6001600160e01b031982166000908152602081815260408083206001600160a01b038516845290915290205460ff1692915050565b6001600160e01b03191660009081526020819052604090206001015460e01b90565b611cf78282611c96565b156107a4576001600160e01b031982166000818152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339391927f4ddc7b757e7bdd7254a9cd39452d307a52761bc824625c6a33104a075d8099e691a45050565b6001600160e01b03198116611d7083611ccb565b6001600160e01b031916146107a4576001600160e01b0319828116600081815260208190526040808220600101805463ffffffff191660e087901c17905551928416927fd348e2220a50b4500ec353f6e802d2f14dd1b5d6786148fd1bbcc570bf92d4739190a35050565b600080611e0b86600001516001600160801b031687602001516001600160801b03166121ca90919063ffffffff16565b90506000838510611e1c5783611e1e565b845b9050846000611e48611e3084846121ca565b611e428a670de0b6b3a7640000612a5c565b906121f9565b611e5290896128ed565b9050611e5e84826121f9565b9998505050505050505050565b6000611e778284612a15565b670de0b6b3a764000090049392505050565b60006001600160801b03821115611eb25760405162461bcd60e51b815260040161043f9061274c565b5090565b6001600160801b03821615611ff1576001546040516330705b1b60e11b81526000916001600160a01b0316906360e0b63690611ef6908890600401612714565b60206040518083038186803b158015611f0e57600080fd5b505afa158015611f22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f46919061252e565b90506001600160a01b038116611f6e5760405162461bcd60e51b815260040161043f9061279e565b6040516312e5ff7760e01b81526001600160a01b038216906312e5ff7790611f9c908990879060040161268f565b602060405180830381600087803b158015611fb657600080fd5b505af1158015611fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fee919061265e565b50505b6001600160801b0381161561212c576001546040516330705b1b60e11b81526000916001600160a01b0316906360e0b63690612031908790600401612714565b60206040518083038186803b15801561204957600080fd5b505afa15801561205d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612081919061252e565b90506001600160a01b0381166120a95760405162461bcd60e51b815260040161043f9061279e565b60405163ceae3abd60e01b81526001600160a01b0382169063ceae3abd906120d7908990869060040161268f565b602060405180830381600087803b1580156120f157600080fd5b505af1158015612105573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612129919061265e565b50505b5050505050565b600063ffffffff821115611eb25760405162461bcd60e51b815260040161043f9061274c565b6121638282611c96565b6107a4576001600160e01b031982166000818152602081815260408083206001600160a01b0386168085529252808320805460ff1916600117905551339391927fe6231789d19137da31d0550f4ba9ee379020a8cfb64cb79bf1790c996d2e616591a45050565b6000816121df84670de0b6b3a7640000612a15565b6121e991906128ed565b6000190190506106438282612905565b600060016122078385612a15565b61221990670de0b6b3a76400006128ed565b611e779190612a5c565b803561222e81612aed565b919050565b80356001600160a01b03198116811461222e57600080fd5b80356001600160e01b03198116811461222e57600080fd5b6000806040838503121561227657600080fd5b82356001600160401b038082111561228d57600080fd5b818501915085601f8301126122a157600080fd5b81356020828211156122b5576122b5612ad7565b8160051b92506122c6818401612892565b8281528181019085830185870184018b10156122e157600080fd5b600096505b8487101561230b576122f78161224b565b8352600196909601959183019183016122e6565b50965061231b9050878201612223565b9450505050509250929050565b60006020828403121561233a57600080fd5b61064382612233565b6000806040838503121561235657600080fd5b61235f83612233565b9150602083013561236f81612b1b565b809150509250929050565b60008060006060848603121561238f57600080fd5b61239884612233565b925060208401356123a881612b1b565b915060408401356123b881612b1b565b809150509250925092565b600080604083850312156123d657600080fd5b82359150602083013561236f81612aed565b6000602082840312156123fa57600080fd5b6106438261224b565b6000806040838503121561241657600080fd5b61241f8361224b565b9150602083013561236f81612aed565b6000806040838503121561244257600080fd5b61244b8361224b565b91506124596020840161224b565b90509250929050565b60006020828403121561247457600080fd5b813561247f81612b05565b9392505050565b60008060008060008060c0878903121561249f57600080fd5b86356124aa81612b05565b955060208701356124ba81612b30565b945060408701356001600160401b03811681146124d657600080fd5b935060608701356001600160601b03811681146124f257600080fd5b9250608087013562ffffff8116811461250a57600080fd5b915060a087013560ff8116811461252057600080fd5b809150509295509295509295565b60006020828403121561254057600080fd5b815161247f81612aed565b60006020828403121561255d57600080fd5b5051919050565b60006040828403121561257657600080fd5b604080519081016001600160401b038111828210171561259857612598612ad7565b60405282516125a681612b1b565b815260208301516125b681612b1b565b60208201529392505050565b6000606082840312156125d457600080fd5b6125dc61286a565b82516125e781612aed565b815260208301516125f781612b05565b6020820152604083015161260a81612b30565b60408201529392505050565b60006060828403121561262857600080fd5b61263061286a565b825161263b81612aed565b8152602083015161264b81612b05565b6020820152604083015161260a81612b05565b60006020828403121561267057600080fd5b815161247f81612b1b565b6001600160a01b0391909116815260200190565b6001600160a01b039290921682526001600160801b0316602082015260400190565b6001600160a01b031991909116815260200190565b6001600160a01b03199290921682526001600160a01b0316602082015260400190565b6001600160a01b03199390931683526001600160801b03918216602084015216604082015260600190565b6001600160d01b031991909116815260200190565b6001600160d01b03199290921682526001600160801b0316602082015260400190565b6020808252600d908201526c43617374206f766572666c6f7760981b604082015260600190565b602080825260119082015270139bdd08195b9bdd59da08189bdd59da1d607a1b604082015260600190565b6020808252600e908201526d129bda5b881b9bdd08199bdd5b9960921b604082015260600190565b6020808252600a908201526927b7363c9030b236b4b760b11b604082015260600190565b6020808252600e908201526d4e6f7468696e6720746f2062757960901b604082015260600190565b6020808252600d908201526c1058d8d95cdcc819195b9a5959609a1b604082015260600190565b6020808252601790820152762b30bab63a103737ba103ab73232b91030bab1ba34b7b760491b604082015260600190565b604051606081016001600160401b038111828210171561288c5761288c612ad7565b60405290565b604051601f8201601f191681016001600160401b03811182821017156128ba576128ba612ad7565b604052919050565b60006001600160801b038281168482168083038211156128e4576128e4612aab565b01949350505050565b6000821982111561290057612900612aab565b500190565b60008261292257634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561296257816000190482111561294857612948612aab565b8085161561295557918102915b93841c939080029061292c565b509250929050565b600061064360ff84168360008261298357506001610646565b8161299057506000610646565b81600181146129a657600281146129b0576129cc565b6001915050610646565b60ff8411156129c1576129c1612aab565b50506001821b610646565b5060208310610133831016604e8410600b84101617156129ef575081810a610646565b6129f98383612927565b8060001904821115612a0d57612a0d612aab565b029392505050565b6000816000190483118215151615612a2f57612a2f612aab565b500290565b60006001600160801b0383811690831681811015612a5457612a54612aab565b039392505050565b600082821015612a6e57612a6e612aab565b500390565b600063ffffffff83811690831681811015612a5457612a54612aab565b6000600019821415612aa457612aa4612aab565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612b0257600080fd5b50565b6001600160d01b031981168114612b0257600080fd5b6001600160801b0381168114612b0257600080fd5b63ffffffff81168114612b0257600080fdfe3d324932754619529b26d6dad9dfb5410163f09790b9c25ec967c9fa863f9932a26469706673582212201bd1622aaf5da1c7822c95f2f70bacb8d52f303d8babe9a4a6f64289104c5a6d64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101185760003560e01c801561011d5780630f078e521461014357806310ab9432146101585780631295bd081461017b57806344faded01461018e578063559742d9146101a15780635909c12f1461011d5780635ba5e9f0146101b4578063687f0e4c146101c757806376c62635146101da5780637b141c5b1461023657806394b8e38f1461025757806397ff6a0414610277578063a4f0d7d01461029e578063ad82110f146102ad578063ae93c1b5146102c0578063b46b07f3146102d3578063c6b13d5b146102e6578063cf17b4e914610342578063de02cde7146103d4578063effae353146103e7578063f837dc72146103fa578063ffffffff1461029e575b600080fd5b610125600081565b6040516001600160e01b031990911681526020015b60405180910390f35b610156610151366004612486565b61040d565b005b61016b610166366004612403565b610637565b604051901515815260200161013a565b6101566101893660046123c3565b61064c565b61015661019c366004612403565b61072b565b6101566101af3660046123e8565b610769565b6101256101c23660046123e8565b6107a8565b6101566101d5366004612403565b6107b3565b6102126101e8366004612462565b60036020526000908152604090205463ffffffff811690600160201b90046001600160401b031682565b6040805163ffffffff90931683526001600160401b0390911660208301520161013a565b61024961024436600461237a565b61080e565b60405190815260200161013a565b60015461026a906001600160a01b031681565b60405161013a919061267b565b61026a7f000000000000000000000000000000000000000000000000000000000000000081565b6101256001600160e01b031981565b6101566102bb366004612263565b610f45565b6101566102ce36600461242f565b610fc7565b6101566102e1366004612328565b610ffa565b61031e6102f4366004612328565b6002602052600090815260409020546001600160a01b03811690600160a01b900463ffffffff1682565b604080516001600160a01b03909316835263ffffffff90911660208301520161013a565b610395610350366004612462565b6004602052600090815260409020546001600160601b03811690600160601b810462ffffff1690600160781b810460ff1690600160801b90046001600160801b031684565b604080516001600160601b03909516855262ffffff909316602085015260ff909116918301919091526001600160801b0316606082015260800161013a565b6101566103e2366004612403565b611586565b6101566103f5366004612263565b6115b9565b610249610408366004612343565b61162e565b6104236000356001600160e01b03191633611c96565b6104485760405162461bcd60e51b815260040161043f90612812565b60405180910390fd5b670de0b6b3a7640000846001600160401b031611156104a15760405162461bcd60e51b81526020600482015260156024820152744f6e6c79206174206f7220756e646572203130302560581b604482015260640161043f565b60408051808201825263ffffffff80881682526001600160401b0380881660208085019182526001600160d01b03198c16600081815260038352878120965187549451909516600160201b026001600160601b031990941694909516939093179190911790935583516080810185526001600160601b03808916825262ffffff80891683870190815260ff808a16858a019081528688526004808a528a892080546001600160801b03600160801b808304821660608c019081529c8c905293909c5297519451925199518b1690910298909216600160781b029098166001600160781b0398909316600160601b026001600160781b031990951691909316179290921794909416179190911790915590517f2d2aecbd565ef43424ad300cd36535633b584e48991d49c653fe5316cd4d6d0990610627908890889088908890889063ffffffff9590951685526001600160401b039390931660208501526001600160601b0391909116604084015262ffffff16606083015260ff16608082015260a00190565b60405180910390a2505050505050565b60006106438383611c96565b90505b92915050565b6106626000356001600160e01b03191633611c96565b61067e5760405162461bcd60e51b815260040161043f90612812565b81646c61646c6560d81b14156106ae57600180546001600160a01b0319166001600160a01b0383161790556106ef565b60405162461bcd60e51b81526020600482015260166024820152752ab73932b1b7b3b734bd32b2103830b930b6b2ba32b960511b604482015260640161043f565b817fd61f2f59686784f82db8673820acfa642f9709c800724e09f7ac0e1aaedf4af78260405161071f919061267b565b60405180910390a25050565b8161073e61073882611ccb565b33611c96565b61075a5760405162461bcd60e51b815260040161043f906127c6565b6107648383611ced565b505050565b8061077661073882611ccb565b6107925760405162461bcd60e51b815260040161043f906127c6565b6107a4826001600160e01b0319611d5c565b5050565b600061064682611ccb565b6001600160a01b03811633146108045760405162461bcd60e51b81526020600482015260166024820152752932b737bab731b29037b7363c903337b91039b2b63360511b604482015260640161043f565b6107a48282611ced565b6001600160a01b03198316600090815260026020526040812054600160a01b900463ffffffff166108515760405162461bcd60e51b815260040161043f90612839565b604051631e81f82960e01b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631e81f829906108a09088906004016126b1565b60606040518083038186803b1580156108b857600080fd5b505afa1580156108cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f09190612616565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166355d03e3483602001516040518263ffffffff1660e01b81526004016109449190612714565b60606040518083038186803b15801561095c57600080fd5b505afa158015610970573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099491906125c2565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637229280c886040518263ffffffff1660e01b81526004016109e491906126b1565b604080518083038186803b1580156109fb57600080fd5b505afa158015610a0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a339190612564565b80519091506001600160801b0316610a5d5760405162461bcd60e51b815260040161043f906127ea565b6001600160a01b0319871660009081526002602090815260408083208151808301835290546001600160a01b038082168352600160a01b90910463ffffffff9081168386015288840180516001600160d01b03199081168852600387528588208651808801885290549384168152600160201b9093046001600160401b03168388015290511686526004808652848720855160808101875290546001600160601b0381168252600160601b810462ffffff1682890152600160781b810460ff1682880152600160801b90046001600160801b03166060820152958a01519451634eeb600760e11b8152939691959491937f000000000000000000000000000000000000000000000000000000000000000090931692639dd6c00e92610b869290918f9101612729565b602060405180830381600087803b158015610ba057600080fd5b505af1158015610bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd8919061265e565b6001600160801b031690506000846020015142610bf59190612a73565b63ffffffff1690506000610c228786602001516001600160401b0316876000015163ffffffff1685611ddb565b9050610c2e8382611e6b565b99508a6001600160801b03168a1015610c595760405162461bcd60e51b815260040161043f90612773565b86516001600160801b0316831480610cac57506040840151610c7c90600a61296a565b846020015162ffffff16610c909190612a15565b8a88602001516001600160801b0316610ca99190612a5c565b10155b610ce65760405162461bcd60e51b815260206004820152600b60248201526a1319585d995cc8191d5cdd60aa1b604482015260640161043f565b610cef8a611e89565b60408a8101516001600160d01b03191660009081526004602052208054601090610d2a908490600160801b90046001600160801b0316612a34565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632b7b312f8c610d898b611e89565b610d9285611e89565b6040518463ffffffff1660e01b8152600401610db0939291906126e9565b6040805180830381600087803b158015610dc957600080fd5b505af1158015610ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e019190612564565b50610e1f3388604001518860200151610e198c611e89565b8e611eb6565b8451610e359082906001600160801b0316612a5c565b610f0257835160405163798a828b60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163798a828b91610e87918f916004016126c6565b606060405180830381600087803b158015610ea157600080fd5b505af1158015610eb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed99190612616565b506001600160a01b03198b16600090815260026020526040902080546001600160c01b03191690555b604080518981526020810183905233916001600160a01b03198e1691600080516020612b43833981519152910160405180910390a3505050505050509392505050565b60005b825181101561076457610f76610738848381518110610f6957610f69612ac1565b6020026020010151611ccb565b610f925760405162461bcd60e51b815260040161043f906127c6565b610fb5838281518110610fa757610fa7612ac1565b602002602001015183611ced565b80610fbf81612a90565b915050610f48565b81610fd461073882611ccb565b610ff05760405162461bcd60e51b815260040161043f906127c6565b6107648383611d5c565b6001600160a01b03198116600090815260026020526040902054600160a01b900463ffffffff161561106c5760405162461bcd60e51b815260206004820152601b60248201527a2b30bab63a1030b63932b0b23c903ab73232b91030bab1ba34b7b760291b604482015260640161043f565b60405163f413577160e01b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f4135771906110bb9085906004016126b1565b602060405180830381600087803b1580156110d557600080fd5b505af11580156110e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110d919061254b565b126111545760405162461bcd60e51b8152602060048201526017602482015276139bdd081d5b99195c98dbdb1b185d195c985b1a5e9959604a1b604482015260640161043f565b604051631e81f82960e01b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631e81f829906111a39085906004016126b1565b60606040518083038186803b1580156111bb57600080fd5b505afa1580156111cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f39190612616565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637229280c846040518263ffffffff1660e01b815260040161124391906126b1565b604080518083038186803b15801561125a57600080fd5b505afa15801561126e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112929190612564565b6040838101516001600160d01b03191660009081526004602090815290829020825160808101845290546001600160601b0381168252600160601b810462ffffff1682840152600160781b810460ff1693820193909352600160801b9092046001600160801b031660608301818152918401519394509192916113169083906128c2565b6001600160801b0316905250604081015161133290600a61296a565b815161134791906001600160601b0316612a15565b81606001516001600160801b0316111561139e5760405162461bcd60e51b815260206004820152601860248201527710dbdb1b185d195c985b081b1a5b5a5d081c995858da195960421b604482015260640161043f565b6040808401516001600160d01b0319166000908152600460209081529082902083518154838601518587015160608801516001600160801b03908116600160801b0260ff909216600160781b02166001600160781b0362ffffff909316600160601b026001600160781b03199094166001600160601b0390951694909417929092171691909117179055815180830190925284516001600160a01b03168252810161144842612133565b63ffffffff9081169091526001600160a01b03198616600090815260026020908152604091829020845181549590920151909316600160a01b026001600160c01b03199094166001600160a01b0391821617939093179091555163798a828b60e01b81527f00000000000000000000000000000000000000000000000000000000000000009091169063798a828b906114e790879030906004016126c6565b606060405180830381600087803b15801561150157600080fd5b505af1158015611515573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115399190612616565b5061154342612133565b63ffffffff16846001600160a01b0319167ff5f0f31704b7ca16ced82a8f879c00f695dc647fb9412ba4cdb2264611b364a760405160405180910390a350505050565b8161159361073882611ccb565b6115af5760405162461bcd60e51b815260040161043f906127c6565b6107648383612159565b60005b8251811015610764576115dd610738848381518110610f6957610f69612ac1565b6115f95760405162461bcd60e51b815260040161043f906127c6565b61161c83828151811061160e5761160e612ac1565b602002602001015183612159565b8061162681612a90565b9150506115bc565b6001600160a01b03198216600090815260026020526040812054600160a01b900463ffffffff166116715760405162461bcd60e51b815260040161043f90612839565b604051631e81f82960e01b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631e81f829906116c09087906004016126b1565b60606040518083038186803b1580156116d857600080fd5b505afa1580156116ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117109190612616565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166355d03e3483602001516040518263ffffffff1660e01b81526004016117649190612714565b60606040518083038186803b15801561177c57600080fd5b505afa158015611790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b491906125c2565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637229280c876040518263ffffffff1660e01b815260040161180491906126b1565b604080518083038186803b15801561181b57600080fd5b505afa15801561182f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118539190612564565b6001600160a01b0319871660009081526002602090815260408083208151808301835290546001600160a01b0381168252600160a01b900463ffffffff90811682850152888301516001600160d01b031916855260038452938290208251808401909352549384168252600160201b9093046001600160401b031691810191909152825192935090916001600160801b03166119015760405162461bcd60e51b815260040161043f906127ea565b60008260200151426119139190612a73565b63ffffffff16905060006119408584602001516001600160401b0316856000015163ffffffff1685611ddb565b8551909150611958906001600160801b031682611e6b565b9750886001600160801b03168810156119835760405162461bcd60e51b815260040161043f90612773565b84602001516001600160801b0316881161199d57876119ac565b84602001516001600160801b03165b97506119b788611e89565b6040888101516001600160d01b031916600090815260046020522080546010906119f2908490600160801b90046001600160801b0316612a34565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632b7b312f89611a5189611e89565b86516040516001600160e01b031960e086901b168152611a76939291906004016126e9565b6040805180830381600087803b158015611a8f57600080fd5b505af1158015611aa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac79190612564565b50611b873386604001518660200151611adf8a611e89565b60208a0151885160405163550b025360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263550b025392611b3092600401612729565b602060405180830381600087803b158015611b4a57600080fd5b505af1158015611b5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b82919061265e565b611eb6565b815160405163798a828b60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163798a828b91611bd5918c916004016126c6565b606060405180830381600087803b158015611bef57600080fd5b505af1158015611c03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c279190612616565b506001600160a01b031988166000818152600260205260409081902080546001600160c01b031916905584519051339291600080516020612b4383398151915291611c83918b82526001600160801b0316602082015260400190565b60405180910390a3505050505092915050565b6001600160e01b031982166000908152602081815260408083206001600160a01b038516845290915290205460ff1692915050565b6001600160e01b03191660009081526020819052604090206001015460e01b90565b611cf78282611c96565b156107a4576001600160e01b031982166000818152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339391927f4ddc7b757e7bdd7254a9cd39452d307a52761bc824625c6a33104a075d8099e691a45050565b6001600160e01b03198116611d7083611ccb565b6001600160e01b031916146107a4576001600160e01b0319828116600081815260208190526040808220600101805463ffffffff191660e087901c17905551928416927fd348e2220a50b4500ec353f6e802d2f14dd1b5d6786148fd1bbcc570bf92d4739190a35050565b600080611e0b86600001516001600160801b031687602001516001600160801b03166121ca90919063ffffffff16565b90506000838510611e1c5783611e1e565b845b9050846000611e48611e3084846121ca565b611e428a670de0b6b3a7640000612a5c565b906121f9565b611e5290896128ed565b9050611e5e84826121f9565b9998505050505050505050565b6000611e778284612a15565b670de0b6b3a764000090049392505050565b60006001600160801b03821115611eb25760405162461bcd60e51b815260040161043f9061274c565b5090565b6001600160801b03821615611ff1576001546040516330705b1b60e11b81526000916001600160a01b0316906360e0b63690611ef6908890600401612714565b60206040518083038186803b158015611f0e57600080fd5b505afa158015611f22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f46919061252e565b90506001600160a01b038116611f6e5760405162461bcd60e51b815260040161043f9061279e565b6040516312e5ff7760e01b81526001600160a01b038216906312e5ff7790611f9c908990879060040161268f565b602060405180830381600087803b158015611fb657600080fd5b505af1158015611fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fee919061265e565b50505b6001600160801b0381161561212c576001546040516330705b1b60e11b81526000916001600160a01b0316906360e0b63690612031908790600401612714565b60206040518083038186803b15801561204957600080fd5b505afa15801561205d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612081919061252e565b90506001600160a01b0381166120a95760405162461bcd60e51b815260040161043f9061279e565b60405163ceae3abd60e01b81526001600160a01b0382169063ceae3abd906120d7908990869060040161268f565b602060405180830381600087803b1580156120f157600080fd5b505af1158015612105573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612129919061265e565b50505b5050505050565b600063ffffffff821115611eb25760405162461bcd60e51b815260040161043f9061274c565b6121638282611c96565b6107a4576001600160e01b031982166000818152602081815260408083206001600160a01b0386168085529252808320805460ff1916600117905551339391927fe6231789d19137da31d0550f4ba9ee379020a8cfb64cb79bf1790c996d2e616591a45050565b6000816121df84670de0b6b3a7640000612a15565b6121e991906128ed565b6000190190506106438282612905565b600060016122078385612a15565b61221990670de0b6b3a76400006128ed565b611e779190612a5c565b803561222e81612aed565b919050565b80356001600160a01b03198116811461222e57600080fd5b80356001600160e01b03198116811461222e57600080fd5b6000806040838503121561227657600080fd5b82356001600160401b038082111561228d57600080fd5b818501915085601f8301126122a157600080fd5b81356020828211156122b5576122b5612ad7565b8160051b92506122c6818401612892565b8281528181019085830185870184018b10156122e157600080fd5b600096505b8487101561230b576122f78161224b565b8352600196909601959183019183016122e6565b50965061231b9050878201612223565b9450505050509250929050565b60006020828403121561233a57600080fd5b61064382612233565b6000806040838503121561235657600080fd5b61235f83612233565b9150602083013561236f81612b1b565b809150509250929050565b60008060006060848603121561238f57600080fd5b61239884612233565b925060208401356123a881612b1b565b915060408401356123b881612b1b565b809150509250925092565b600080604083850312156123d657600080fd5b82359150602083013561236f81612aed565b6000602082840312156123fa57600080fd5b6106438261224b565b6000806040838503121561241657600080fd5b61241f8361224b565b9150602083013561236f81612aed565b6000806040838503121561244257600080fd5b61244b8361224b565b91506124596020840161224b565b90509250929050565b60006020828403121561247457600080fd5b813561247f81612b05565b9392505050565b60008060008060008060c0878903121561249f57600080fd5b86356124aa81612b05565b955060208701356124ba81612b30565b945060408701356001600160401b03811681146124d657600080fd5b935060608701356001600160601b03811681146124f257600080fd5b9250608087013562ffffff8116811461250a57600080fd5b915060a087013560ff8116811461252057600080fd5b809150509295509295509295565b60006020828403121561254057600080fd5b815161247f81612aed565b60006020828403121561255d57600080fd5b5051919050565b60006040828403121561257657600080fd5b604080519081016001600160401b038111828210171561259857612598612ad7565b60405282516125a681612b1b565b815260208301516125b681612b1b565b60208201529392505050565b6000606082840312156125d457600080fd5b6125dc61286a565b82516125e781612aed565b815260208301516125f781612b05565b6020820152604083015161260a81612b30565b60408201529392505050565b60006060828403121561262857600080fd5b61263061286a565b825161263b81612aed565b8152602083015161264b81612b05565b6020820152604083015161260a81612b05565b60006020828403121561267057600080fd5b815161247f81612b1b565b6001600160a01b0391909116815260200190565b6001600160a01b039290921682526001600160801b0316602082015260400190565b6001600160a01b031991909116815260200190565b6001600160a01b03199290921682526001600160a01b0316602082015260400190565b6001600160a01b03199390931683526001600160801b03918216602084015216604082015260600190565b6001600160d01b031991909116815260200190565b6001600160d01b03199290921682526001600160801b0316602082015260400190565b6020808252600d908201526c43617374206f766572666c6f7760981b604082015260600190565b602080825260119082015270139bdd08195b9bdd59da08189bdd59da1d607a1b604082015260600190565b6020808252600e908201526d129bda5b881b9bdd08199bdd5b9960921b604082015260600190565b6020808252600a908201526927b7363c9030b236b4b760b11b604082015260600190565b6020808252600e908201526d4e6f7468696e6720746f2062757960901b604082015260600190565b6020808252600d908201526c1058d8d95cdcc819195b9a5959609a1b604082015260600190565b6020808252601790820152762b30bab63a103737ba103ab73232b91030bab1ba34b7b760491b604082015260600190565b604051606081016001600160401b038111828210171561288c5761288c612ad7565b60405290565b604051601f8201601f191681016001600160401b03811182821017156128ba576128ba612ad7565b604052919050565b60006001600160801b038281168482168083038211156128e4576128e4612aab565b01949350505050565b6000821982111561290057612900612aab565b500190565b60008261292257634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561296257816000190482111561294857612948612aab565b8085161561295557918102915b93841c939080029061292c565b509250929050565b600061064360ff84168360008261298357506001610646565b8161299057506000610646565b81600181146129a657600281146129b0576129cc565b6001915050610646565b60ff8411156129c1576129c1612aab565b50506001821b610646565b5060208310610133831016604e8410600b84101617156129ef575081810a610646565b6129f98383612927565b8060001904821115612a0d57612a0d612aab565b029392505050565b6000816000190483118215151615612a2f57612a2f612aab565b500290565b60006001600160801b0383811690831681811015612a5457612a54612aab565b039392505050565b600082821015612a6e57612a6e612aab565b500390565b600063ffffffff83811690831681811015612a5457612a54612aab565b6000600019821415612aa457612aa4612aab565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612b0257600080fd5b50565b6001600160d01b031981168114612b0257600080fd5b6001600160801b0381168114612b0257600080fd5b63ffffffff81168114612b0257600080fdfe3d324932754619529b26d6dad9dfb5410163f09790b9c25ec967c9fa863f9932a26469706673582212201bd1622aaf5da1c7822c95f2f70bacb8d52f303d8babe9a4a6f64289104c5a6d64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "auction(bytes12)": {
        "details": "Put an undercollateralized vault up for liquidation."
      },
      "buy(bytes12,uint128,uint128)": {
        "details": "Pay `base` of the debt in a vault in liquidation, getting at least `min` collateral. Use `payAll` to pay all the debt, using `buy` for amounts close to the whole vault might revert."
      },
      "getRoleAdmin(bytes4)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes4,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "grantRoles(bytes4[],address)": {
        "details": "Grants all of `role` in `roles` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - For each `role` in `roles`, the caller must have ``role``'s admin role."
      },
      "hasRole(bytes4,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "lockRole(bytes4)": {
        "details": "Sets LOCK as ``role``'s admin role. LOCK has no members, so this disables admin management of ``role``. Emits a {RoleAdminChanged} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "payAll(bytes12,uint128)": {
        "details": "Pay all debt from a vault in liquidation, getting at least `min` collateral."
      },
      "point(bytes32,address)": {
        "details": "Point to a different ladle"
      },
      "renounceRole(bytes4,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes4,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "revokeRoles(bytes4[],address)": {
        "details": "Revokes all of `role` in `roles` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - For each `role` in `roles`, the caller must have ``role``'s admin role."
      },
      "setIlk(bytes6,uint32,uint64,uint96,uint24,uint8)": {
        "details": "Governance function to set:  - the auction duration to calculate liquidation prices  - the proportion of the collateral that will be sold at auction start  - the maximum collateral that can be auctioned at the same time  - the minimum collateral that must be left when buying, unless buying all  - The decimals for maximum and minimum"
      },
      "setRoleAdmin(bytes4,bytes4)": {
        "details": "Sets `adminRole` as ``role``'s admin role. If ``role``'s admin role is not `adminRole` emits a {RoleAdminChanged} event. Requirements: - the caller must have ``role``'s admin role."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15,
        "contract": "contracts/vault/Witch.sol:Witch",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes4,t_struct(RoleData)10_storage)"
      },
      {
        "astId": 17815,
        "contract": "contracts/vault/Witch.sol:Witch",
        "label": "ladle",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ILadle)2843"
      },
      {
        "astId": 17820,
        "contract": "contracts/vault/Witch.sol:Witch",
        "label": "auctions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes12,t_struct(Auction)17795_storage)"
      },
      {
        "astId": 17825,
        "contract": "contracts/vault/Witch.sol:Witch",
        "label": "ilks",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes6,t_struct(Ilk)17800_storage)"
      },
      {
        "astId": 17830,
        "contract": "contracts/vault/Witch.sol:Witch",
        "label": "limits",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes6,t_struct(Limits)17809_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes12": {
        "encoding": "inplace",
        "label": "bytes12",
        "numberOfBytes": "12"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_bytes6": {
        "encoding": "inplace",
        "label": "bytes6",
        "numberOfBytes": "6"
      },
      "t_contract(ILadle)2843": {
        "encoding": "inplace",
        "label": "contract ILadle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes12,t_struct(Auction)17795_storage)": {
        "encoding": "mapping",
        "key": "t_bytes12",
        "label": "mapping(bytes12 => struct Witch.Auction)",
        "numberOfBytes": "32",
        "value": "t_struct(Auction)17795_storage"
      },
      "t_mapping(t_bytes4,t_struct(RoleData)10_storage)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)10_storage"
      },
      "t_mapping(t_bytes6,t_struct(Ilk)17800_storage)": {
        "encoding": "mapping",
        "key": "t_bytes6",
        "label": "mapping(bytes6 => struct Witch.Ilk)",
        "numberOfBytes": "32",
        "value": "t_struct(Ilk)17800_storage"
      },
      "t_mapping(t_bytes6,t_struct(Limits)17809_storage)": {
        "encoding": "mapping",
        "key": "t_bytes6",
        "label": "mapping(bytes6 => struct Witch.Limits)",
        "numberOfBytes": "32",
        "value": "t_struct(Limits)17809_storage"
      },
      "t_struct(Auction)17795_storage": {
        "encoding": "inplace",
        "label": "struct Witch.Auction",
        "members": [
          {
            "astId": 17792,
            "contract": "contracts/vault/Witch.sol:Witch",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 17794,
            "contract": "contracts/vault/Witch.sol:Witch",
            "label": "start",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Ilk)17800_storage": {
        "encoding": "inplace",
        "label": "struct Witch.Ilk",
        "members": [
          {
            "astId": 17797,
            "contract": "contracts/vault/Witch.sol:Witch",
            "label": "duration",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 17799,
            "contract": "contracts/vault/Witch.sol:Witch",
            "label": "initialOffer",
            "offset": 4,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Limits)17809_storage": {
        "encoding": "inplace",
        "label": "struct Witch.Limits",
        "members": [
          {
            "astId": 17802,
            "contract": "contracts/vault/Witch.sol:Witch",
            "label": "line",
            "offset": 0,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 17804,
            "contract": "contracts/vault/Witch.sol:Witch",
            "label": "dust",
            "offset": 12,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 17806,
            "contract": "contracts/vault/Witch.sol:Witch",
            "label": "dec",
            "offset": 15,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 17808,
            "contract": "contracts/vault/Witch.sol:Witch",
            "label": "sum",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)10_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 7,
            "contract": "contracts/vault/Witch.sol:Witch",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 9,
            "contract": "contracts/vault/Witch.sol:Witch",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes4"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}