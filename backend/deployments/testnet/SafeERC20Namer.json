{
  "address": "0x608746FD624216250BF7C41153B1113f6FdE5423",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "tokenDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "tokenName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "tokenSymbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x947c78f6c5a43d385e3741371fb2783d9a882e0c7dc58976edd0aebee5154216",
  "receipt": {
    "to": null,
    "from": "0x0B16E3ea120Aeb1DeEbE2Fd8476c6aee8d4F3964",
    "contractAddress": "0x608746FD624216250BF7C41153B1113f6FdE5423",
    "transactionIndex": 8,
    "gasUsed": "543527",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x174455bc88c25a7ac26df66da2efd530003efda3c054f81b3285ed543896e3fe",
    "transactionHash": "0x947c78f6c5a43d385e3741371fb2783d9a882e0c7dc58976edd0aebee5154216",
    "logs": [],
    "blockNumber": 14846803,
    "cumulativeGasUsed": "1503942",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "33ce1b88dd6eab84b0d7ae38c48ff578",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"tokenDecimals(address)\":{\"params\":{\"token\":\"The address of the ERC-20 token contract.\"},\"returns\":{\"_0\":\"(uint8) Token decimals.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"tokenDecimals(address)\":{\"notice\":\"Provides a safe ERC20.decimals version which returns '18' as fallback value.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@yield-protocol/utils-v2/contracts/token/SafeERC20Namer.sol\":\"SafeERC20Namer\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@yield-protocol/utils-v2/contracts/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xa38ec4e151e4d397d05bdfb94e6e4eb91e57a9fca3bc1c655289a4adf31a58fa\",\"license\":\"MIT\"},\"@yield-protocol/utils-v2/contracts/token/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Taken from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/IERC20Metadata.sol\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0xb7e893a07c660edd1c4423225c92c73d45c46bc9944677654f5d8a1f42f60b59\",\"license\":\"MIT\"},\"@yield-protocol/utils-v2/contracts/token/SafeERC20Namer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../token/IERC20Metadata.sol\\\";\\nimport \\\"../utils/AddressStringUtil.sol\\\";\\n\\n// produces token descriptors from inconsistent or absent ERC20 symbol implementations that can return string or bytes32\\n// this library will always produce a string symbol to represent the token\\nlibrary SafeERC20Namer {\\n    function bytes32ToString(bytes32 x) private pure returns (string memory) {\\n        bytes memory bytesString = new bytes(32);\\n        uint256 charCount = 0;\\n        for (uint256 j = 0; j < 32; j++) {\\n            bytes1 char = x[j];\\n            if (char != 0) {\\n                bytesString[charCount] = char;\\n                charCount++;\\n            }\\n        }\\n        bytes memory bytesStringTrimmed = new bytes(charCount);\\n        for (uint256 j = 0; j < charCount; j++) {\\n            bytesStringTrimmed[j] = bytesString[j];\\n        }\\n        return string(bytesStringTrimmed);\\n    }\\n\\n    // assumes the data is in position 2\\n    function parseStringData(bytes memory b) private pure returns (string memory) {\\n        uint256 charCount = 0;\\n        // first parse the charCount out of the data\\n        for (uint256 i = 32; i < 64; i++) {\\n            charCount <<= 8;\\n            charCount += uint8(b[i]);\\n        }\\n\\n        bytes memory bytesStringTrimmed = new bytes(charCount);\\n        for (uint256 i = 0; i < charCount; i++) {\\n            bytesStringTrimmed[i] = b[i + 64];\\n        }\\n\\n        return string(bytesStringTrimmed);\\n    }\\n\\n    // uses a heuristic to produce a token name from the address\\n    // the heuristic returns the full hex of the address string in upper case\\n    function addressToName(address token) private pure returns (string memory) {\\n        return AddressStringUtil.toAsciiString(token, 40);\\n    }\\n\\n    // uses a heuristic to produce a token symbol from the address\\n    // the heuristic returns the first 6 hex of the address string in upper case\\n    function addressToSymbol(address token) private pure returns (string memory) {\\n        return AddressStringUtil.toAsciiString(token, 6);\\n    }\\n\\n    // calls an external view token contract method that returns a symbol or name, and parses the output into a string\\n    function callAndParseStringReturn(address token, bytes4 selector) private view returns (string memory) {\\n        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSelector(selector));\\n        // if not implemented, or returns empty data, return empty string\\n        if (!success || data.length == 0) {\\n            return \\\"\\\";\\n        }\\n        // bytes32 data always has length 32\\n        if (data.length == 32) {\\n            bytes32 decoded = abi.decode(data, (bytes32));\\n            return bytes32ToString(decoded);\\n        } else if (data.length > 64) {\\n            return abi.decode(data, (string));\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    // attempts to extract the token symbol. if it does not implement symbol, returns a symbol derived from the address\\n    function tokenSymbol(address token) public view returns (string memory) {\\n        string memory symbol = callAndParseStringReturn(token, IERC20Metadata.symbol.selector);\\n        if (bytes(symbol).length == 0) {\\n            // fallback to 6 uppercase hex of address\\n            return addressToSymbol(token);\\n        }\\n        return symbol;\\n    }\\n\\n    // attempts to extract the token name. if it does not implement name, returns a name derived from the address\\n    function tokenName(address token) public view returns (string memory) {\\n        string memory name = callAndParseStringReturn(token, IERC20Metadata.name.selector);\\n        if (bytes(name).length == 0) {\\n            // fallback to full hex of address\\n            return addressToName(token);\\n        }\\n        return name;\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function tokenDecimals(address token) public view returns (uint8) {\\n        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSelector(IERC20Metadata.decimals.selector));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n}\\n\",\"keccak256\":\"0x0d959127c2fee86d0862e5dc66a5cf1efd2e10212fef293a5fbab98716e84819\",\"license\":\"MIT\"},\"@yield-protocol/utils-v2/contracts/utils/AddressStringUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nlibrary AddressStringUtil {\\n    // converts an address to the uppercase hex string, extracting only len bytes (up to 20, multiple of 2)\\n    function toAsciiString(address addr, uint256 len) internal pure returns (string memory) {\\n        require(len % 2 == 0 && len > 0 && len <= 40, \\\"AddressStringUtil: INVALID_LEN\\\");\\n        bytes memory s = new bytes(len);\\n        uint256 addrNum = uint256(uint160(addr));\\n        for (uint256 ii = 0; ii < len ; ii +=2) {\\n            uint8 b = uint8(addrNum >> (4 * (38 - ii)));\\n            s[ii] = char(b >> 4);\\n            s[ii + 1] = char(b & 0x0f);\\n        }\\n        return string(s);\\n    }\\n\\n    // hi and lo are only 4 bits and between 0 and 16\\n    // this method converts those values to the unicode/ascii code point for the hex representation\\n    // uses upper case for the characters\\n    function char(uint8 b) private pure returns (bytes1 c) {\\n        if (b < 10) {\\n            return bytes1(b + 0x30);\\n        } else {\\n            return bytes1(b + 0x37);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1e0ae75abf8b5c375390e07510fc27a052b0187d1198a93fbf61f2d7737a1b5c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6108df61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c8063033b9b4f146100505780638ee573ac14610079578063e54f75221461009e575b600080fd5b61006361005e366004610627565b6100b1565b6040516100709190610754565b60405180910390f35b61008c610087366004610627565b6100e8565b60405160ff9091168152602001610070565b6100636100ac366004610627565b6101a8565b606060006100c6836395d89b4160e01b6101d2565b90508051600014156100e2576100db836102ff565b9392505050565b92915050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b1790529051600091829182916001600160a01b0386169161012e9190610738565b600060405180830381855afa9150503d8060008114610169576040519150601f19603f3d011682016040523d82523d6000602084013e61016e565b606091505b5091509150818015610181575080516020145b61018c5760126101a0565b808060200190518101906101a09190610715565b949350505050565b606060006101bd836306fdde0360e01b6101d2565b90508051600014156100e2576100db8361030c565b60408051600481526024810182526020810180516001600160e01b03166001600160e01b03198516179052905160609160009182916001600160a01b0387169161021c9190610738565b600060405180830381855afa9150503d8060008114610257576040519150601f19603f3d011682016040523d82523d6000602084013e61025c565b606091505b509150915081158061026d57508051155b1561028b5760405180602001604052806000815250925050506100e2565b8051602014156102c0576000818060200190518101906102ab9190610650565b90506102b681610319565b93505050506100e2565b6040815111156102e757808060200190518101906102de9190610669565b925050506100e2565b50506040805160208101909152600081529392505050565b60606100e2826006610474565b60606100e2826028610474565b604080516020808252818301909252606091600091906020820181803683370190505090506000805b60208110156103c057600085826020811061035f5761035f61087d565b1a60f81b90506001600160f81b03198116156103ad57808484815181106103885761038861087d565b60200101906001600160f81b031916908160001a905350826103a98161082a565b9350505b50806103b88161082a565b915050610342565b506000816001600160401b038111156103db576103db610893565b6040519080825280601f01601f191660200182016040528015610405576020820181803683370190505b50905060005b8281101561046b578381815181106104255761042561087d565b602001015160f81c60f81b8282815181106104425761044261087d565b60200101906001600160f81b031916908160001a905350806104638161082a565b91505061040b565b50949350505050565b6060610481600283610845565b15801561048e5750600082115b801561049b575060288211155b6104eb5760405162461bcd60e51b815260206004820152601e60248201527f41646472657373537472696e675574696c3a20494e56414c49445f4c454e0000604482015260640160405180910390fd5b6000826001600160401b0381111561050557610505610893565b6040519080825280601f01601f19166020018201604052801561052f576020820181803683370190505b5090506001600160a01b03841660005b848110156105f05760006105548260266107e3565b61055f9060046107c4565b83901c905061057460048260ff16901c6105fa565b8483815181106105865761058661087d565b60200101906001600160f81b031916908160001a9053506105a981600f166105fa565b846105b5846001610787565b815181106105c5576105c561087d565b60200101906001600160f81b031916908160001a9053506105e99050600282610787565b905061053f565b5090949350505050565b6000600a8260ff16101561061c5761061382603061079f565b60f81b92915050565b61061382603761079f565b60006020828403121561063957600080fd5b81356001600160a01b03811681146100db57600080fd5b60006020828403121561066257600080fd5b5051919050565b60006020828403121561067b57600080fd5b81516001600160401b038082111561069257600080fd5b818401915084601f8301126106a657600080fd5b8151818111156106b8576106b8610893565b604051601f8201601f19908116603f011681019083821181831017156106e0576106e0610893565b816040528281528760208487010111156106f957600080fd5b61070a8360208301602088016107fa565b979650505050505050565b60006020828403121561072757600080fd5b815160ff811681146100db57600080fd5b6000825161074a8184602087016107fa565b9190910192915050565b60208152600082518060208401526107738160408501602087016107fa565b601f01601f19169190910160400192915050565b6000821982111561079a5761079a610867565b500190565b600060ff821660ff84168060ff038211156107bc576107bc610867565b019392505050565b60008160001904831182151516156107de576107de610867565b500290565b6000828210156107f5576107f5610867565b500390565b60005b838110156108155781810151838201526020016107fd565b83811115610824576000848401525b50505050565b600060001982141561083e5761083e610867565b5060010190565b60008261086257634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212203653fbb70a2c1ae9d4b5de53988acb8fc61fab75e0236b2552e20838e9e6da3364736f6c63430008060033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c8063033b9b4f146100505780638ee573ac14610079578063e54f75221461009e575b600080fd5b61006361005e366004610627565b6100b1565b6040516100709190610754565b60405180910390f35b61008c610087366004610627565b6100e8565b60405160ff9091168152602001610070565b6100636100ac366004610627565b6101a8565b606060006100c6836395d89b4160e01b6101d2565b90508051600014156100e2576100db836102ff565b9392505050565b92915050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b1790529051600091829182916001600160a01b0386169161012e9190610738565b600060405180830381855afa9150503d8060008114610169576040519150601f19603f3d011682016040523d82523d6000602084013e61016e565b606091505b5091509150818015610181575080516020145b61018c5760126101a0565b808060200190518101906101a09190610715565b949350505050565b606060006101bd836306fdde0360e01b6101d2565b90508051600014156100e2576100db8361030c565b60408051600481526024810182526020810180516001600160e01b03166001600160e01b03198516179052905160609160009182916001600160a01b0387169161021c9190610738565b600060405180830381855afa9150503d8060008114610257576040519150601f19603f3d011682016040523d82523d6000602084013e61025c565b606091505b509150915081158061026d57508051155b1561028b5760405180602001604052806000815250925050506100e2565b8051602014156102c0576000818060200190518101906102ab9190610650565b90506102b681610319565b93505050506100e2565b6040815111156102e757808060200190518101906102de9190610669565b925050506100e2565b50506040805160208101909152600081529392505050565b60606100e2826006610474565b60606100e2826028610474565b604080516020808252818301909252606091600091906020820181803683370190505090506000805b60208110156103c057600085826020811061035f5761035f61087d565b1a60f81b90506001600160f81b03198116156103ad57808484815181106103885761038861087d565b60200101906001600160f81b031916908160001a905350826103a98161082a565b9350505b50806103b88161082a565b915050610342565b506000816001600160401b038111156103db576103db610893565b6040519080825280601f01601f191660200182016040528015610405576020820181803683370190505b50905060005b8281101561046b578381815181106104255761042561087d565b602001015160f81c60f81b8282815181106104425761044261087d565b60200101906001600160f81b031916908160001a905350806104638161082a565b91505061040b565b50949350505050565b6060610481600283610845565b15801561048e5750600082115b801561049b575060288211155b6104eb5760405162461bcd60e51b815260206004820152601e60248201527f41646472657373537472696e675574696c3a20494e56414c49445f4c454e0000604482015260640160405180910390fd5b6000826001600160401b0381111561050557610505610893565b6040519080825280601f01601f19166020018201604052801561052f576020820181803683370190505b5090506001600160a01b03841660005b848110156105f05760006105548260266107e3565b61055f9060046107c4565b83901c905061057460048260ff16901c6105fa565b8483815181106105865761058661087d565b60200101906001600160f81b031916908160001a9053506105a981600f166105fa565b846105b5846001610787565b815181106105c5576105c561087d565b60200101906001600160f81b031916908160001a9053506105e99050600282610787565b905061053f565b5090949350505050565b6000600a8260ff16101561061c5761061382603061079f565b60f81b92915050565b61061382603761079f565b60006020828403121561063957600080fd5b81356001600160a01b03811681146100db57600080fd5b60006020828403121561066257600080fd5b5051919050565b60006020828403121561067b57600080fd5b81516001600160401b038082111561069257600080fd5b818401915084601f8301126106a657600080fd5b8151818111156106b8576106b8610893565b604051601f8201601f19908116603f011681019083821181831017156106e0576106e0610893565b816040528281528760208487010111156106f957600080fd5b61070a8360208301602088016107fa565b979650505050505050565b60006020828403121561072757600080fd5b815160ff811681146100db57600080fd5b6000825161074a8184602087016107fa565b9190910192915050565b60208152600082518060208401526107738160408501602087016107fa565b601f01601f19169190910160400192915050565b6000821982111561079a5761079a610867565b500190565b600060ff821660ff84168060ff038211156107bc576107bc610867565b019392505050565b60008160001904831182151516156107de576107de610867565b500290565b6000828210156107f5576107f5610867565b500390565b60005b838110156108155781810151838201526020016107fd565b83811115610824576000848401525b50505050565b600060001982141561083e5761083e610867565b5060010190565b60008261086257634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212203653fbb70a2c1ae9d4b5de53988acb8fc61fab75e0236b2552e20838e9e6da3364736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "tokenDecimals(address)": {
        "params": {
          "token": "The address of the ERC-20 token contract."
        },
        "returns": {
          "_0": "(uint8) Token decimals."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "tokenDecimals(address)": {
        "notice": "Provides a safe ERC20.decimals version which returns '18' as fallback value."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}