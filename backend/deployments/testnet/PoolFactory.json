{
  "address": "0x2e711Ffa441C07B9a9E44f1287D273Cd97a87325",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "parameter",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "int128",
          "name": "value",
          "type": "int128"
        }
      ],
      "name": "ParameterSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "base",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fyToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "role",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "newAdminRole",
          "type": "bytes4"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "role",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "role",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LOCK",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOCK8605463013",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_BYTECODE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT4146650865",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "base",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fyToken",
          "type": "address"
        }
      ],
      "name": "calculatePoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "base",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fyToken",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "g1",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "g2",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "base",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fyToken",
          "type": "address"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "role",
          "type": "bytes4"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "role",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4[]",
          "name": "roles",
          "type": "bytes4[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRoles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "role",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "role",
          "type": "bytes4"
        }
      ],
      "name": "lockRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextBase",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextFYToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "role",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "role",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4[]",
          "name": "roles",
          "type": "bytes4[]"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRoles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "parameter",
          "type": "bytes32"
        },
        {
          "internalType": "int128",
          "name": "value",
          "type": "int128"
        }
      ],
      "name": "setParameter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "role",
          "type": "bytes4"
        },
        {
          "internalType": "bytes4",
          "name": "adminRole",
          "type": "bytes4"
        }
      ],
      "name": "setRoleAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ts",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x09259534e4f43c3aeb7f9d6a366d230a191b7c13e2198a57013993bdef2356b8",
  "receipt": {
    "to": null,
    "from": "0x0B16E3ea120Aeb1DeEbE2Fd8476c6aee8d4F3964",
    "contractAddress": "0x2e711Ffa441C07B9a9E44f1287D273Cd97a87325",
    "transactionIndex": 0,
    "gasUsed": "4739317",
    "logsBloom": "0x000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000100800000000000000000000002000000000800000010000000000000000000000000000000000000000200000000000000000008000c0080000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000800000000000000000000000200000000400000000000000000000000000000200000000000000040000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xf19d51e92f523afafd6cf214f737bb809d7d30a733a6a66edddc5845fdc8b007",
    "transactionHash": "0x09259534e4f43c3aeb7f9d6a366d230a191b7c13e2198a57013993bdef2356b8",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14846820,
        "transactionHash": "0x09259534e4f43c3aeb7f9d6a366d230a191b7c13e2198a57013993bdef2356b8",
        "address": "0x2e711Ffa441C07B9a9E44f1287D273Cd97a87325",
        "topics": [
          "0xe6231789d19137da31d0550f4ba9ee379020a8cfb64cb79bf1790c996d2e6165",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000b16e3ea120aeb1deebe2fd8476c6aee8d4f3964",
          "0x0000000000000000000000000b16e3ea120aeb1deebe2fd8476c6aee8d4f3964"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf19d51e92f523afafd6cf214f737bb809d7d30a733a6a66edddc5845fdc8b007"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14846820,
        "transactionHash": "0x09259534e4f43c3aeb7f9d6a366d230a191b7c13e2198a57013993bdef2356b8",
        "address": "0x2e711Ffa441C07B9a9E44f1287D273Cd97a87325",
        "topics": [
          "0xd348e2220a50b4500ec353f6e802d2f14dd1b5d6786148fd1bbcc570bf92d473",
          "0xffffffff00000000000000000000000000000000000000000000000000000000",
          "0xffffffff00000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xf19d51e92f523afafd6cf214f737bb809d7d30a733a6a66edddc5845fdc8b007"
      }
    ],
    "blockNumber": 14846820,
    "cumulativeGasUsed": "4739317",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "33ce1b88dd6eab84b0d7ae38c48ff578",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"value\",\"type\":\"int128\"}],\"name\":\"ParameterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"newAdminRole\",\"type\":\"bytes4\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LOCK\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCK8605463013\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_BYTECODE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT4146650865\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fyToken\",\"type\":\"address\"}],\"name\":\"calculatePoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fyToken\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"g1\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"g2\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fyToken\",\"type\":\"address\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"roles\",\"type\":\"bytes4[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"}],\"name\":\"lockRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextBase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextFYToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"roles\",\"type\":\"bytes4[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"int128\",\"name\":\"value\",\"type\":\"int128\"}],\"name\":\"setParameter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"adminRole\",\"type\":\"bytes4\"}],\"name\":\"setRoleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ts\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The PoolFactory can deterministically create new pool instances.\",\"kind\":\"dev\",\"methods\":{\"calculatePoolAddress(address,address)\":{\"details\":\"Calculate the deterministic addreess of a pool, based on the base token & fy token.\",\"params\":{\"base\":\"Address of the base token (such as Base).\",\"fyToken\":\"Address of the fixed yield token (such as fyToken).\"},\"returns\":{\"_0\":\"The calculated pool address.\"}},\"createPool(address,address)\":{\"details\":\"Deploys a new pool. base & fyToken are written to temporary storage slots to allow for simpler address calculation, while still allowing the Pool contract to store the values as immutable.\",\"params\":{\"base\":\"Address of the base token (such as Base).\",\"fyToken\":\"Address of the fixed yield token (such as fyToken).\"},\"returns\":{\"_0\":\"pool The pool address.\"}},\"getPool(address,address)\":{\"details\":\"Calculate the addreess of a pool, and return address(0) if not deployed.\",\"params\":{\"base\":\"Address of the base token (such as Base).\",\"fyToken\":\"Address of the fixed yield token (such as fyToken).\"},\"returns\":{\"pool\":\"The deployed pool address.\"}},\"getRoleAdmin(bytes4)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes4,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"grantRoles(bytes4[],address)\":{\"details\":\"Grants all of `role` in `roles` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - For each `role` in `roles`, the caller must have ``role``'s admin role.\"},\"hasRole(bytes4,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"lockRole(bytes4)\":{\"details\":\"Sets LOCK as ``role``'s admin role. LOCK has no members, so this disables admin management of ``role``. Emits a {RoleAdminChanged} event. Requirements: - the caller must have ``role``'s admin role.\"},\"renounceRole(bytes4,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes4,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"revokeRoles(bytes4[],address)\":{\"details\":\"Revokes all of `role` in `roles` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - For each `role` in `roles`, the caller must have ``role``'s admin role.\"},\"setParameter(bytes32,int128)\":{\"details\":\"Set the ts, g1 or g2 parameters\"},\"setRoleAdmin(bytes4,bytes4)\":{\"details\":\"Sets `adminRole` as ``role``'s admin role. If ``role``'s admin role is not `adminRole` emits a {RoleAdminChanged} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"POOL_BYTECODE_HASH()\":{\"notice\":\"Pre-hashing the bytecode allows calculatePoolAddress to be cheaper, and makes client-side address calculation easier\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/space/PoolFactory.sol\":\"PoolFactory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@yield-protocol/utils-v2/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes4` identifier. These are expected to be the \\n * signatures for all the functions in the contract. Special roles should be exposed\\n * in the external API and be unique:\\n *\\n * ```\\n * bytes4 public constant ROOT = 0x00000000;\\n * ```\\n *\\n * Roles represent restricted access to a function call. For that purpose, use {auth}:\\n *\\n * ```\\n * function foo() public auth {\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `ROOT`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {setRoleAdmin}.\\n *\\n * WARNING: The `ROOT` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\ncontract AccessControl {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes4 adminRole;\\n    }\\n\\n    mapping (bytes4 => RoleData) private _roles;\\n\\n    bytes4 public constant ROOT = 0x00000000;\\n    bytes4 public constant ROOT4146650865 = 0x00000000; // Collision protection for ROOT, test with ROOT12007226833()\\n    bytes4 public constant LOCK = 0xFFFFFFFF;           // Used to disable further permissioning of a function\\n    bytes4 public constant LOCK8605463013 = 0xFFFFFFFF; // Collision protection for LOCK, test with LOCK10462387368()\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role\\n     *\\n     * `ROOT` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes4 indexed role, bytes4 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call.\\n     */\\n    event RoleGranted(bytes4 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes4 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Give msg.sender the ROOT role and create a LOCK role with itself as the admin role and no members. \\n     * Calling setRoleAdmin(msg.sig, LOCK) means no one can grant that msg.sig role anymore.\\n     */\\n    constructor () {\\n        _grantRole(ROOT, msg.sender);   // Grant ROOT to msg.sender\\n        _setRoleAdmin(LOCK, LOCK);      // Create the LOCK role by setting itself as its own admin, creating an independent role tree\\n    }\\n\\n    /**\\n     * @dev Each function in the contract has its own role, identified by their msg.sig signature.\\n     * ROOT can give and remove access to each function, lock any further access being granted to\\n     * a specific action, or even create other roles to delegate admin control over a function.\\n     */\\n    modifier auth() {\\n        require (_hasRole(msg.sig, msg.sender), \\\"Access denied\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allow only if the caller has been granted the admin role of `role`.\\n     */\\n    modifier admin(bytes4 role) {\\n        require (_hasRole(_getRoleAdmin(role), msg.sender), \\\"Only admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes4 role, address account) external view returns (bool) {\\n        return _hasRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes4 role) external view returns (bytes4) {\\n        return _getRoleAdmin(role);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n\\n     * If ``role``'s admin role is not `adminRole` emits a {RoleAdminChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function setRoleAdmin(bytes4 role, bytes4 adminRole) external virtual admin(role) {\\n        _setRoleAdmin(role, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes4 role, address account) external virtual admin(role) {\\n        _grantRole(role, account);\\n    }\\n\\n    \\n    /**\\n     * @dev Grants all of `role` in `roles` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - For each `role` in `roles`, the caller must have ``role``'s admin role.\\n     */\\n    function grantRoles(bytes4[] memory roles, address account) external virtual {\\n        for (uint256 i = 0; i < roles.length; i++) {\\n            require (_hasRole(_getRoleAdmin(roles[i]), msg.sender), \\\"Only admin\\\");\\n            _grantRole(roles[i], account);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets LOCK as ``role``'s admin role. LOCK has no members, so this disables admin management of ``role``.\\n\\n     * Emits a {RoleAdminChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function lockRole(bytes4 role) external virtual admin(role) {\\n        _setRoleAdmin(role, LOCK);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes4 role, address account) external virtual admin(role) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes all of `role` in `roles` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - For each `role` in `roles`, the caller must have ``role``'s admin role.\\n     */\\n    function revokeRoles(bytes4[] memory roles, address account) external virtual {\\n        for (uint256 i = 0; i < roles.length; i++) {\\n            require (_hasRole(_getRoleAdmin(roles[i]), msg.sender), \\\"Only admin\\\");\\n            _revokeRole(roles[i], account);\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes4 role, address account) external virtual {\\n        require(account == msg.sender, \\\"Renounce only for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    function _hasRole(bytes4 role, address account) internal view returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    function _getRoleAdmin(bytes4 role) internal view returns (bytes4) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    function _setRoleAdmin(bytes4 role, bytes4 adminRole) internal virtual {\\n        if (_getRoleAdmin(role) != adminRole) {\\n            _roles[role].adminRole = adminRole;\\n            emit RoleAdminChanged(role, adminRole);\\n        }\\n    }\\n\\n    function _grantRole(bytes4 role, address account) internal {\\n        if (!_hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    function _revokeRole(bytes4 role, address account) internal {\\n        if (_hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n}\",\"keccak256\":\"0x435855fa29ef8e1d5d74ba538947dc47e264f20abb35a2686658dfcadb3ce630\",\"license\":\"MIT\"},\"@yield-protocol/utils-v2/contracts/cast/CastU128I128.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n\\nlibrary CastU128I128 {\\n    /// @dev Safely cast an uint128 to an int128\\n    function i128(uint128 x) internal pure returns (int128 y) {\\n        require (x <= uint128(type(int128).max), \\\"Cast overflow\\\");\\n        y = int128(x);\\n    }\\n}\",\"keccak256\":\"0x977db849cc99cb1beabea9bcbfd271c83e31517c57aed95f6afdf0edd36c3413\",\"license\":\"BUSL-1.1\"},\"@yield-protocol/utils-v2/contracts/cast/CastU128U112.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n\\nlibrary CastU128U112 {\\n    /// @dev Safely cast an uint128 to an uint112\\n    function u112(uint128 x) internal pure returns (uint112 y) {\\n        require (x <= uint128(type(uint112).max), \\\"Cast overflow\\\");\\n        y = uint112(x);\\n    }\\n}\",\"keccak256\":\"0x977c7075c21a433c8933e2683735e263d7fd299a203776afa2662d517500c3eb\",\"license\":\"BUSL-1.1\"},\"@yield-protocol/utils-v2/contracts/cast/CastU256I256.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n\\nlibrary CastU256I256 {\\n    /// @dev Safely cast an uint256 to an int256\\n    function i256(uint256 x) internal pure returns (int256 y) {\\n        require (x <= uint256(type(int256).max), \\\"Cast overflow\\\");\\n        y = int256(x);\\n    }\\n}\",\"keccak256\":\"0x6721a2ab77e8c2bf7aa07df0051c8c2a6708adf17180be9ffffb99a95dcbbdb5\",\"license\":\"BUSL-1.1\"},\"@yield-protocol/utils-v2/contracts/cast/CastU256U112.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n\\nlibrary CastU256U112 {\\n    /// @dev Safely cast an uint256 to an uint112\\n    function u112(uint256 x) internal pure returns (uint112 y) {\\n        require (x <= type(uint112).max, \\\"Cast overflow\\\");\\n        y = uint112(x);\\n    }\\n}\",\"keccak256\":\"0x32027cec2ae37de898973f9902acb3e30d7c8417a9ad16bcbb73d7204c3f6aeb\",\"license\":\"BUSL-1.1\"},\"@yield-protocol/utils-v2/contracts/cast/CastU256U128.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n\\nlibrary CastU256U128 {\\n    /// @dev Safely cast an uint256 to an uint128\\n    function u128(uint256 x) internal pure returns (uint128 y) {\\n        require (x <= type(uint128).max, \\\"Cast overflow\\\");\\n        y = uint128(x);\\n    }\\n}\",\"keccak256\":\"0x97bfabb12f64e6e710ddf6baa55b2ba05136dbac1d50e59e805d48d3bcae8e50\",\"license\":\"BUSL-1.1\"},\"@yield-protocol/utils-v2/contracts/token/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Inspired on token.sol from DappHub. Natspec adpated from OpenZeppelin.\\n\\npragma solidity ^0.8.0;\\nimport \\\"./IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n * \\n * Calls to {transferFrom} do not check for allowance if the caller is the owner\\n * of the funds. This allows to reduce the number of approvals that are necessary.\\n *\\n * Finally, {transferFrom} does not decrease the allowance if it is set to\\n * type(uint256).max. This reduces the gas costs without any likely impact.\\n */\\ncontract ERC20 is IERC20Metadata {\\n    uint256                                           internal  _totalSupply;\\n    mapping (address => uint256)                      internal  _balanceOf;\\n    mapping (address => mapping (address => uint256)) internal  _allowance;\\n    string                                            public override name = \\\"???\\\";\\n    string                                            public override symbol = \\\"???\\\";\\n    uint8                                             public override decimals = 18;\\n\\n    /**\\n     *  @dev Sets the values for {name}, {symbol} and {decimals}.\\n     */\\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() external view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address guy) external view virtual override returns (uint256) {\\n        return _balanceOf[guy];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) external view virtual override returns (uint256) {\\n        return _allowance[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     */\\n    function approve(address spender, uint wad) external virtual override returns (bool) {\\n        return _setAllowance(msg.sender, spender, wad);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have a balance of at least `wad`.\\n     */\\n    function transfer(address dst, uint wad) external virtual override returns (bool) {\\n        return _transfer(msg.sender, dst, wad);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `src` must have a balance of at least `wad`.\\n     * - the caller is not `src`, it must have allowance for ``src``'s tokens of at least\\n     * `wad`.\\n     */\\n    /// if_succeeds {:msg \\\"TransferFrom - decrease allowance\\\"} msg.sender != src ==> old(_allowance[src][msg.sender]) >= wad;\\n    function transferFrom(address src, address dst, uint wad) external virtual override returns (bool) {\\n        _decreaseAllowance(src, wad);\\n\\n        return _transfer(src, dst, wad);\\n    }\\n\\n    /**\\n     * @dev Moves tokens `wad` from `src` to `dst`.\\n     * \\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `src` must have a balance of at least `amount`.\\n     */\\n    /// if_succeeds {:msg \\\"Transfer - src decrease\\\"} old(_balanceOf[src]) >= _balanceOf[src];\\n    /// if_succeeds {:msg \\\"Transfer - dst increase\\\"} _balanceOf[dst] >= old(_balanceOf[dst]);\\n    /// if_succeeds {:msg \\\"Transfer - supply\\\"} old(_balanceOf[src]) + old(_balanceOf[dst]) == _balanceOf[src] + _balanceOf[dst];\\n    function _transfer(address src, address dst, uint wad) internal virtual returns (bool) {\\n        require(_balanceOf[src] >= wad, \\\"ERC20: Insufficient balance\\\");\\n        unchecked { _balanceOf[src] = _balanceOf[src] - wad; }\\n        _balanceOf[dst] = _balanceOf[dst] + wad;\\n\\n        emit Transfer(src, dst, wad);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Sets the allowance granted to `spender` by `owner`.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     */\\n    function _setAllowance(address owner, address spender, uint wad) internal virtual returns (bool) {\\n        _allowance[owner][spender] = wad;\\n        emit Approval(owner, spender, wad);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decreases the allowance granted to the caller by `src`, unless src == msg.sender or _allowance[src][msg.sender] == MAX\\n     *\\n     * Emits an {Approval} event indicating the updated allowance, if the allowance is updated.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` must have allowance for the caller of at least\\n     * `wad`, unless src == msg.sender\\n     */\\n    /// if_succeeds {:msg \\\"Decrease allowance - underflow\\\"} old(_allowance[src][msg.sender]) <= _allowance[src][msg.sender];\\n    function _decreaseAllowance(address src, uint wad) internal virtual returns (bool) {\\n        if (src != msg.sender) {\\n            uint256 allowed = _allowance[src][msg.sender];\\n            if (allowed != type(uint).max) {\\n                require(allowed >= wad, \\\"ERC20: Insufficient approval\\\");\\n                unchecked { _setAllowance(src, msg.sender, allowed - wad); }\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /** @dev Creates `wad` tokens and assigns them to `dst`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     */\\n    /// if_succeeds {:msg \\\"Mint - balance overflow\\\"} old(_balanceOf[dst]) >= _balanceOf[dst];\\n    /// if_succeeds {:msg \\\"Mint - supply overflow\\\"} old(_totalSupply) >= _totalSupply;\\n    function _mint(address dst, uint wad) internal virtual returns (bool) {\\n        _balanceOf[dst] = _balanceOf[dst] + wad;\\n        _totalSupply = _totalSupply + wad;\\n        emit Transfer(address(0), dst, wad);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Destroys `wad` tokens from `src`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `src` must have at least `wad` tokens.\\n     */\\n    /// if_succeeds {:msg \\\"Burn - balance underflow\\\"} old(_balanceOf[src]) <= _balanceOf[src];\\n    /// if_succeeds {:msg \\\"Burn - supply underflow\\\"} old(_totalSupply) <= _totalSupply;\\n    function _burn(address src, uint wad) internal virtual returns (bool) {\\n        unchecked {\\n            require(_balanceOf[src] >= wad, \\\"ERC20: Insufficient balance\\\");\\n            _balanceOf[src] = _balanceOf[src] - wad;\\n            _totalSupply = _totalSupply - wad;\\n            emit Transfer(src, address(0), wad);\\n        }\\n\\n        return true;\\n    }\\n}\",\"keccak256\":\"0xd40ed206662a08713f426bd42a5429f14f75ded2d9e53460648244af090a6f50\",\"license\":\"MIT\"},\"@yield-protocol/utils-v2/contracts/token/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/53516bc555a454862470e7860a9b5254db4d00f5/contracts/token/ERC20/ERC20Permit.sol\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./IERC2612.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to use their tokens\\n * without sending any transactions by setting {IERC20-allowance} with a\\n * signature using the {permit} method, and then spend them via\\n * {IERC20-transferFrom}.\\n *\\n * The {permit} signature mechanism conforms to the {IERC2612} interface.\\n */\\nabstract contract ERC20Permit is ERC20, IERC2612 {\\n    mapping (address => uint256) public override nonces;\\n\\n    bytes32 public immutable PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    uint256 public immutable deploymentChainId;\\n\\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) ERC20(name_, symbol_, decimals_) {\\n        deploymentChainId = block.chainid;\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(block.chainid);\\n    }\\n\\n    /// @dev Calculate the DOMAIN_SEPARATOR.\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version())),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /// @dev Return the DOMAIN_SEPARATOR.\\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\\n        return block.chainid == deploymentChainId ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(block.chainid);\\n    }\\n\\n    /// @dev Setting the version as a function so that it can be overriden\\n    function version() public pure virtual returns(string memory) { return \\\"1\\\"; }\\n\\n    /**\\n     * @dev See {IERC2612-permit}.\\n     *\\n     * In cases where the free option is not a concern, deadline can simply be\\n     * set to uint(-1), so it should be seen as an optional parameter\\n     */\\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external virtual override {\\n        require(deadline >= block.timestamp, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 hashStruct = keccak256(\\n            abi.encode(\\n                PERMIT_TYPEHASH,\\n                owner,\\n                spender,\\n                amount,\\n                nonces[owner]++,\\n                deadline\\n            )\\n        );\\n\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                block.chainid == deploymentChainId ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(block.chainid),\\n                hashStruct\\n            )\\n        );\\n\\n        address signer = ecrecover(hash, v, r, s);\\n        require(\\n            signer != address(0) && signer == owner,\\n            \\\"ERC20Permit: invalid signature\\\"\\n        );\\n\\n        _setAllowance(owner, spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x4f900650d8f7f6982cb27ec9f568aca8285dc7005a1615d0f155446829d1212a\",\"license\":\"MIT\"},\"@yield-protocol/utils-v2/contracts/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xa38ec4e151e4d397d05bdfb94e6e4eb91e57a9fca3bc1c655289a4adf31a58fa\",\"license\":\"MIT\"},\"@yield-protocol/utils-v2/contracts/token/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Taken from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/IERC20Metadata.sol\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0xb7e893a07c660edd1c4423225c92c73d45c46bc9944677654f5d8a1f42f60b59\",\"license\":\"MIT\"},\"@yield-protocol/utils-v2/contracts/token/IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold Ether.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\n */\\ninterface IERC2612 {\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd0a25451e9f0a3baa2a7b722485da2d99433821302158cdfb02ba1eff0d332e5\",\"license\":\"MIT\"},\"@yield-protocol/utils-v2/contracts/token/MinimalTransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Taken from https://github.com/Uniswap/uniswap-lib/blob/master/contracts/libraries/TransferHelper.sol\\n\\npragma solidity >=0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../utils/RevertMsgExtractor.sol\\\";\\n\\n\\n// helper methods for transferring ERC20 tokens that do not consistently return true/false\\nlibrary MinimalTransferHelper {\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with the underlying revert message if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        if (!(success && (data.length == 0 || abi.decode(data, (bool))))) revert(RevertMsgExtractor.getRevertMsg(data));\\n    }\\n}\",\"keccak256\":\"0x4675890eb033c1acc476bc27e2c67d4dd082213b26ce325fda5e1dfb53c13810\",\"license\":\"MIT\"},\"@yield-protocol/utils-v2/contracts/token/SafeERC20Namer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../token/IERC20Metadata.sol\\\";\\nimport \\\"../utils/AddressStringUtil.sol\\\";\\n\\n// produces token descriptors from inconsistent or absent ERC20 symbol implementations that can return string or bytes32\\n// this library will always produce a string symbol to represent the token\\nlibrary SafeERC20Namer {\\n    function bytes32ToString(bytes32 x) private pure returns (string memory) {\\n        bytes memory bytesString = new bytes(32);\\n        uint256 charCount = 0;\\n        for (uint256 j = 0; j < 32; j++) {\\n            bytes1 char = x[j];\\n            if (char != 0) {\\n                bytesString[charCount] = char;\\n                charCount++;\\n            }\\n        }\\n        bytes memory bytesStringTrimmed = new bytes(charCount);\\n        for (uint256 j = 0; j < charCount; j++) {\\n            bytesStringTrimmed[j] = bytesString[j];\\n        }\\n        return string(bytesStringTrimmed);\\n    }\\n\\n    // assumes the data is in position 2\\n    function parseStringData(bytes memory b) private pure returns (string memory) {\\n        uint256 charCount = 0;\\n        // first parse the charCount out of the data\\n        for (uint256 i = 32; i < 64; i++) {\\n            charCount <<= 8;\\n            charCount += uint8(b[i]);\\n        }\\n\\n        bytes memory bytesStringTrimmed = new bytes(charCount);\\n        for (uint256 i = 0; i < charCount; i++) {\\n            bytesStringTrimmed[i] = b[i + 64];\\n        }\\n\\n        return string(bytesStringTrimmed);\\n    }\\n\\n    // uses a heuristic to produce a token name from the address\\n    // the heuristic returns the full hex of the address string in upper case\\n    function addressToName(address token) private pure returns (string memory) {\\n        return AddressStringUtil.toAsciiString(token, 40);\\n    }\\n\\n    // uses a heuristic to produce a token symbol from the address\\n    // the heuristic returns the first 6 hex of the address string in upper case\\n    function addressToSymbol(address token) private pure returns (string memory) {\\n        return AddressStringUtil.toAsciiString(token, 6);\\n    }\\n\\n    // calls an external view token contract method that returns a symbol or name, and parses the output into a string\\n    function callAndParseStringReturn(address token, bytes4 selector) private view returns (string memory) {\\n        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSelector(selector));\\n        // if not implemented, or returns empty data, return empty string\\n        if (!success || data.length == 0) {\\n            return \\\"\\\";\\n        }\\n        // bytes32 data always has length 32\\n        if (data.length == 32) {\\n            bytes32 decoded = abi.decode(data, (bytes32));\\n            return bytes32ToString(decoded);\\n        } else if (data.length > 64) {\\n            return abi.decode(data, (string));\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    // attempts to extract the token symbol. if it does not implement symbol, returns a symbol derived from the address\\n    function tokenSymbol(address token) public view returns (string memory) {\\n        string memory symbol = callAndParseStringReturn(token, IERC20Metadata.symbol.selector);\\n        if (bytes(symbol).length == 0) {\\n            // fallback to 6 uppercase hex of address\\n            return addressToSymbol(token);\\n        }\\n        return symbol;\\n    }\\n\\n    // attempts to extract the token name. if it does not implement name, returns a name derived from the address\\n    function tokenName(address token) public view returns (string memory) {\\n        string memory name = callAndParseStringReturn(token, IERC20Metadata.name.selector);\\n        if (bytes(name).length == 0) {\\n            // fallback to full hex of address\\n            return addressToName(token);\\n        }\\n        return name;\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function tokenDecimals(address token) public view returns (uint8) {\\n        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSelector(IERC20Metadata.decimals.selector));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n}\\n\",\"keccak256\":\"0x0d959127c2fee86d0862e5dc66a5cf1efd2e10212fef293a5fbab98716e84819\",\"license\":\"MIT\"},\"@yield-protocol/utils-v2/contracts/utils/AddressStringUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nlibrary AddressStringUtil {\\n    // converts an address to the uppercase hex string, extracting only len bytes (up to 20, multiple of 2)\\n    function toAsciiString(address addr, uint256 len) internal pure returns (string memory) {\\n        require(len % 2 == 0 && len > 0 && len <= 40, \\\"AddressStringUtil: INVALID_LEN\\\");\\n        bytes memory s = new bytes(len);\\n        uint256 addrNum = uint256(uint160(addr));\\n        for (uint256 ii = 0; ii < len ; ii +=2) {\\n            uint8 b = uint8(addrNum >> (4 * (38 - ii)));\\n            s[ii] = char(b >> 4);\\n            s[ii + 1] = char(b & 0x0f);\\n        }\\n        return string(s);\\n    }\\n\\n    // hi and lo are only 4 bits and between 0 and 16\\n    // this method converts those values to the unicode/ascii code point for the hex representation\\n    // uses upper case for the characters\\n    function char(uint8 b) private pure returns (bytes1 c) {\\n        if (b < 10) {\\n            return bytes1(b + 0x30);\\n        } else {\\n            return bytes1(b + 0x37);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1e0ae75abf8b5c375390e07510fc27a052b0187d1198a93fbf61f2d7737a1b5c\",\"license\":\"MIT\"},\"@yield-protocol/utils-v2/contracts/utils/IsContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Taken from Address.sol from OpenZeppelin.\\npragma solidity ^0.8.0;\\n\\n\\nlibrary IsContract {\\n  /// @dev Returns true if `account` is a contract.\\n  function isContract(address account) internal view returns (bool) {\\n      // This method relies on extcodesize, which returns 0 for contracts in\\n      // construction, since the code is only stored at the end of the\\n      // constructor execution.\\n      return account.code.length > 0;\\n  }\\n}\\n\",\"keccak256\":\"0x3b296dbabbc00d1bc5d32daa5727ebf75c72b1dea69066ca471089e113089f63\",\"license\":\"MIT\"},\"@yield-protocol/utils-v2/contracts/utils/RevertMsgExtractor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Taken from https://github.com/sushiswap/BoringSolidity/blob/441e51c0544cf2451e6116fe00515e71d7c42e2c/contracts/BoringBatchable.sol\\n\\npragma solidity >=0.6.0;\\n\\n\\nlibrary RevertMsgExtractor {\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\n    function getRevertMsg(bytes memory returnData)\\n        internal pure\\n        returns (string memory)\\n    {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n\\n        assembly {\\n            // Slice the sighash.\\n            returnData := add(returnData, 0x04)\\n        }\\n        return abi.decode(returnData, (string)); // All that remains is the revert string\\n    }\\n}\",\"keccak256\":\"0x1ffc26637923ce8b2f31f5f73bd14ca7a936e427c7ba46637f8423a01b8894cf\",\"license\":\"MIT\"},\"@yield-protocol/vault-interfaces/IFYToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@yield-protocol/utils-v2/contracts/token/IERC20.sol\\\";\\n\\n\\ninterface IFYToken is IERC20 {\\n    /// @dev Asset that is returned on redemption.\\n    function underlying() external view returns (address);\\n\\n    /// @dev Unix time at which redemption of fyToken for underlying are possible\\n    function maturity() external view returns (uint256);\\n    \\n    /// @dev Record price data at maturity\\n    function mature() external;\\n\\n    /// @dev Mint fyToken providing an equal amount of underlying to the protocol\\n    function mintWithUnderlying(address to, uint256 amount) external;\\n\\n    /// @dev Burn fyToken after maturity for an amount of underlying.\\n    function redeem(address to, uint256 amount) external returns (uint256);\\n\\n    /// @dev Mint fyToken.\\n    /// This function can only be called by other Yield contracts, not users directly.\\n    /// @param to Wallet to mint the fyToken in.\\n    /// @param fyTokenAmount Amount of fyToken to mint.\\n    function mint(address to, uint256 fyTokenAmount) external;\\n\\n    /// @dev Burn fyToken.\\n    /// This function can only be called by other Yield contracts, not users directly.\\n    /// @param from Wallet to burn the fyToken from.\\n    /// @param fyTokenAmount Amount of fyToken to burn.\\n    function burn(address from, uint256 fyTokenAmount) external;\\n}\",\"keccak256\":\"0xee56062d708103ffb7eb965a0a3f1cb77df24effb9ec16e9d58de3eabe7b55d3\",\"license\":\"MIT\"},\"@yield-protocol/yieldspace-interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.8.0;\\nimport \\\"@yield-protocol/utils-v2/contracts/token/IERC20.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/token/IERC2612.sol\\\";\\nimport \\\"@yield-protocol/vault-interfaces/IFYToken.sol\\\";\\n\\n\\ninterface IPool is IERC20, IERC2612 {\\n    function ts() external view returns(int128);\\n    function g1() external view returns(int128);\\n    function g2() external view returns(int128);\\n    function maturity() external view returns(uint32);\\n    function scaleFactor() external view returns(uint96);\\n    function getCache() external view returns (uint112, uint112, uint32);\\n    function base() external view returns(IERC20);\\n    function fyToken() external view returns(IFYToken);\\n    function getBaseBalance() external view returns(uint112);\\n    function getFYTokenBalance() external view returns(uint112);\\n    function retrieveBase(address to) external returns(uint128 retrieved);\\n    function retrieveFYToken(address to) external returns(uint128 retrieved);\\n    function sellBase(address to, uint128 min) external returns(uint128);\\n    function buyBase(address to, uint128 baseOut, uint128 max) external returns(uint128);\\n    function sellFYToken(address to, uint128 min) external returns(uint128);\\n    function buyFYToken(address to, uint128 fyTokenOut, uint128 max) external returns(uint128);\\n    function sellBasePreview(uint128 baseIn) external view returns(uint128);\\n    function buyBasePreview(uint128 baseOut) external view returns(uint128);\\n    function sellFYTokenPreview(uint128 fyTokenIn) external view returns(uint128);\\n    function buyFYTokenPreview(uint128 fyTokenOut) external view returns(uint128);\\n    function mint(address to, address remainder, uint256 minRatio, uint256 maxRatio) external returns (uint256, uint256, uint256);\\n    function mintWithBase(address to, address remainder, uint256 fyTokenToBuy, uint256 minRatio, uint256 maxRatio) external returns (uint256, uint256, uint256);\\n    function burn(address baseTo, address fyTokenTo, uint256 minRatio, uint256 maxRatio) external returns (uint256, uint256, uint256);\\n    function burnForBase(address to, uint256 minRatio, uint256 maxRatio) external returns (uint256, uint256);\\n}\",\"keccak256\":\"0xbd6b255faa577a1ca1c23e4c3f367632d2aa0e3246f2b7de60bfd9b9b639e56e\",\"license\":\"MIT\"},\"@yield-protocol/yieldspace-interfaces/IPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\ninterface IPoolFactory {\\n  event PoolCreated(address indexed base, address indexed fyToken, address pool);\\n\\n  function POOL_BYTECODE_HASH() external pure returns (bytes32);\\n  function calculatePoolAddress(address base, address fyToken) external view returns (address);\\n  function getPool(address base, address fyToken) external view returns (address);\\n  function createPool(address base, address fyToken) external returns (address);\\n  function nextBase() external view returns (address);\\n  function nextFYToken() external view returns (address);\\n  function ts() external view returns (int128);\\n  function g1() external view returns (int128);\\n  function g2() external view returns (int128);\\n}\\n\",\"keccak256\":\"0x2738836239363283c2daac57ebf55d2b5adb7a1fe361c02fd5747c02bf8d46ca\",\"license\":\"MIT\"},\"contracts/space/Math64x64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/*\\r\\n *  Math 64.64 Smart Contract Library.  Copyright \\u00a9 2019 by  Consulting.\\r\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\r\\n */\\r\\npragma solidity 0.8.6;\\r\\n\\r\\n/**\\r\\n * Smart contract library of mathematical functions operating with signed\\r\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\r\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\r\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\r\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\r\\n * represented by int128 type holding only the numerator.\\r\\n */\\r\\nlibrary Math64x64 {\\r\\n    /*\\r\\n     * Minimum value signed 64.64-bit fixed point number may have.\\r\\n     */\\r\\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\r\\n\\r\\n    /*\\r\\n     * Maximum value signed 64.64-bit fixed point number may have.\\r\\n     */\\r\\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n\\r\\n    /**\\r\\n     * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\r\\n     * number.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 256-bit integer number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function fromInt(int256 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\r\\n            return int128(x << 64);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Convert signed 64.64 fixed point number into signed 64-bit integer number\\r\\n     * rounding down.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @return signed 64-bit integer number\\r\\n     */\\r\\n    function toInt(int128 x) internal pure returns (int64) {\\r\\n        unchecked {\\r\\n            return int64(x >> 64);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\r\\n     * number.  Revert on overflow.\\r\\n     *\\r\\n     * @param x unsigned 256-bit integer number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function fromUInt(uint256 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(x <= 0x7FFFFFFFFFFFFFFF);\\r\\n            return int128(int256(x << 64));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\r\\n     * number rounding down.  Revert on underflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @return unsigned 64-bit integer number\\r\\n     */\\r\\n    function toUInt(int128 x) internal pure returns (uint64) {\\r\\n        unchecked {\\r\\n            require(x >= 0);\\r\\n            return uint64(uint128(x >> 64));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\r\\n     * number rounding down.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 128.128-bin fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function from128x128(int256 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            int256 result = x >> 64;\\r\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\r\\n            return int128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\r\\n     * number.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @return signed 128.128 fixed point number\\r\\n     */\\r\\n    function to128x128(int128 x) internal pure returns (int256) {\\r\\n        unchecked {\\r\\n            return int256(x) << 64;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x + y.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @param y signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function add(int128 x, int128 y) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            int256 result = int256(x) + y;\\r\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\r\\n            return int128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x - y.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @param y signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function sub(int128 x, int128 y) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            int256 result = int256(x) - y;\\r\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\r\\n            return int128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x * y rounding down.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @param y signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function mul(int128 x, int128 y) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            int256 result = (int256(x) * y) >> 64;\\r\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\r\\n            return int128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\r\\n     * number and y is signed 256-bit integer number.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64 fixed point number\\r\\n     * @param y signed 256-bit integer number\\r\\n     * @return signed 256-bit integer number\\r\\n     */\\r\\n    function muli(int128 x, int256 y) internal pure returns (int256) {\\r\\n        unchecked {\\r\\n            if (x == MIN_64x64) {\\r\\n                require(\\r\\n                    y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\r\\n                        y <= 0x1000000000000000000000000000000000000000000000000\\r\\n                );\\r\\n                return -y << 63;\\r\\n            } else {\\r\\n                bool negativeResult = false;\\r\\n                if (x < 0) {\\r\\n                    x = -x;\\r\\n                    negativeResult = true;\\r\\n                }\\r\\n                if (y < 0) {\\r\\n                    y = -y; // We rely on overflow behavior here\\r\\n                    negativeResult = !negativeResult;\\r\\n                }\\r\\n                uint256 absoluteResult = mulu(x, uint256(y));\\r\\n                if (negativeResult) {\\r\\n                    require(\\r\\n                        absoluteResult <=\\r\\n                            0x8000000000000000000000000000000000000000000000000000000000000000\\r\\n                    );\\r\\n                    return -int256(absoluteResult); // We rely on overflow behavior here\\r\\n                } else {\\r\\n                    require(\\r\\n                        absoluteResult <=\\r\\n                            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\r\\n                    );\\r\\n                    return int256(absoluteResult);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\r\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64 fixed point number\\r\\n     * @param y unsigned 256-bit integer number\\r\\n     * @return unsigned 256-bit integer number\\r\\n     */\\r\\n    function mulu(int128 x, uint256 y) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            if (y == 0) return 0;\\r\\n\\r\\n            require(x >= 0);\\r\\n\\r\\n            uint256 lo = (uint256(int256(x)) *\\r\\n                (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\r\\n            uint256 hi = uint256(int256(x)) * (y >> 128);\\r\\n\\r\\n            require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n            hi <<= 64;\\r\\n\\r\\n            require(\\r\\n                hi <=\\r\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF -\\r\\n                        lo\\r\\n            );\\r\\n            return hi + lo;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\r\\n     * zero.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @param y signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function div(int128 x, int128 y) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(y != 0);\\r\\n            int256 result = (int256(x) << 64) / y;\\r\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\r\\n            return int128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\r\\n     * integer numbers.  Revert on overflow or when y is zero.\\r\\n     *\\r\\n     * @param x signed 256-bit integer number\\r\\n     * @param y signed 256-bit integer number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function divi(int256 x, int256 y) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(y != 0);\\r\\n\\r\\n            bool negativeResult = false;\\r\\n            if (x < 0) {\\r\\n                x = -x; // We rely on overflow behavior here\\r\\n                negativeResult = true;\\r\\n            }\\r\\n            if (y < 0) {\\r\\n                y = -y; // We rely on overflow behavior here\\r\\n                negativeResult = !negativeResult;\\r\\n            }\\r\\n            uint128 absoluteResult = divuu(uint256(x), uint256(y));\\r\\n            if (negativeResult) {\\r\\n                require(absoluteResult <= 0x80000000000000000000000000000000);\\r\\n                return -int128(absoluteResult); // We rely on overflow behavior here\\r\\n            } else {\\r\\n                require(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n                return int128(absoluteResult); // We rely on overflow behavior here\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\r\\n     * integer numbers.  Revert on overflow or when y is zero.\\r\\n     *\\r\\n     * @param x unsigned 256-bit integer number\\r\\n     * @param y unsigned 256-bit integer number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function divu(uint256 x, uint256 y) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(y != 0);\\r\\n            uint128 result = divuu(x, y);\\r\\n            require(result <= uint128(MAX_64x64));\\r\\n            return int128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate -x.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function neg(int128 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(x != MIN_64x64);\\r\\n            return -x;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate |x|.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function abs(int128 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(x != MIN_64x64);\\r\\n            return x < 0 ? -x : x;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\r\\n     * zero.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function inv(int128 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(x != 0);\\r\\n            int256 result = int256(0x100000000000000000000000000000000) / x;\\r\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\r\\n            return int128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @param y signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function avg(int128 x, int128 y) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            return int128((int256(x) + int256(y)) >> 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\r\\n     * Revert on overflow or in case x * y is negative.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @param y signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function gavg(int128 x, int128 y) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            int256 m = int256(x) * int256(y);\\r\\n            require(m >= 0);\\r\\n            require(\\r\\n                m <\\r\\n                    0x4000000000000000000000000000000000000000000000000000000000000000\\r\\n            );\\r\\n            return int128(sqrtu(uint256(m)));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\r\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @param y uint256 value\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function pow(int128 x, uint256 y) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            bool negative = x < 0 && y & 1 == 1;\\r\\n\\r\\n            uint256 absX = uint128(x < 0 ? -x : x);\\r\\n            uint256 absResult;\\r\\n            absResult = 0x100000000000000000000000000000000;\\r\\n\\r\\n            if (absX <= 0x10000000000000000) {\\r\\n                absX <<= 63;\\r\\n                while (y != 0) {\\r\\n                    if (y & 0x1 != 0) {\\r\\n                        absResult = (absResult * absX) >> 127;\\r\\n                    }\\r\\n                    absX = (absX * absX) >> 127;\\r\\n\\r\\n                    if (y & 0x2 != 0) {\\r\\n                        absResult = (absResult * absX) >> 127;\\r\\n                    }\\r\\n                    absX = (absX * absX) >> 127;\\r\\n\\r\\n                    if (y & 0x4 != 0) {\\r\\n                        absResult = (absResult * absX) >> 127;\\r\\n                    }\\r\\n                    absX = (absX * absX) >> 127;\\r\\n\\r\\n                    if (y & 0x8 != 0) {\\r\\n                        absResult = (absResult * absX) >> 127;\\r\\n                    }\\r\\n                    absX = (absX * absX) >> 127;\\r\\n\\r\\n                    y >>= 4;\\r\\n                }\\r\\n\\r\\n                absResult >>= 64;\\r\\n            } else {\\r\\n                uint256 absXShift = 63;\\r\\n                if (absX < 0x1000000000000000000000000) {\\r\\n                    absX <<= 32;\\r\\n                    absXShift -= 32;\\r\\n                }\\r\\n                if (absX < 0x10000000000000000000000000000) {\\r\\n                    absX <<= 16;\\r\\n                    absXShift -= 16;\\r\\n                }\\r\\n                if (absX < 0x1000000000000000000000000000000) {\\r\\n                    absX <<= 8;\\r\\n                    absXShift -= 8;\\r\\n                }\\r\\n                if (absX < 0x10000000000000000000000000000000) {\\r\\n                    absX <<= 4;\\r\\n                    absXShift -= 4;\\r\\n                }\\r\\n                if (absX < 0x40000000000000000000000000000000) {\\r\\n                    absX <<= 2;\\r\\n                    absXShift -= 2;\\r\\n                }\\r\\n                if (absX < 0x80000000000000000000000000000000) {\\r\\n                    absX <<= 1;\\r\\n                    absXShift -= 1;\\r\\n                }\\r\\n\\r\\n                uint256 resultShift = 0;\\r\\n                while (y != 0) {\\r\\n                    require(absXShift < 64);\\r\\n\\r\\n                    if (y & 0x1 != 0) {\\r\\n                        absResult = (absResult * absX) >> 127;\\r\\n                        resultShift += absXShift;\\r\\n                        if (absResult > 0x100000000000000000000000000000000) {\\r\\n                            absResult >>= 1;\\r\\n                            resultShift += 1;\\r\\n                        }\\r\\n                    }\\r\\n                    absX = (absX * absX) >> 127;\\r\\n                    absXShift <<= 1;\\r\\n                    if (absX >= 0x100000000000000000000000000000000) {\\r\\n                        absX >>= 1;\\r\\n                        absXShift += 1;\\r\\n                    }\\r\\n\\r\\n                    y >>= 1;\\r\\n                }\\r\\n\\r\\n                require(resultShift < 64);\\r\\n                absResult >>= 64 - resultShift;\\r\\n            }\\r\\n            int256 result = negative ? -int256(absResult) : int256(absResult);\\r\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\r\\n            return int128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate sqrt (x) rounding down.  Revert if x < 0.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function sqrt(int128 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(x >= 0);\\r\\n            return int128(sqrtu(uint256(int256(x)) << 64));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate binary logarithm of x.  Revert if x <= 0.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function log_2(int128 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(x > 0);\\r\\n\\r\\n            int256 msb = 0;\\r\\n            int256 xc = x;\\r\\n            if (xc >= 0x10000000000000000) {\\r\\n                xc >>= 64;\\r\\n                msb += 64;\\r\\n            }\\r\\n            if (xc >= 0x100000000) {\\r\\n                xc >>= 32;\\r\\n                msb += 32;\\r\\n            }\\r\\n            if (xc >= 0x10000) {\\r\\n                xc >>= 16;\\r\\n                msb += 16;\\r\\n            }\\r\\n            if (xc >= 0x100) {\\r\\n                xc >>= 8;\\r\\n                msb += 8;\\r\\n            }\\r\\n            if (xc >= 0x10) {\\r\\n                xc >>= 4;\\r\\n                msb += 4;\\r\\n            }\\r\\n            if (xc >= 0x4) {\\r\\n                xc >>= 2;\\r\\n                msb += 2;\\r\\n            }\\r\\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\r\\n\\r\\n            int256 result = (msb - 64) << 64;\\r\\n            uint256 ux = uint256(int256(x)) << uint256(127 - msb);\\r\\n            for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\r\\n                ux *= ux;\\r\\n                uint256 b = ux >> 255;\\r\\n                ux >>= 127 + b;\\r\\n                result += bit * int256(b);\\r\\n            }\\r\\n\\r\\n            return int128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate natural logarithm of x.  Revert if x <= 0.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function ln(int128 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(x > 0);\\r\\n\\r\\n            return\\r\\n                int128(\\r\\n                    int256(\\r\\n                        (uint256(int256(log_2(x))) *\\r\\n                            0xB17217F7D1CF79ABC9E3B39803F2F6AF) >> 128\\r\\n                    )\\r\\n                );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate binary exponent of x.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function exp_2(int128 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(x < 0x400000000000000000); // Overflow\\r\\n\\r\\n            if (x < -0x400000000000000000) return 0; // Underflow\\r\\n\\r\\n            uint256 result = 0x80000000000000000000000000000000;\\r\\n\\r\\n            if (x & 0x8000000000000000 > 0)\\r\\n                result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\\r\\n            if (x & 0x4000000000000000 > 0)\\r\\n                result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\\r\\n            if (x & 0x2000000000000000 > 0)\\r\\n                result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\\r\\n            if (x & 0x1000000000000000 > 0)\\r\\n                result = (result * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\\r\\n            if (x & 0x800000000000000 > 0)\\r\\n                result = (result * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\\r\\n            if (x & 0x400000000000000 > 0)\\r\\n                result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\\r\\n            if (x & 0x200000000000000 > 0)\\r\\n                result = (result * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\\r\\n            if (x & 0x100000000000000 > 0)\\r\\n                result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\\r\\n            if (x & 0x80000000000000 > 0)\\r\\n                result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\\r\\n            if (x & 0x40000000000000 > 0)\\r\\n                result = (result * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\\r\\n            if (x & 0x20000000000000 > 0)\\r\\n                result = (result * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\\r\\n            if (x & 0x10000000000000 > 0)\\r\\n                result = (result * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\\r\\n            if (x & 0x8000000000000 > 0)\\r\\n                result = (result * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\\r\\n            if (x & 0x4000000000000 > 0)\\r\\n                result = (result * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\\r\\n            if (x & 0x2000000000000 > 0)\\r\\n                result = (result * 0x1000162E525EE054754457D5995292026) >> 128;\\r\\n            if (x & 0x1000000000000 > 0)\\r\\n                result = (result * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\\r\\n            if (x & 0x800000000000 > 0)\\r\\n                result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\\r\\n            if (x & 0x400000000000 > 0)\\r\\n                result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\\r\\n            if (x & 0x200000000000 > 0)\\r\\n                result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\\r\\n            if (x & 0x100000000000 > 0)\\r\\n                result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\\r\\n            if (x & 0x80000000000 > 0)\\r\\n                result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\\r\\n            if (x & 0x40000000000 > 0)\\r\\n                result = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\\r\\n            if (x & 0x20000000000 > 0)\\r\\n                result = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\\r\\n            if (x & 0x10000000000 > 0)\\r\\n                result = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\\r\\n            if (x & 0x8000000000 > 0)\\r\\n                result = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\\r\\n            if (x & 0x4000000000 > 0)\\r\\n                result = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\\r\\n            if (x & 0x2000000000 > 0)\\r\\n                result = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\\r\\n            if (x & 0x1000000000 > 0)\\r\\n                result = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\\r\\n            if (x & 0x800000000 > 0)\\r\\n                result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\\r\\n            if (x & 0x400000000 > 0)\\r\\n                result = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\\r\\n            if (x & 0x200000000 > 0)\\r\\n                result = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\\r\\n            if (x & 0x100000000 > 0)\\r\\n                result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\\r\\n            if (x & 0x80000000 > 0)\\r\\n                result = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\\r\\n            if (x & 0x40000000 > 0)\\r\\n                result = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\\r\\n            if (x & 0x20000000 > 0)\\r\\n                result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\\r\\n            if (x & 0x10000000 > 0)\\r\\n                result = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\\r\\n            if (x & 0x8000000 > 0)\\r\\n                result = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\\r\\n            if (x & 0x4000000 > 0)\\r\\n                result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\\r\\n            if (x & 0x2000000 > 0)\\r\\n                result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\\r\\n            if (x & 0x1000000 > 0)\\r\\n                result = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\\r\\n            if (x & 0x800000 > 0)\\r\\n                result = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\\r\\n            if (x & 0x400000 > 0)\\r\\n                result = (result * 0x100000000002C5C85FDF477B662B26945) >> 128;\\r\\n            if (x & 0x200000 > 0)\\r\\n                result = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128;\\r\\n            if (x & 0x100000 > 0)\\r\\n                result = (result * 0x100000000000B17217F7D1D351A389D40) >> 128;\\r\\n            if (x & 0x80000 > 0)\\r\\n                result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\\r\\n            if (x & 0x40000 > 0)\\r\\n                result = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\\r\\n            if (x & 0x20000 > 0)\\r\\n                result = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128;\\r\\n            if (x & 0x10000 > 0)\\r\\n                result = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\\r\\n            if (x & 0x8000 > 0)\\r\\n                result = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\\r\\n            if (x & 0x4000 > 0)\\r\\n                result = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128;\\r\\n            if (x & 0x2000 > 0)\\r\\n                result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\\r\\n            if (x & 0x1000 > 0)\\r\\n                result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\\r\\n            if (x & 0x800 > 0)\\r\\n                result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\\r\\n            if (x & 0x400 > 0)\\r\\n                result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\\r\\n            if (x & 0x200 > 0)\\r\\n                result = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128;\\r\\n            if (x & 0x100 > 0)\\r\\n                result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\\r\\n            if (x & 0x80 > 0)\\r\\n                result = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\\r\\n            if (x & 0x40 > 0)\\r\\n                result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\\r\\n            if (x & 0x20 > 0)\\r\\n                result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\\r\\n            if (x & 0x10 > 0)\\r\\n                result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\\r\\n            if (x & 0x8 > 0)\\r\\n                result = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\\r\\n            if (x & 0x4 > 0)\\r\\n                result = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\\r\\n            if (x & 0x2 > 0)\\r\\n                result = (result * 0x1000000000000000162E42FEFA39EF358) >> 128;\\r\\n            if (x & 0x1 > 0)\\r\\n                result = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128;\\r\\n\\r\\n            result >>= uint256(int256(63 - (x >> 64)));\\r\\n            require(result <= uint256(int256(MAX_64x64)));\\r\\n\\r\\n            return int128(int256(result));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate natural exponent of x.  Revert on overflow.\\r\\n     *\\r\\n     * @param x signed 64.64-bit fixed point number\\r\\n     * @return signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function exp(int128 x) internal pure returns (int128) {\\r\\n        unchecked {\\r\\n            require(x < 0x400000000000000000); // Overflow\\r\\n\\r\\n            if (x < -0x400000000000000000) return 0; // Underflow\\r\\n\\r\\n            return\\r\\n                exp_2(\\r\\n                    int128(\\r\\n                        (int256(x) * 0x171547652B82FE1777D0FFDA0D23A7D12) >> 128\\r\\n                    )\\r\\n                );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\r\\n     * integer numbers.  Revert on overflow or when y is zero.\\r\\n     *\\r\\n     * @param x unsigned 256-bit integer number\\r\\n     * @param y unsigned 256-bit integer number\\r\\n     * @return unsigned 64.64-bit fixed point number\\r\\n     */\\r\\n    function divuu(uint256 x, uint256 y) private pure returns (uint128) {\\r\\n        unchecked {\\r\\n            require(y != 0);\\r\\n\\r\\n            uint256 result;\\r\\n\\r\\n            if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\r\\n                result = (x << 64) / y;\\r\\n            else {\\r\\n                uint256 msb = 192;\\r\\n                uint256 xc = x >> 192;\\r\\n                if (xc >= 0x100000000) {\\r\\n                    xc >>= 32;\\r\\n                    msb += 32;\\r\\n                }\\r\\n                if (xc >= 0x10000) {\\r\\n                    xc >>= 16;\\r\\n                    msb += 16;\\r\\n                }\\r\\n                if (xc >= 0x100) {\\r\\n                    xc >>= 8;\\r\\n                    msb += 8;\\r\\n                }\\r\\n                if (xc >= 0x10) {\\r\\n                    xc >>= 4;\\r\\n                    msb += 4;\\r\\n                }\\r\\n                if (xc >= 0x4) {\\r\\n                    xc >>= 2;\\r\\n                    msb += 2;\\r\\n                }\\r\\n                if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\r\\n\\r\\n                result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1);\\r\\n                require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n\\r\\n                uint256 hi = result * (y >> 128);\\r\\n                uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n\\r\\n                uint256 xh = x >> 192;\\r\\n                uint256 xl = x << 64;\\r\\n\\r\\n                if (xl < lo) xh -= 1;\\r\\n                xl -= lo; // We rely on overflow behavior here\\r\\n                lo = hi << 128;\\r\\n                if (xl < lo) xh -= 1;\\r\\n                xl -= lo; // We rely on overflow behavior here\\r\\n\\r\\n                assert(xh == hi >> 128);\\r\\n\\r\\n                result += xl / y;\\r\\n            }\\r\\n\\r\\n            require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n            return uint128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\r\\n     * number.\\r\\n     *\\r\\n     * @param x unsigned 256-bit integer number\\r\\n     * @return unsigned 128-bit integer number\\r\\n     */\\r\\n    function sqrtu(uint256 x) private pure returns (uint128) {\\r\\n        unchecked {\\r\\n            if (x == 0) return 0;\\r\\n            else {\\r\\n                uint256 xx = x;\\r\\n                uint256 r = 1;\\r\\n                if (xx >= 0x100000000000000000000000000000000) {\\r\\n                    xx >>= 128;\\r\\n                    r <<= 64;\\r\\n                }\\r\\n                if (xx >= 0x10000000000000000) {\\r\\n                    xx >>= 64;\\r\\n                    r <<= 32;\\r\\n                }\\r\\n                if (xx >= 0x100000000) {\\r\\n                    xx >>= 32;\\r\\n                    r <<= 16;\\r\\n                }\\r\\n                if (xx >= 0x10000) {\\r\\n                    xx >>= 16;\\r\\n                    r <<= 8;\\r\\n                }\\r\\n                if (xx >= 0x100) {\\r\\n                    xx >>= 8;\\r\\n                    r <<= 4;\\r\\n                }\\r\\n                if (xx >= 0x10) {\\r\\n                    xx >>= 4;\\r\\n                    r <<= 2;\\r\\n                }\\r\\n                if (xx >= 0x8) {\\r\\n                    r <<= 1;\\r\\n                }\\r\\n                r = (r + x / r) >> 1;\\r\\n                r = (r + x / r) >> 1;\\r\\n                r = (r + x / r) >> 1;\\r\\n                r = (r + x / r) >> 1;\\r\\n                r = (r + x / r) >> 1;\\r\\n                r = (r + x / r) >> 1;\\r\\n                r = (r + x / r) >> 1; // Seven iterations should be enough\\r\\n                uint256 r1 = x / r;\\r\\n                return uint128(r < r1 ? r : r1);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x08dbcb5699154b3aea6b476ad624e8016fb8a2285bee3fd341c6d8ddf2580ceb\",\"license\":\"MIT\"},\"contracts/space/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@yield-protocol/utils-v2/contracts/token/IERC20.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/token/IERC20Metadata.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/token/ERC20Permit.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/token/SafeERC20Namer.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/token/MinimalTransferHelper.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/cast/CastU256U128.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/cast/CastU256U112.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/cast/CastU256I256.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/cast/CastU128U112.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/cast/CastU128I128.sol\\\";\\nimport \\\"@yield-protocol/yieldspace-interfaces/IPool.sol\\\";\\nimport \\\"@yield-protocol/yieldspace-interfaces/IPoolFactory.sol\\\";\\nimport \\\"@yield-protocol/vault-interfaces/IFYToken.sol\\\";\\nimport \\\"./YieldMath.sol\\\";\\n\\n\\n/// @dev The Pool contract exchanges base for fyToken at a price defined by a specific formula.\\ncontract Pool is IPool, ERC20Permit {\\n    using CastU256U128 for uint256;\\n    using CastU256U112 for uint256;\\n    using CastU256I256 for uint256;\\n    using CastU128U112 for uint128;\\n    using CastU128I128 for uint128;\\n    using MinimalTransferHelper for IERC20;\\n\\n    event Trade(uint32 maturity, address indexed from, address indexed to, int256 bases, int256 fyTokens);\\n    event Liquidity(uint32 maturity, address indexed from, address indexed to, address indexed fyTokenTo, int256 bases, int256 fyTokens, int256 poolTokens);\\n    event Sync(uint112 baseCached, uint112 fyTokenCached, uint256 cumulativeBalancesRatio);\\n\\n    int128 public immutable override ts;              // 1 / Seconds in 10 years, in 64.64\\n    int128 public immutable override g1;             // To be used when selling base to the pool\\n    int128 public immutable override g2;             // To be used when selling fyToken to the pool\\n    uint32 public immutable override maturity;\\n    uint96 public immutable override scaleFactor;    // Scale up to 18 low decimal tokens to get the right precision in YieldMath\\n\\n    IERC20 public immutable override base;\\n    IFYToken public immutable override fyToken;\\n\\n    uint112 private baseCached;              // uses single storage slot, accessible via getCache\\n    uint112 private fyTokenCached;           // uses single storage slot, accessible via getCache\\n    uint32  private blockTimestampLast;      // uses single storage slot, accessible via getCache\\n\\n    uint256 public cumulativeBalancesRatio;  // Fixed point factor with 27 decimals (ray)\\n\\n    constructor()\\n        ERC20Permit(\\n            string(abi.encodePacked(\\\"Yield \\\", SafeERC20Namer.tokenName(IPoolFactory(msg.sender).nextFYToken()), \\\" LP Token\\\")),\\n            string(abi.encodePacked(SafeERC20Namer.tokenSymbol(IPoolFactory(msg.sender).nextFYToken()), \\\"LP\\\")),\\n            SafeERC20Namer.tokenDecimals(IPoolFactory(msg.sender).nextBase())\\n        )\\n    {\\n        IPoolFactory _factory = IPoolFactory(msg.sender);\\n        IFYToken _fyToken = IFYToken(_factory.nextFYToken());\\n        IERC20 _base = IERC20(_factory.nextBase());\\n        fyToken = _fyToken;\\n        base = _base;\\n\\n        uint256 _maturity = _fyToken.maturity();\\n        require (_maturity <= type(uint32).max, \\\"Pool: Maturity too far in the future\\\");\\n        maturity = uint32(_maturity);\\n\\n        ts = _factory.ts();\\n        g1 = _factory.g1();\\n        g2 = _factory.g2();\\n\\n        scaleFactor = uint96(10 ** (18 - SafeERC20Namer.tokenDecimals(address(_base))));\\n    }\\n\\n    /// @dev Trading can only be done before maturity\\n    modifier beforeMaturity() {\\n        require(\\n            block.timestamp < maturity,\\n            \\\"Pool: Too late\\\"\\n        );\\n        _;\\n    }\\n\\n    // ---- Balances management ----\\n\\n    /// @dev Updates the cache to match the actual balances.\\n    function sync() external {\\n        _update(_getBaseBalance(), _getFYTokenBalance(), baseCached, fyTokenCached);\\n    }\\n\\n    /// @dev Returns the cached balances & last updated timestamp.\\n    /// @return Cached base token balance.\\n    /// @return Cached virtual FY token balance.\\n    /// @return Timestamp that balances were last cached.\\n    function getCache()\\n        external view override\\n        returns (uint112, uint112, uint32)\\n    {\\n        return (baseCached, fyTokenCached, blockTimestampLast);\\n    }\\n\\n    /// @dev Returns the \\\"virtual\\\" fyToken balance, which is the real balance plus the pool token supply.\\n    function getFYTokenBalance()\\n        public view override\\n        returns(uint112)\\n    {\\n        return _getFYTokenBalance();\\n    }\\n\\n    /// @dev Returns the base balance\\n    function getBaseBalance()\\n        public view override\\n        returns(uint112)\\n    {\\n        return _getBaseBalance();\\n    }\\n\\n    /// @dev Returns the \\\"virtual\\\" fyToken balance, which is the real balance plus the pool token supply.\\n    function _getFYTokenBalance()\\n        internal view\\n        returns(uint112)\\n    {\\n        return (fyToken.balanceOf(address(this)) + _totalSupply).u112();\\n    }\\n\\n    /// @dev Returns the base balance\\n    function _getBaseBalance()\\n        internal view\\n        returns(uint112)\\n    {\\n        return base.balanceOf(address(this)).u112();\\n    }\\n\\n    /// @dev Retrieve any base tokens not accounted for in the cache\\n    function retrieveBase(address to)\\n        external override\\n        returns(uint128 retrieved)\\n    {\\n        retrieved = _getBaseBalance() - baseCached; // Cache can never be above balances\\n        base.safeTransfer(to, retrieved);\\n        // Now the current balances match the cache, so no need to update the TWAR\\n    }\\n\\n    /// @dev Retrieve any fyTokens not accounted for in the cache\\n    function retrieveFYToken(address to)\\n        external override\\n        returns(uint128 retrieved)\\n    {\\n        retrieved = _getFYTokenBalance() - fyTokenCached; // Cache can never be above balances\\n        IERC20(address(fyToken)).safeTransfer(to, retrieved);\\n        // Now the balances match the cache, so no need to update the TWAR\\n    }\\n\\n    /// @dev Update cache and, on the first call per block, ratio accumulators\\n    function _update(uint128 baseBalance, uint128 fyBalance, uint112 _baseCached, uint112 _fyTokenCached) private {\\n        uint32 blockTimestamp = uint32(block.timestamp);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _baseCached != 0 && _fyTokenCached != 0) {\\n            // We multiply by 1e27 here so that r = t * y/x is a fixed point factor with 27 decimals \\n            uint256 scaledFYTokenCached = uint256(_fyTokenCached) * 1e27;\\n            cumulativeBalancesRatio += scaledFYTokenCached  * timeElapsed / _baseCached;\\n        }\\n        baseCached = baseBalance.u112();\\n        fyTokenCached = fyBalance.u112();\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(baseCached, fyTokenCached, cumulativeBalancesRatio);\\n    }\\n\\n    // ---- Liquidity ----\\n\\n    /// @dev Mint liquidity tokens in exchange for adding base and fyToken\\n    /// The amount of liquidity tokens to mint is calculated from the amount of unaccounted for fyToken in this contract.\\n    /// A proportional amount of base tokens need to be present in this contract, also unaccounted for.\\n    /// @param to Wallet receiving the minted liquidity tokens.\\n    /// @param remainder Wallet receiving any surplus base.\\n    /// @param minRatio Minimum ratio of base to fyToken in the pool.\\n    /// @param maxRatio Maximum ratio of base to fyToken in the pool.\\n    /// @return The amount of liquidity tokens minted.\\n    function mint(address to, address remainder, uint256 minRatio, uint256 maxRatio)\\n        external override\\n        returns (uint256, uint256, uint256)\\n    {\\n        return _mintInternal(to, remainder, 0, minRatio, maxRatio);\\n    }\\n\\n    /// @dev Mint liquidity tokens in exchange for adding only base\\n    /// The amount of liquidity tokens is calculated from the amount of fyToken to buy from the pool,\\n    /// plus the amount of unaccounted for fyToken in this contract.\\n    /// The base tokens need to be present in this contract, unaccounted for.\\n    /// @param to Wallet receiving the minted liquidity tokens.\\n    /// @param remainder Wallet receiving any surplus base.\\n    /// @param fyTokenToBuy Amount of `fyToken` being bought in the Pool, from this we calculate how much base it will be taken in.\\n    /// @param minRatio Minimum ratio of base to fyToken in the pool.\\n    /// @param maxRatio Maximum ratio of base to fyToken in the pool.\\n    /// @return The amount of liquidity tokens minted.\\n    function mintWithBase(address to, address remainder, uint256 fyTokenToBuy, uint256 minRatio, uint256 maxRatio)\\n        external override\\n        returns (uint256, uint256, uint256)\\n    {\\n        return _mintInternal(to, remainder, fyTokenToBuy, minRatio, maxRatio);\\n    }\\n\\n    /// @dev Mint liquidity tokens, with an optional internal trade to buy fyToken beforehand.\\n    /// The amount of liquidity tokens is calculated from the amount of fyToken to buy from the pool,\\n    /// plus the amount of unaccounted for fyToken in this contract.\\n    /// The base tokens need to be present in this contract, unaccounted for.\\n    /// @param to Wallet receiving the minted liquidity tokens.\\n    /// @param remainder Wallet receiving any surplus base.\\n    /// @param fyTokenToBuy Amount of `fyToken` being bought in the Pool, from this we calculate how much base it will be taken in.\\n    /// @param minRatio Minimum ratio of base to fyToken in the pool.\\n    /// @param maxRatio Minimum ratio of base to fyToken in the pool.\\n    function _mintInternal(address to, address remainder, uint256 fyTokenToBuy, uint256 minRatio, uint256 maxRatio)\\n        internal\\n        returns (uint256 baseIn, uint256 fyTokenIn, uint256 tokensMinted)\\n    {\\n        // Gather data\\n        uint256 supply = _totalSupply;\\n        (uint112 _baseCached, uint112 _fyTokenCached) =\\n            (baseCached, fyTokenCached);\\n        uint256 _realFYTokenCached = _fyTokenCached - supply;    // The fyToken cache includes the virtual fyToken, equal to the supply\\n        uint256 baseBalance = base.balanceOf(address(this));\\n        uint256 fyTokenBalance = fyToken.balanceOf(address(this));\\n        uint256 baseAvailable = baseBalance - _baseCached;\\n\\n        // Check the burn wasn't sandwiched\\n        require (\\n            _realFYTokenCached == 0 || (\\n                uint256(_baseCached) * 1e18 / _realFYTokenCached >= minRatio &&\\n                uint256(_baseCached) * 1e18 / _realFYTokenCached <= maxRatio\\n            ),\\n            \\\"Pool: Reserves ratio changed\\\"\\n        );\\n\\n        // Calculate token amounts\\n        if (supply == 0) { // Initialize at 1 pool token minted per base token supplied\\n            baseIn = baseAvailable;\\n            tokensMinted = baseIn;\\n        } else if (_realFYTokenCached == 0) { // Edge case, no fyToken in the Pool after initialization\\n            baseIn = baseAvailable;\\n            tokensMinted = supply * baseIn / _baseCached;\\n        } else {\\n            // There is an optional virtual trade before the mint\\n            uint256 baseToSell;\\n            if (fyTokenToBuy > 0) {\\n                baseToSell = _buyFYTokenPreview(\\n                    fyTokenToBuy.u128(),\\n                    _baseCached,\\n                    _fyTokenCached\\n                ); \\n            }\\n\\n            // We use all the available fyTokens, plus a virtual trade if it happened, surplus is in base tokens\\n            fyTokenIn = fyTokenBalance - _realFYTokenCached;\\n            tokensMinted = (supply * (fyTokenToBuy + fyTokenIn)) / (_realFYTokenCached - fyTokenToBuy);\\n            baseIn = baseToSell + ((_baseCached + baseToSell) * tokensMinted) / supply;\\n            require(baseAvailable >= baseIn, \\\"Pool: Not enough base token in\\\");\\n        }\\n\\n        // Update TWAR\\n        _update(\\n            (_baseCached + baseIn).u128(),\\n            (_fyTokenCached + fyTokenIn + tokensMinted).u128(), // Account for the \\\"virtual\\\" fyToken from the new minted LP tokens\\n            _baseCached,\\n            _fyTokenCached\\n        );\\n\\n        // Execute mint\\n        _mint(to, tokensMinted);\\n\\n        // Return any unused base\\n        if (baseAvailable - baseIn > 0) base.safeTransfer(remainder, baseAvailable - baseIn);\\n\\n        emit Liquidity(maturity, msg.sender, to, address(0), -(baseIn.i256()), -(fyTokenIn.i256()), tokensMinted.i256());\\n    }\\n\\n    /// @dev Burn liquidity tokens in exchange for base and fyToken.\\n    /// The liquidity tokens need to be in this contract.\\n    /// @param baseTo Wallet receiving the base.\\n    /// @param fyTokenTo Wallet receiving the fyToken.\\n    /// @param minRatio Minimum ratio of base to fyToken in the pool.\\n    /// @param maxRatio Maximum ratio of base to fyToken in the pool.\\n    /// @return The amount of tokens burned and returned (tokensBurned, bases, fyTokens).\\n    function burn(address baseTo, address fyTokenTo, uint256 minRatio, uint256 maxRatio)\\n        external override\\n        returns (uint256, uint256, uint256)\\n    {\\n        return _burnInternal(baseTo, fyTokenTo, false, minRatio, maxRatio);\\n    }\\n\\n    /// @dev Burn liquidity tokens in exchange for base.\\n    /// The liquidity provider needs to have called `pool.approve`.\\n    /// @param to Wallet receiving the base and fyToken.\\n    /// @param minRatio Minimum ratio of base to fyToken in the pool.\\n    /// @param maxRatio Minimum ratio of base to fyToken in the pool.\\n    /// @return tokensBurned The amount of lp tokens burned.\\n    /// @return baseOut The amount of base tokens returned.\\n    function burnForBase(address to, uint256 minRatio, uint256 maxRatio)\\n        external override\\n        returns (uint256 tokensBurned, uint256 baseOut)\\n    {\\n        (tokensBurned, baseOut, ) = _burnInternal(to, address(0), true, minRatio, maxRatio);\\n    }\\n\\n\\n    /// @dev Burn liquidity tokens in exchange for base.\\n    /// The liquidity provider needs to have called `pool.approve`.\\n    /// @param baseTo Wallet receiving the base.\\n    /// @param fyTokenTo Wallet receiving the fyToken.\\n    /// @param tradeToBase Whether the resulting fyToken should be traded for base tokens.\\n    /// @param minRatio Minimum ratio of base to fyToken in the pool.\\n    /// @param maxRatio Minimum ratio of base to fyToken in the pool.\\n    /// @return tokensBurned The amount of pool tokens burned.\\n    /// @return tokenOut The amount of base tokens returned.\\n    /// @return fyTokenOut The amount of fyTokens returned.\\n    function _burnInternal(address baseTo, address fyTokenTo, bool tradeToBase, uint256 minRatio, uint256 maxRatio)\\n        internal\\n        returns (uint256 tokensBurned, uint256 tokenOut, uint256 fyTokenOut)\\n    {\\n        \\n        // Gather data\\n        tokensBurned = _balanceOf[address(this)];\\n        uint256 supply = _totalSupply;\\n        (uint112 _baseCached, uint112 _fyTokenCached) =\\n            (baseCached, fyTokenCached);\\n        uint256 _realFYTokenCached = _fyTokenCached - supply;    // The fyToken cache includes the virtual fyToken, equal to the supply\\n\\n        // Check the burn wasn't sandwiched\\n        require (\\n            _realFYTokenCached == 0 || (\\n                uint256(_baseCached) * 1e18 / _realFYTokenCached >= minRatio &&\\n                uint256(_baseCached) * 1e18 / _realFYTokenCached <= maxRatio\\n            ),\\n            \\\"Pool: Reserves ratio changed\\\"\\n        );\\n\\n        // Calculate trade\\n        tokenOut = (tokensBurned * _baseCached) / supply;\\n        fyTokenOut = (tokensBurned * _realFYTokenCached) / supply;\\n\\n        if (tradeToBase) {\\n            tokenOut += YieldMath.baseOutForFYTokenIn(                      // This is a virtual sell\\n                (_baseCached - tokenOut.u128()) * scaleFactor,              // Cache, minus virtual burn\\n                (_fyTokenCached - fyTokenOut.u128()) * scaleFactor,         // Cache, minus virtual burn\\n                fyTokenOut.u128() * scaleFactor,                            // Sell the virtual fyToken obtained\\n                maturity - uint32(block.timestamp),                         // This can't be called after maturity\\n                ts,\\n                g2\\n            ) / scaleFactor;\\n            fyTokenOut = 0;\\n        }\\n\\n        // Update TWAR\\n        _update(\\n            (_baseCached - tokenOut).u128(),\\n            (_fyTokenCached - fyTokenOut - tokensBurned).u128(),\\n            _baseCached,\\n            _fyTokenCached\\n        );\\n\\n        // Transfer assets\\n        _burn(address(this), tokensBurned);\\n        base.safeTransfer(baseTo, tokenOut);\\n        if (fyTokenOut > 0) IERC20(address(fyToken)).safeTransfer(fyTokenTo, fyTokenOut);\\n\\n        emit Liquidity(maturity, msg.sender, baseTo, fyTokenTo, tokenOut.i256(), fyTokenOut.i256(), -(tokensBurned.i256()));\\n    }\\n\\n    // ---- Trading ----\\n\\n    /// @dev Sell base for fyToken.\\n    /// The trader needs to have transferred the amount of base to sell to the pool before in the same transaction.\\n    /// @param to Wallet receiving the fyToken being bought\\n    /// @param min Minimm accepted amount of fyToken\\n    /// @return Amount of fyToken that will be deposited on `to` wallet\\n    function sellBase(address to, uint128 min)\\n        external override\\n        returns(uint128)\\n    {\\n        // Calculate trade\\n        (uint112 _baseCached, uint112 _fyTokenCached) =\\n            (baseCached, fyTokenCached);\\n        uint112 _baseBalance = _getBaseBalance();\\n        uint112 _fyTokenBalance = _getFYTokenBalance();\\n        uint128 baseIn = _baseBalance - _baseCached;\\n        uint128 fyTokenOut = _sellBasePreview(\\n            baseIn,\\n            _baseCached,\\n            _fyTokenBalance\\n        );\\n\\n        // Slippage check\\n        require(\\n            fyTokenOut >= min,\\n            \\\"Pool: Not enough fyToken obtained\\\"\\n        );\\n\\n        // Update TWAR\\n        _update(\\n            _baseBalance,\\n            _fyTokenBalance - fyTokenOut,\\n            _baseCached,\\n            _fyTokenCached\\n        );\\n\\n        // Transfer assets\\n        IERC20(address(fyToken)).safeTransfer(to, fyTokenOut);\\n\\n        emit Trade(maturity, msg.sender, to, -(baseIn.i128()), fyTokenOut.i128());\\n        return fyTokenOut;\\n    }\\n\\n    /// @dev Returns how much fyToken would be obtained by selling `baseIn` base\\n    /// @param baseIn Amount of base hypothetically sold.\\n    /// @return Amount of fyToken hypothetically bought.\\n    function sellBasePreview(uint128 baseIn)\\n        external view override\\n        returns(uint128)\\n    {\\n        (uint112 _baseCached, uint112 _fyTokenCached) =\\n            (baseCached, fyTokenCached);\\n        return _sellBasePreview(baseIn, _baseCached, _fyTokenCached);\\n    }\\n\\n    /// @dev Returns how much fyToken would be obtained by selling `baseIn` base\\n    function _sellBasePreview(\\n        uint128 baseIn,\\n        uint112 baseBalance,\\n        uint112 fyTokenBalance\\n    )\\n        private view\\n        beforeMaturity\\n        returns(uint128)\\n    {\\n        uint128 fyTokenOut = YieldMath.fyTokenOutForBaseIn(\\n            baseBalance * scaleFactor,\\n            fyTokenBalance * scaleFactor,\\n            baseIn * scaleFactor,\\n            maturity - uint32(block.timestamp),             // This can't be called after maturity\\n            ts,\\n            g1\\n        ) / scaleFactor;\\n\\n        require(\\n            fyTokenBalance - fyTokenOut >= baseBalance + baseIn,\\n            \\\"Pool: fyToken balance too low\\\"\\n        );\\n\\n        return fyTokenOut;\\n    }\\n\\n    /// @dev Buy base for fyToken\\n    /// The trader needs to have called `fyToken.approve`\\n    /// @param to Wallet receiving the base being bought\\n    /// @param tokenOut Amount of base being bought that will be deposited in `to` wallet\\n    /// @param max Maximum amount of fyToken that will be paid for the trade\\n    /// @return Amount of fyToken that will be taken from caller\\n    function buyBase(address to, uint128 tokenOut, uint128 max)\\n        external override\\n        returns(uint128)\\n    {\\n        // Calculate trade\\n        uint128 fyTokenBalance = _getFYTokenBalance();\\n        (uint112 _baseCached, uint112 _fyTokenCached) =\\n            (baseCached, fyTokenCached);\\n        uint128 fyTokenIn = _buyBasePreview(\\n            tokenOut,\\n            _baseCached,\\n            _fyTokenCached\\n        );\\n        require(\\n            fyTokenBalance - _fyTokenCached >= fyTokenIn,\\n            \\\"Pool: Not enough fyToken in\\\"\\n        );\\n\\n        // Slippage check\\n        require(\\n            fyTokenIn <= max,\\n            \\\"Pool: Too much fyToken in\\\"\\n        );\\n\\n        // Update TWAR\\n        _update(\\n            _baseCached - tokenOut,\\n            _fyTokenCached + fyTokenIn,\\n            _baseCached,\\n            _fyTokenCached\\n        );\\n\\n        // Transfer assets\\n        base.safeTransfer(to, tokenOut);\\n\\n        emit Trade(maturity, msg.sender, to, tokenOut.i128(), -(fyTokenIn.i128()));\\n        return fyTokenIn;\\n    }\\n\\n    /// @dev Returns how much fyToken would be required to buy `tokenOut` base.\\n    /// @param tokenOut Amount of base hypothetically desired.\\n    /// @return Amount of fyToken hypothetically required.\\n    function buyBasePreview(uint128 tokenOut)\\n        external view override\\n        returns(uint128)\\n    {\\n        (uint112 _baseCached, uint112 _fyTokenCached) =\\n            (baseCached, fyTokenCached);\\n        return _buyBasePreview(tokenOut, _baseCached, _fyTokenCached);\\n    }\\n\\n    /// @dev Returns how much fyToken would be required to buy `tokenOut` base.\\n    function _buyBasePreview(\\n        uint128 tokenOut,\\n        uint112 baseBalance,\\n        uint112 fyTokenBalance\\n    )\\n        private view\\n        beforeMaturity\\n        returns(uint128)\\n    {\\n        return YieldMath.fyTokenInForBaseOut(\\n            baseBalance * scaleFactor,\\n            fyTokenBalance * scaleFactor,\\n            tokenOut * scaleFactor,\\n            maturity - uint32(block.timestamp),             // This can't be called after maturity\\n            ts,\\n            g2\\n        ) / scaleFactor;\\n    }\\n\\n    /// @dev Sell fyToken for base\\n    /// The trader needs to have transferred the amount of fyToken to sell to the pool before in the same transaction.\\n    /// @param to Wallet receiving the base being bought\\n    /// @param min Minimm accepted amount of base\\n    /// @return Amount of base that will be deposited on `to` wallet\\n    function sellFYToken(address to, uint128 min)\\n        external override\\n        returns(uint128)\\n    {\\n        // Calculate trade\\n        (uint112 _baseCached, uint112 _fyTokenCached) =\\n            (baseCached, fyTokenCached);\\n        uint112 _fyTokenBalance = _getFYTokenBalance();\\n        uint112 _baseBalance = _getBaseBalance();\\n        uint128 fyTokenIn = _fyTokenBalance - _fyTokenCached;\\n        uint128 baseOut = _sellFYTokenPreview(\\n            fyTokenIn,\\n            _baseCached,\\n            _fyTokenCached\\n        );\\n\\n        // Slippage check\\n        require(\\n            baseOut >= min,\\n            \\\"Pool: Not enough base obtained\\\"\\n        );\\n\\n        // Update TWAR\\n        _update(\\n            _baseBalance - baseOut,\\n            _fyTokenBalance,\\n            _baseCached,\\n            _fyTokenCached\\n        );\\n\\n        // Transfer assets\\n        base.safeTransfer(to, baseOut);\\n\\n        emit Trade(maturity, msg.sender, to, baseOut.i128(), -(fyTokenIn.i128()));\\n        return baseOut;\\n    }\\n\\n    /// @dev Returns how much base would be obtained by selling `fyTokenIn` fyToken.\\n    /// @param fyTokenIn Amount of fyToken hypothetically sold.\\n    /// @return Amount of base hypothetically bought.\\n    function sellFYTokenPreview(uint128 fyTokenIn)\\n        external view override\\n        returns(uint128)\\n    {\\n        (uint112 _baseCached, uint112 _fyTokenCached) =\\n            (baseCached, fyTokenCached);\\n        return _sellFYTokenPreview(fyTokenIn, _baseCached, _fyTokenCached);\\n    }\\n\\n    /// @dev Returns how much base would be obtained by selling `fyTokenIn` fyToken.\\n    function _sellFYTokenPreview(\\n        uint128 fyTokenIn,\\n        uint112 baseBalance,\\n        uint112 fyTokenBalance\\n    )\\n        private view\\n        beforeMaturity\\n        returns(uint128)\\n    {\\n        return YieldMath.baseOutForFYTokenIn(\\n            baseBalance * scaleFactor,\\n            fyTokenBalance * scaleFactor,\\n            fyTokenIn * scaleFactor,\\n            maturity - uint32(block.timestamp),             // This can't be called after maturity\\n            ts,\\n            g2\\n        ) / scaleFactor;\\n    }\\n\\n    /// @dev Buy fyToken for base\\n    /// The trader needs to have called `base.approve`\\n    /// @param to Wallet receiving the fyToken being bought\\n    /// @param fyTokenOut Amount of fyToken being bought that will be deposited in `to` wallet\\n    /// @param max Maximum amount of base token that will be paid for the trade\\n    /// @return Amount of base that will be taken from caller's wallet\\n    function buyFYToken(address to, uint128 fyTokenOut, uint128 max)\\n        external override\\n        returns(uint128)\\n    {\\n        // Calculate trade\\n        uint128 baseBalance = _getBaseBalance();\\n        (uint112 _baseCached, uint112 _fyTokenCached) =\\n            (baseCached, fyTokenCached);\\n        uint128 baseIn = _buyFYTokenPreview(\\n            fyTokenOut,\\n            _baseCached,\\n            _fyTokenCached\\n        );\\n        require(\\n            baseBalance - _baseCached >= baseIn,\\n            \\\"Pool: Not enough base token in\\\"\\n        );\\n\\n        // Slippage check\\n        require(\\n            baseIn <= max,\\n            \\\"Pool: Too much base token in\\\"\\n        );\\n\\n        // Update TWAR\\n        _update(\\n            _baseCached + baseIn,\\n            _fyTokenCached - fyTokenOut,\\n            _baseCached,\\n            _fyTokenCached\\n        );\\n\\n        // Transfer assets\\n        IERC20(address(fyToken)).safeTransfer(to, fyTokenOut);\\n\\n        emit Trade(maturity, msg.sender, to, -(baseIn.i128()), fyTokenOut.i128());\\n        return baseIn;\\n    }\\n\\n    /// @dev Returns how much base would be required to buy `fyTokenOut` fyToken.\\n    /// @param fyTokenOut Amount of fyToken hypothetically desired.\\n    /// @return Amount of base hypothetically required.\\n    function buyFYTokenPreview(uint128 fyTokenOut)\\n        external view override\\n        returns(uint128)\\n    {\\n        (uint112 _baseCached, uint112 _fyTokenCached) =\\n            (baseCached, fyTokenCached);\\n        return _buyFYTokenPreview(fyTokenOut, _baseCached, _fyTokenCached);\\n    }\\n\\n    /// @dev Returns how much base would be required to buy `fyTokenOut` fyToken.\\n    function _buyFYTokenPreview(\\n        uint128 fyTokenOut,\\n        uint128 baseBalance,\\n        uint128 fyTokenBalance\\n    )\\n        private view\\n        beforeMaturity\\n        returns(uint128)\\n    {\\n        uint128 baseIn = YieldMath.baseInForFYTokenOut(\\n            baseBalance * scaleFactor,\\n            fyTokenBalance * scaleFactor,\\n            fyTokenOut * scaleFactor,\\n            maturity - uint32(block.timestamp),             // This can't be called after maturity\\n            ts,\\n            g1\\n        ) / scaleFactor;\\n\\n        require(\\n            fyTokenBalance - fyTokenOut >= baseBalance + baseIn,\\n            \\\"Pool: fyToken balance too low\\\"\\n        );\\n\\n        return baseIn;\\n    }\\n}\\n\",\"keccak256\":\"0xe053a46e1bf9219de3a7611e2a3d819c3db0121bcf37114fcf4b0a4177bd08d1\",\"license\":\"MIT\"},\"contracts/space/PoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@yield-protocol/utils-v2/contracts/access/AccessControl.sol\\\";\\nimport \\\"@yield-protocol/utils-v2/contracts/utils/IsContract.sol\\\";\\nimport \\\"@yield-protocol/yieldspace-interfaces/IPoolFactory.sol\\\";\\nimport \\\"./Pool.sol\\\";\\n\\n/// @dev The PoolFactory can deterministically create new pool instances.\\ncontract PoolFactory is IPoolFactory, AccessControl {\\n    event ParameterSet(bytes32 parameter, int128 value);\\n\\n    /// Pre-hashing the bytecode allows calculatePoolAddress to be cheaper, and\\n    /// makes client-side address calculation easier\\n    bytes32 public constant override POOL_BYTECODE_HASH =\\n        keccak256(type(Pool).creationCode);\\n\\n    address public override nextBase;\\n    address public override nextFYToken;\\n    int128 public override ts = int128(uint128(uint256((1 << 64))) / 315576000); // 1 / Seconds in 10 years, in 64.64\\n    int128 public override g1 = int128(uint128(uint256((950 << 64))) / 1000); // To be used when selling base to the pool. All constants are `ufixed`, to divide them they must be converted to uint256\\n    int128 public override g2 = int128(uint128(uint256((1000 << 64))) / 950); // To be used when selling fyToken to the pool. All constants are `ufixed`, to divide them they must be converted to uint256\\n\\n    /// @dev Calculate the deterministic addreess of a pool, based on the base token & fy token.\\n    /// @param base Address of the base token (such as Base).\\n    /// @param fyToken Address of the fixed yield token (such as fyToken).\\n    /// @return The calculated pool address.\\n    function calculatePoolAddress(address base, address fyToken)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return _calculatePoolAddress(base, fyToken);\\n    }\\n\\n    /// @dev Create2 calculation\\n    function _calculatePoolAddress(address base, address fyToken)\\n        private\\n        view\\n        returns (address calculatedAddress)\\n    {\\n        calculatedAddress = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            bytes1(0xff),\\n                            address(this),\\n                            keccak256(abi.encodePacked(base, fyToken)),\\n                            POOL_BYTECODE_HASH\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /// @dev Calculate the addreess of a pool, and return address(0) if not deployed.\\n    /// @param base Address of the base token (such as Base).\\n    /// @param fyToken Address of the fixed yield token (such as fyToken).\\n    /// @return pool The deployed pool address.\\n    function getPool(address base, address fyToken)\\n        external\\n        view\\n        override\\n        returns (address pool)\\n    {\\n        pool = _calculatePoolAddress(base, fyToken);\\n\\n        if (!IsContract.isContract(pool)) {\\n            pool = address(0);\\n        }\\n    }\\n\\n    /// @dev Deploys a new pool.\\n    /// base & fyToken are written to temporary storage slots to allow for simpler\\n    /// address calculation, while still allowing the Pool contract to store the values as\\n    /// immutable.\\n    /// @param base Address of the base token (such as Base).\\n    /// @param fyToken Address of the fixed yield token (such as fyToken).\\n    /// @return pool The pool address.\\n    function createPool(address base, address fyToken)\\n        external\\n        override\\n        auth\\n        returns (address)\\n    {\\n        nextBase = base;\\n        nextFYToken = fyToken;\\n        Pool pool = new Pool{\\n            salt: keccak256(abi.encodePacked(base, fyToken))\\n        }();\\n        nextBase = address(0);\\n        nextFYToken = address(0);\\n\\n        emit PoolCreated(base, fyToken, address(pool));\\n\\n        return address(pool);\\n    }\\n\\n    /// @dev Set the ts, g1 or g2 parameters\\n    function setParameter(bytes32 parameter, int128 value) external auth {\\n        if (parameter == \\\"ts\\\") ts = value;\\n        else if (parameter == \\\"g1\\\") g1 = value;\\n        else if (parameter == \\\"g2\\\") g2 = value;\\n        else revert(\\\"Pool: Unrecognized parameter\\\");\\n        emit ParameterSet(parameter, value);\\n    }\\n}\\n\",\"keccak256\":\"0xe913e501dcd64547da005c4640b3f1dffba0517770bf70f742bbab28df80e38a\",\"license\":\"MIT\"},\"contracts/space/YieldMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"./Math64x64.sol\\\";\\r\\n\\r\\nlibrary Exp64x64 {\\r\\n    /**\\r\\n     * Raise given number x into power specified as a simple fraction y/z and then\\r\\n     * multiply the result by the normalization factor 2^(128 * (1 - y/z)).\\r\\n     * Revert if z is zero, or if both x and y are zeros.\\r\\n     *\\r\\n     * @param x number to raise into given power y/z\\r\\n     * @param y numerator of the power to raise x into\\r\\n     * @param z denominator of the power to raise x into\\r\\n     * @return x raised into power y/z and then multiplied by 2^(128 * (1 - y/z))\\r\\n     */\\r\\n    function pow(\\r\\n        uint128 x,\\r\\n        uint128 y,\\r\\n        uint128 z\\r\\n    ) internal pure returns (uint128) {\\r\\n        unchecked {\\r\\n            require(z != 0);\\r\\n\\r\\n            if (x == 0) {\\r\\n                require(y != 0);\\r\\n                return 0;\\r\\n            } else {\\r\\n                uint256 l = (uint256(\\r\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - log_2(x)\\r\\n                ) * y) / z;\\r\\n                if (l > 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) return 0;\\r\\n                else\\r\\n                    return\\r\\n                        pow_2(uint128(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - l));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate base 2 logarithm of an unsigned 128-bit integer number.  Revert\\r\\n     * in case x is zero.\\r\\n     *\\r\\n     * @param x number to calculate base 2 logarithm of\\r\\n     * @return base 2 logarithm of x, multiplied by 2^121\\r\\n     */\\r\\n    function log_2(uint128 x) internal pure returns (uint128) {\\r\\n        unchecked {\\r\\n            require(x != 0);\\r\\n\\r\\n            uint256 b = x;\\r\\n\\r\\n            uint256 l = 0xFE000000000000000000000000000000;\\r\\n\\r\\n            if (b < 0x10000000000000000) {\\r\\n                l -= 0x80000000000000000000000000000000;\\r\\n                b <<= 64;\\r\\n            }\\r\\n            if (b < 0x1000000000000000000000000) {\\r\\n                l -= 0x40000000000000000000000000000000;\\r\\n                b <<= 32;\\r\\n            }\\r\\n            if (b < 0x10000000000000000000000000000) {\\r\\n                l -= 0x20000000000000000000000000000000;\\r\\n                b <<= 16;\\r\\n            }\\r\\n            if (b < 0x1000000000000000000000000000000) {\\r\\n                l -= 0x10000000000000000000000000000000;\\r\\n                b <<= 8;\\r\\n            }\\r\\n            if (b < 0x10000000000000000000000000000000) {\\r\\n                l -= 0x8000000000000000000000000000000;\\r\\n                b <<= 4;\\r\\n            }\\r\\n            if (b < 0x40000000000000000000000000000000) {\\r\\n                l -= 0x4000000000000000000000000000000;\\r\\n                b <<= 2;\\r\\n            }\\r\\n            if (b < 0x80000000000000000000000000000000) {\\r\\n                l -= 0x2000000000000000000000000000000;\\r\\n                b <<= 1;\\r\\n            }\\r\\n\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x1000000000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x800000000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x400000000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x200000000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x100000000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x80000000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x40000000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x20000000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x10000000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x8000000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x4000000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x2000000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x1000000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x800000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x400000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x200000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x100000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x80000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x40000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x20000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x10000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x8000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x4000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x2000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x1000000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x800000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x400000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x200000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x100000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x80000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x40000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x20000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x10000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x8000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x4000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x2000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x1000000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x800000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x400000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x200000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x100000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x80000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x40000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x20000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x10000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x8000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x4000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x2000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x1000000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x800000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x400000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x200000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x100000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x80000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x40000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x20000000000000000;\\r\\n            }\\r\\n            b = (b * b) >> 127;\\r\\n            if (b >= 0x100000000000000000000000000000000) {\\r\\n                b >>= 1;\\r\\n                l |= 0x10000000000000000;\\r\\n            } /*\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x1000;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x800;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x400;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x200;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x100;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x80;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x40;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x20;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x10;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x8;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x4;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) {b >>= 1; l |= 0x2;}\\r\\n      b = b * b >> 127; if(b >= 0x100000000000000000000000000000000) l |= 0x1; */\\r\\n\\r\\n            return uint128(l);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate 2 raised into given power.\\r\\n     *\\r\\n     * @param x power to raise 2 into, multiplied by 2^121\\r\\n     * @return 2 raised into given power\\r\\n     */\\r\\n    function pow_2(uint128 x) internal pure returns (uint128) {\\r\\n        unchecked {\\r\\n            uint256 r = 0x80000000000000000000000000000000;\\r\\n            if (x & 0x1000000000000000000000000000000 > 0)\\r\\n                r = (r * 0xb504f333f9de6484597d89b3754abe9f) >> 127;\\r\\n            if (x & 0x800000000000000000000000000000 > 0)\\r\\n                r = (r * 0x9837f0518db8a96f46ad23182e42f6f6) >> 127;\\r\\n            if (x & 0x400000000000000000000000000000 > 0)\\r\\n                r = (r * 0x8b95c1e3ea8bd6e6fbe4628758a53c90) >> 127;\\r\\n            if (x & 0x200000000000000000000000000000 > 0)\\r\\n                r = (r * 0x85aac367cc487b14c5c95b8c2154c1b2) >> 127;\\r\\n            if (x & 0x100000000000000000000000000000 > 0)\\r\\n                r = (r * 0x82cd8698ac2ba1d73e2a475b46520bff) >> 127;\\r\\n            if (x & 0x80000000000000000000000000000 > 0)\\r\\n                r = (r * 0x8164d1f3bc0307737be56527bd14def4) >> 127;\\r\\n            if (x & 0x40000000000000000000000000000 > 0)\\r\\n                r = (r * 0x80b1ed4fd999ab6c25335719b6e6fd20) >> 127;\\r\\n            if (x & 0x20000000000000000000000000000 > 0)\\r\\n                r = (r * 0x8058d7d2d5e5f6b094d589f608ee4aa2) >> 127;\\r\\n            if (x & 0x10000000000000000000000000000 > 0)\\r\\n                r = (r * 0x802c6436d0e04f50ff8ce94a6797b3ce) >> 127;\\r\\n            if (x & 0x8000000000000000000000000000 > 0)\\r\\n                r = (r * 0x8016302f174676283690dfe44d11d008) >> 127;\\r\\n            if (x & 0x4000000000000000000000000000 > 0)\\r\\n                r = (r * 0x800b179c82028fd0945e54e2ae18f2f0) >> 127;\\r\\n            if (x & 0x2000000000000000000000000000 > 0)\\r\\n                r = (r * 0x80058baf7fee3b5d1c718b38e549cb93) >> 127;\\r\\n            if (x & 0x1000000000000000000000000000 > 0)\\r\\n                r = (r * 0x8002c5d00fdcfcb6b6566a58c048be1f) >> 127;\\r\\n            if (x & 0x800000000000000000000000000 > 0)\\r\\n                r = (r * 0x800162e61bed4a48e84c2e1a463473d9) >> 127;\\r\\n            if (x & 0x400000000000000000000000000 > 0)\\r\\n                r = (r * 0x8000b17292f702a3aa22beacca949013) >> 127;\\r\\n            if (x & 0x200000000000000000000000000 > 0)\\r\\n                r = (r * 0x800058b92abbae02030c5fa5256f41fe) >> 127;\\r\\n            if (x & 0x100000000000000000000000000 > 0)\\r\\n                r = (r * 0x80002c5c8dade4d71776c0f4dbea67d6) >> 127;\\r\\n            if (x & 0x80000000000000000000000000 > 0)\\r\\n                r = (r * 0x8000162e44eaf636526be456600bdbe4) >> 127;\\r\\n            if (x & 0x40000000000000000000000000 > 0)\\r\\n                r = (r * 0x80000b1721fa7c188307016c1cd4e8b6) >> 127;\\r\\n            if (x & 0x20000000000000000000000000 > 0)\\r\\n                r = (r * 0x8000058b90de7e4cecfc487503488bb1) >> 127;\\r\\n            if (x & 0x10000000000000000000000000 > 0)\\r\\n                r = (r * 0x800002c5c8678f36cbfce50a6de60b14) >> 127;\\r\\n            if (x & 0x8000000000000000000000000 > 0)\\r\\n                r = (r * 0x80000162e431db9f80b2347b5d62e516) >> 127;\\r\\n            if (x & 0x4000000000000000000000000 > 0)\\r\\n                r = (r * 0x800000b1721872d0c7b08cf1e0114152) >> 127;\\r\\n            if (x & 0x2000000000000000000000000 > 0)\\r\\n                r = (r * 0x80000058b90c1aa8a5c3736cb77e8dff) >> 127;\\r\\n            if (x & 0x1000000000000000000000000 > 0)\\r\\n                r = (r * 0x8000002c5c8605a4635f2efc2362d978) >> 127;\\r\\n            if (x & 0x800000000000000000000000 > 0)\\r\\n                r = (r * 0x800000162e4300e635cf4a109e3939bd) >> 127;\\r\\n            if (x & 0x400000000000000000000000 > 0)\\r\\n                r = (r * 0x8000000b17217ff81bef9c551590cf83) >> 127;\\r\\n            if (x & 0x200000000000000000000000 > 0)\\r\\n                r = (r * 0x800000058b90bfdd4e39cd52c0cfa27c) >> 127;\\r\\n            if (x & 0x100000000000000000000000 > 0)\\r\\n                r = (r * 0x80000002c5c85fe6f72d669e0e76e411) >> 127;\\r\\n            if (x & 0x80000000000000000000000 > 0)\\r\\n                r = (r * 0x8000000162e42ff18f9ad35186d0df28) >> 127;\\r\\n            if (x & 0x40000000000000000000000 > 0)\\r\\n                r = (r * 0x80000000b17217f84cce71aa0dcfffe7) >> 127;\\r\\n            if (x & 0x20000000000000000000000 > 0)\\r\\n                r = (r * 0x8000000058b90bfc07a77ad56ed22aaa) >> 127;\\r\\n            if (x & 0x10000000000000000000000 > 0)\\r\\n                r = (r * 0x800000002c5c85fdfc23cdead40da8d6) >> 127;\\r\\n            if (x & 0x8000000000000000000000 > 0)\\r\\n                r = (r * 0x80000000162e42fefc25eb1571853a66) >> 127;\\r\\n            if (x & 0x4000000000000000000000 > 0)\\r\\n                r = (r * 0x800000000b17217f7d97f692baacded5) >> 127;\\r\\n            if (x & 0x2000000000000000000000 > 0)\\r\\n                r = (r * 0x80000000058b90bfbead3b8b5dd254d7) >> 127;\\r\\n            if (x & 0x1000000000000000000000 > 0)\\r\\n                r = (r * 0x8000000002c5c85fdf4eedd62f084e67) >> 127;\\r\\n            if (x & 0x800000000000000000000 > 0)\\r\\n                r = (r * 0x800000000162e42fefa58aef378bf586) >> 127;\\r\\n            if (x & 0x400000000000000000000 > 0)\\r\\n                r = (r * 0x8000000000b17217f7d24a78a3c7ef02) >> 127;\\r\\n            if (x & 0x200000000000000000000 > 0)\\r\\n                r = (r * 0x800000000058b90bfbe9067c93e474a6) >> 127;\\r\\n            if (x & 0x100000000000000000000 > 0)\\r\\n                r = (r * 0x80000000002c5c85fdf47b8e5a72599f) >> 127;\\r\\n            if (x & 0x80000000000000000000 > 0)\\r\\n                r = (r * 0x8000000000162e42fefa3bdb315934a2) >> 127;\\r\\n            if (x & 0x40000000000000000000 > 0)\\r\\n                r = (r * 0x80000000000b17217f7d1d7299b49c46) >> 127;\\r\\n            if (x & 0x20000000000000000000 > 0)\\r\\n                r = (r * 0x8000000000058b90bfbe8e9a8d1c4ea0) >> 127;\\r\\n            if (x & 0x10000000000000000000 > 0)\\r\\n                r = (r * 0x800000000002c5c85fdf4745969ea76f) >> 127;\\r\\n            if (x & 0x8000000000000000000 > 0)\\r\\n                r = (r * 0x80000000000162e42fefa3a0df5373bf) >> 127;\\r\\n            if (x & 0x4000000000000000000 > 0)\\r\\n                r = (r * 0x800000000000b17217f7d1cff4aac1e1) >> 127;\\r\\n            if (x & 0x2000000000000000000 > 0)\\r\\n                r = (r * 0x80000000000058b90bfbe8e7db95a2f1) >> 127;\\r\\n            if (x & 0x1000000000000000000 > 0)\\r\\n                r = (r * 0x8000000000002c5c85fdf473e61ae1f8) >> 127;\\r\\n            if (x & 0x800000000000000000 > 0)\\r\\n                r = (r * 0x800000000000162e42fefa39f121751c) >> 127;\\r\\n            if (x & 0x400000000000000000 > 0)\\r\\n                r = (r * 0x8000000000000b17217f7d1cf815bb96) >> 127;\\r\\n            if (x & 0x200000000000000000 > 0)\\r\\n                r = (r * 0x800000000000058b90bfbe8e7bec1e0d) >> 127;\\r\\n            if (x & 0x100000000000000000 > 0)\\r\\n                r = (r * 0x80000000000002c5c85fdf473dee5f17) >> 127;\\r\\n            if (x & 0x80000000000000000 > 0)\\r\\n                r = (r * 0x8000000000000162e42fefa39ef5438f) >> 127;\\r\\n            if (x & 0x40000000000000000 > 0)\\r\\n                r = (r * 0x80000000000000b17217f7d1cf7a26c8) >> 127;\\r\\n            if (x & 0x20000000000000000 > 0)\\r\\n                r = (r * 0x8000000000000058b90bfbe8e7bcf4a4) >> 127;\\r\\n            if (x & 0x10000000000000000 > 0)\\r\\n                r = (r * 0x800000000000002c5c85fdf473de72a2) >> 127; /*\\r\\n      if(x & 0x8000000000000000 > 0) r = r * 0x80000000000000162e42fefa39ef3765 >> 127;\\r\\n      if(x & 0x4000000000000000 > 0) r = r * 0x800000000000000b17217f7d1cf79b37 >> 127;\\r\\n      if(x & 0x2000000000000000 > 0) r = r * 0x80000000000000058b90bfbe8e7bcd7d >> 127;\\r\\n      if(x & 0x1000000000000000 > 0) r = r * 0x8000000000000002c5c85fdf473de6b6 >> 127;\\r\\n      if(x & 0x800000000000000 > 0) r = r * 0x800000000000000162e42fefa39ef359 >> 127;\\r\\n      if(x & 0x400000000000000 > 0) r = r * 0x8000000000000000b17217f7d1cf79ac >> 127;\\r\\n      if(x & 0x200000000000000 > 0) r = r * 0x800000000000000058b90bfbe8e7bcd6 >> 127;\\r\\n      if(x & 0x100000000000000 > 0) r = r * 0x80000000000000002c5c85fdf473de6a >> 127;\\r\\n      if(x & 0x80000000000000 > 0) r = r * 0x8000000000000000162e42fefa39ef35 >> 127;\\r\\n      if(x & 0x40000000000000 > 0) r = r * 0x80000000000000000b17217f7d1cf79a >> 127;\\r\\n      if(x & 0x20000000000000 > 0) r = r * 0x8000000000000000058b90bfbe8e7bcd >> 127;\\r\\n      if(x & 0x10000000000000 > 0) r = r * 0x800000000000000002c5c85fdf473de6 >> 127;\\r\\n      if(x & 0x8000000000000 > 0) r = r * 0x80000000000000000162e42fefa39ef3 >> 127;\\r\\n      if(x & 0x4000000000000 > 0) r = r * 0x800000000000000000b17217f7d1cf79 >> 127;\\r\\n      if(x & 0x2000000000000 > 0) r = r * 0x80000000000000000058b90bfbe8e7bc >> 127;\\r\\n      if(x & 0x1000000000000 > 0) r = r * 0x8000000000000000002c5c85fdf473de >> 127;\\r\\n      if(x & 0x800000000000 > 0) r = r * 0x800000000000000000162e42fefa39ef >> 127;\\r\\n      if(x & 0x400000000000 > 0) r = r * 0x8000000000000000000b17217f7d1cf7 >> 127;\\r\\n      if(x & 0x200000000000 > 0) r = r * 0x800000000000000000058b90bfbe8e7b >> 127;\\r\\n      if(x & 0x100000000000 > 0) r = r * 0x80000000000000000002c5c85fdf473d >> 127;\\r\\n      if(x & 0x80000000000 > 0) r = r * 0x8000000000000000000162e42fefa39e >> 127;\\r\\n      if(x & 0x40000000000 > 0) r = r * 0x80000000000000000000b17217f7d1cf >> 127;\\r\\n      if(x & 0x20000000000 > 0) r = r * 0x8000000000000000000058b90bfbe8e7 >> 127;\\r\\n      if(x & 0x10000000000 > 0) r = r * 0x800000000000000000002c5c85fdf473 >> 127;\\r\\n      if(x & 0x8000000000 > 0) r = r * 0x80000000000000000000162e42fefa39 >> 127;\\r\\n      if(x & 0x4000000000 > 0) r = r * 0x800000000000000000000b17217f7d1c >> 127;\\r\\n      if(x & 0x2000000000 > 0) r = r * 0x80000000000000000000058b90bfbe8e >> 127;\\r\\n      if(x & 0x1000000000 > 0) r = r * 0x8000000000000000000002c5c85fdf47 >> 127;\\r\\n      if(x & 0x800000000 > 0) r = r * 0x800000000000000000000162e42fefa3 >> 127;\\r\\n      if(x & 0x400000000 > 0) r = r * 0x8000000000000000000000b17217f7d1 >> 127;\\r\\n      if(x & 0x200000000 > 0) r = r * 0x800000000000000000000058b90bfbe8 >> 127;\\r\\n      if(x & 0x100000000 > 0) r = r * 0x80000000000000000000002c5c85fdf4 >> 127;\\r\\n      if(x & 0x80000000 > 0) r = r * 0x8000000000000000000000162e42fefa >> 127;\\r\\n      if(x & 0x40000000 > 0) r = r * 0x80000000000000000000000b17217f7d >> 127;\\r\\n      if(x & 0x20000000 > 0) r = r * 0x8000000000000000000000058b90bfbe >> 127;\\r\\n      if(x & 0x10000000 > 0) r = r * 0x800000000000000000000002c5c85fdf >> 127;\\r\\n      if(x & 0x8000000 > 0) r = r * 0x80000000000000000000000162e42fef >> 127;\\r\\n      if(x & 0x4000000 > 0) r = r * 0x800000000000000000000000b17217f7 >> 127;\\r\\n      if(x & 0x2000000 > 0) r = r * 0x80000000000000000000000058b90bfb >> 127;\\r\\n      if(x & 0x1000000 > 0) r = r * 0x8000000000000000000000002c5c85fd >> 127;\\r\\n      if(x & 0x800000 > 0) r = r * 0x800000000000000000000000162e42fe >> 127;\\r\\n      if(x & 0x400000 > 0) r = r * 0x8000000000000000000000000b17217f >> 127;\\r\\n      if(x & 0x200000 > 0) r = r * 0x800000000000000000000000058b90bf >> 127;\\r\\n      if(x & 0x100000 > 0) r = r * 0x80000000000000000000000002c5c85f >> 127;\\r\\n      if(x & 0x80000 > 0) r = r * 0x8000000000000000000000000162e42f >> 127;\\r\\n      if(x & 0x40000 > 0) r = r * 0x80000000000000000000000000b17217 >> 127;\\r\\n      if(x & 0x20000 > 0) r = r * 0x8000000000000000000000000058b90b >> 127;\\r\\n      if(x & 0x10000 > 0) r = r * 0x800000000000000000000000002c5c85 >> 127;\\r\\n      if(x & 0x8000 > 0) r = r * 0x80000000000000000000000000162e42 >> 127;\\r\\n      if(x & 0x4000 > 0) r = r * 0x800000000000000000000000000b1721 >> 127;\\r\\n      if(x & 0x2000 > 0) r = r * 0x80000000000000000000000000058b90 >> 127;\\r\\n      if(x & 0x1000 > 0) r = r * 0x8000000000000000000000000002c5c8 >> 127;\\r\\n      if(x & 0x800 > 0) r = r * 0x800000000000000000000000000162e4 >> 127;\\r\\n      if(x & 0x400 > 0) r = r * 0x8000000000000000000000000000b172 >> 127;\\r\\n      if(x & 0x200 > 0) r = r * 0x800000000000000000000000000058b9 >> 127;\\r\\n      if(x & 0x100 > 0) r = r * 0x80000000000000000000000000002c5c >> 127;\\r\\n      if(x & 0x80 > 0) r = r * 0x8000000000000000000000000000162e >> 127;\\r\\n      if(x & 0x40 > 0) r = r * 0x80000000000000000000000000000b17 >> 127;\\r\\n      if(x & 0x20 > 0) r = r * 0x8000000000000000000000000000058b >> 127;\\r\\n      if(x & 0x10 > 0) r = r * 0x800000000000000000000000000002c5 >> 127;\\r\\n      if(x & 0x8 > 0) r = r * 0x80000000000000000000000000000162 >> 127;\\r\\n      if(x & 0x4 > 0) r = r * 0x800000000000000000000000000000b1 >> 127;\\r\\n      if(x & 0x2 > 0) r = r * 0x80000000000000000000000000000058 >> 127;\\r\\n      if(x & 0x1 > 0) r = r * 0x8000000000000000000000000000002c >> 127; */\\r\\n\\r\\n            r >>= 127 - (x >> 121);\\r\\n\\r\\n            return uint128(r);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Ethereum smart contract library implementing Yield Math model.\\r\\n */\\r\\nlibrary YieldMath {\\r\\n    using Math64x64 for int128;\\r\\n    using Math64x64 for uint128;\\r\\n    using Math64x64 for int256;\\r\\n    using Math64x64 for uint256;\\r\\n    using Exp64x64 for uint128;\\r\\n\\r\\n    uint128 public constant ONE = 0x10000000000000000; // In 64.64\\r\\n    uint128 public constant TWO = 0x20000000000000000; // In 64.64\\r\\n    uint256 public constant MAX = type(uint128).max; // Used for overflow checks\\r\\n    uint256 public constant VAR = 1e12; // The logarithm math used is not precise to the wei, but can deviate up to 1e12 from the real value.\\r\\n\\r\\n    /**\\r\\n     * Calculate a YieldSpace pool invariant according to the whitepaper\\r\\n     */\\r\\n    function invariant(\\r\\n        uint128 baseReserves,\\r\\n        uint128 fyTokenReserves,\\r\\n        uint256 totalSupply,\\r\\n        uint128 timeTillMaturity,\\r\\n        int128 ts\\r\\n    ) public pure returns (uint128) {\\r\\n        if (totalSupply == 0) return 0;\\r\\n\\r\\n        unchecked {\\r\\n            // a = (1 - ts * timeTillMaturity)\\r\\n            int128 a = int128(ONE).sub(ts.mul(timeTillMaturity.fromUInt()));\\r\\n            require(a > 0, \\\"YieldMath: Too far from maturity\\\");\\r\\n\\r\\n            uint256 sum = (uint256(baseReserves.pow(uint128(a), ONE)) +\\r\\n                uint256(fyTokenReserves.pow(uint128(a), ONE))) >> 1;\\r\\n            require(sum < MAX, \\\"YieldMath: Sum overflow\\\");\\r\\n\\r\\n            uint256 result = uint256(uint128(sum).pow(ONE, uint128(a))) /\\r\\n                totalSupply;\\r\\n            require(result < MAX, \\\"YieldMath: Result overflow\\\");\\r\\n\\r\\n            return uint128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate the amount of fyToken a user would get for given amount of Base.\\r\\n     * https://www.desmos.com/calculator/5nf2xuy6yb\\r\\n     * @param baseReserves base reserves amount\\r\\n     * @param fyTokenReserves fyToken reserves amount\\r\\n     * @param baseAmount base amount to be traded\\r\\n     * @param timeTillMaturity time till maturity in seconds\\r\\n     * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n     * @param g fee coefficient, multiplied by 2^64\\r\\n     * @return the amount of fyToken a user would get for given amount of Base\\r\\n     */\\r\\n    function fyTokenOutForBaseIn(\\r\\n        uint128 baseReserves,\\r\\n        uint128 fyTokenReserves,\\r\\n        uint128 baseAmount,\\r\\n        uint128 timeTillMaturity,\\r\\n        int128 ts,\\r\\n        int128 g\\r\\n    ) public pure returns (uint128) {\\r\\n        unchecked {\\r\\n            uint128 a = _computeA(timeTillMaturity, ts, g);\\r\\n\\r\\n            // za = baseReserves ** a\\r\\n            uint256 za = baseReserves.pow(a, ONE);\\r\\n\\r\\n            // ya = fyTokenReserves ** a\\r\\n            uint256 ya = fyTokenReserves.pow(a, ONE);\\r\\n\\r\\n            // zx = baseReserves + baseAmount\\r\\n            uint256 zx = uint256(baseReserves) + uint256(baseAmount);\\r\\n            require(zx <= MAX, \\\"YieldMath: Too much base in\\\");\\r\\n\\r\\n            // zxa = zx ** a\\r\\n            uint256 zxa = uint128(zx).pow(a, ONE);\\r\\n\\r\\n            // sum = za + ya - zxa\\r\\n            uint256 sum = za + ya - zxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\\r\\n            require(sum <= MAX, \\\"YieldMath: Insufficient fyToken reserves\\\");\\r\\n\\r\\n            // result = fyTokenReserves - (sum ** (1/a))\\r\\n            uint256 result = uint256(fyTokenReserves) -\\r\\n                uint256(uint128(sum).pow(ONE, a));\\r\\n            require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n            result = result > VAR ? result - VAR : 0; // Subtract error guard, flooring the result at zero\\r\\n\\r\\n            return uint128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate the amount of base a user would get for certain amount of fyToken.\\r\\n     * https://www.desmos.com/calculator/6jlrre7ybt\\r\\n     * @param baseReserves base reserves amount\\r\\n     * @param fyTokenReserves fyToken reserves amount\\r\\n     * @param fyTokenAmount fyToken amount to be traded\\r\\n     * @param timeTillMaturity time till maturity in seconds\\r\\n     * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n     * @param g fee coefficient, multiplied by 2^64\\r\\n     * @return the amount of Base a user would get for given amount of fyToken\\r\\n     */\\r\\n    function baseOutForFYTokenIn(\\r\\n        uint128 baseReserves,\\r\\n        uint128 fyTokenReserves,\\r\\n        uint128 fyTokenAmount,\\r\\n        uint128 timeTillMaturity,\\r\\n        int128 ts,\\r\\n        int128 g\\r\\n    ) public pure returns (uint128) {\\r\\n        unchecked {\\r\\n            uint128 a = _computeA(timeTillMaturity, ts, g);\\r\\n\\r\\n            // za = baseReserves ** a\\r\\n            uint256 za = baseReserves.pow(a, ONE);\\r\\n\\r\\n            // ya = fyTokenReserves ** a\\r\\n            uint256 ya = fyTokenReserves.pow(a, ONE);\\r\\n\\r\\n            // yx = fyDayReserves + fyTokenAmount\\r\\n            uint256 yx = uint256(fyTokenReserves) + uint256(fyTokenAmount);\\r\\n            require(yx <= MAX, \\\"YieldMath: Too much fyToken in\\\");\\r\\n\\r\\n            // yxa = yx ** a\\r\\n            uint256 yxa = uint128(yx).pow(a, ONE);\\r\\n\\r\\n            // sum = za + ya - yxa\\r\\n            uint256 sum = za + ya - yxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\\r\\n            require(sum <= MAX, \\\"YieldMath: Insufficient base reserves\\\");\\r\\n\\r\\n            // result = baseReserves - (sum ** (1/a))\\r\\n            uint256 result = uint256(baseReserves) -\\r\\n                uint256(uint128(sum).pow(ONE, a));\\r\\n            require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n            result = result > VAR ? result - VAR : 0; // Subtract error guard, flooring the result at zero\\r\\n\\r\\n            return uint128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate the amount of fyToken a user could sell for given amount of Base.\\r\\n     * https://www.desmos.com/calculator/0rgnmtckvy\\r\\n     * @param baseReserves base reserves amount\\r\\n     * @param fyTokenReserves fyToken reserves amount\\r\\n     * @param baseAmount Base amount to be traded\\r\\n     * @param timeTillMaturity time till maturity in seconds\\r\\n     * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n     * @param g fee coefficient, multiplied by 2^64\\r\\n     * @return the amount of fyToken a user could sell for given amount of Base\\r\\n     */\\r\\n    function fyTokenInForBaseOut(\\r\\n        uint128 baseReserves,\\r\\n        uint128 fyTokenReserves,\\r\\n        uint128 baseAmount,\\r\\n        uint128 timeTillMaturity,\\r\\n        int128 ts,\\r\\n        int128 g\\r\\n    ) public pure returns (uint128) {\\r\\n        unchecked {\\r\\n            uint128 a = _computeA(timeTillMaturity, ts, g);\\r\\n\\r\\n            // za = baseReserves ** a\\r\\n            uint256 za = baseReserves.pow(a, ONE);\\r\\n\\r\\n            // ya = fyTokenReserves ** a\\r\\n            uint256 ya = fyTokenReserves.pow(a, ONE);\\r\\n\\r\\n            // zx = baseReserves - baseAmount\\r\\n            uint256 zx = uint256(baseReserves) - uint256(baseAmount);\\r\\n            require(zx <= MAX, \\\"YieldMath: Too much base out\\\");\\r\\n\\r\\n            // zxa = zx ** a\\r\\n            uint256 zxa = uint128(zx).pow(a, ONE);\\r\\n\\r\\n            // sum = za + ya - zxa\\r\\n            uint256 sum = za + ya - zxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\\r\\n            require(\\r\\n                sum <= MAX,\\r\\n                \\\"YieldMath: Resulting fyToken reserves too high\\\"\\r\\n            );\\r\\n\\r\\n            // result = (sum ** (1/a)) - fyTokenReserves\\r\\n            uint256 result = uint256(uint128(sum).pow(ONE, a)) -\\r\\n                uint256(fyTokenReserves);\\r\\n            require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n            result = result < MAX - VAR ? result + VAR : MAX; // Add error guard, ceiling the result at max\\r\\n\\r\\n            return uint128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate the amount of base a user would have to pay for certain amount of fyToken.\\r\\n     * https://www.desmos.com/calculator/ws5oqj8x5i\\r\\n     * @param baseReserves Base reserves amount\\r\\n     * @param fyTokenReserves fyToken reserves amount\\r\\n     * @param fyTokenAmount fyToken amount to be traded\\r\\n     * @param timeTillMaturity time till maturity in seconds\\r\\n     * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n     * @param g fee coefficient, multiplied by 2^64\\r\\n     * @return the amount of base a user would have to pay for given amount of\\r\\n     *         fyToken\\r\\n     */\\r\\n    function baseInForFYTokenOut(\\r\\n        uint128 baseReserves,\\r\\n        uint128 fyTokenReserves,\\r\\n        uint128 fyTokenAmount,\\r\\n        uint128 timeTillMaturity,\\r\\n        int128 ts,\\r\\n        int128 g\\r\\n    ) public pure returns (uint128) {\\r\\n        unchecked {\\r\\n            uint128 a = _computeA(timeTillMaturity, ts, g);\\r\\n\\r\\n            // za = baseReserves ** a\\r\\n            uint256 za = baseReserves.pow(a, ONE);\\r\\n\\r\\n            // ya = fyTokenReserves ** a\\r\\n            uint256 ya = fyTokenReserves.pow(a, ONE);\\r\\n\\r\\n            // yx = baseReserves - baseAmount\\r\\n            uint256 yx = uint256(fyTokenReserves) - uint256(fyTokenAmount);\\r\\n            require(yx <= MAX, \\\"YieldMath: Too much fyToken out\\\");\\r\\n\\r\\n            // yxa = yx ** a\\r\\n            uint256 yxa = uint128(yx).pow(a, ONE);\\r\\n\\r\\n            // sum = za + ya - yxa\\r\\n            uint256 sum = za + ya - yxa; // z < MAX, y < MAX, a < 1. It can only underflow, not overflow.\\r\\n            require(sum <= MAX, \\\"YieldMath: Resulting base reserves too high\\\");\\r\\n\\r\\n            // result = (sum ** (1/a)) - baseReserves\\r\\n            uint256 result = uint256(uint128(sum).pow(ONE, a)) -\\r\\n                uint256(baseReserves);\\r\\n            require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n            result = result < MAX - VAR ? result + VAR : MAX; // Add error guard, ceiling the result at max\\r\\n\\r\\n            return uint128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate the max amount of fyTokens that can be bought from the pool without making the interest rate negative.\\r\\n     * See section 6.3 of the YieldSpace White paper\\r\\n     * @param baseReserves Base reserves amount\\r\\n     * @param fyTokenReserves fyToken reserves amount\\r\\n     * @param timeTillMaturity time till maturity in seconds\\r\\n     * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n     * @param g fee coefficient, multiplied by 2^64\\r\\n     * @return max amount of fyTokens that can be bought from the pool\\r\\n     */\\r\\n    function maxFYTokenOut(\\r\\n        uint128 baseReserves,\\r\\n        uint128 fyTokenReserves,\\r\\n        uint128 timeTillMaturity,\\r\\n        int128 ts,\\r\\n        int128 g\\r\\n    ) public pure returns (uint128) {\\r\\n        if (baseReserves == fyTokenReserves) return 0;\\r\\n        unchecked {\\r\\n            uint128 a = _computeA(timeTillMaturity, ts, g);\\r\\n\\r\\n            // xa = baseReserves ** a\\r\\n            uint128 xa = baseReserves.pow(a, ONE);\\r\\n\\r\\n            // ya = fyTokenReserves ** a\\r\\n            uint128 ya = fyTokenReserves.pow(a, ONE);\\r\\n\\r\\n            int128 xy2 = (xa + ya).divu(TWO);\\r\\n\\r\\n            uint256 inaccessible = uint256(uint128(xy2).pow(ONE, a));\\r\\n            require(inaccessible <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n            inaccessible = inaccessible < MAX - VAR ? inaccessible + VAR : MAX; // Add error guard, ceiling the result at max\\r\\n\\r\\n            return\\r\\n                uint128(inaccessible) > fyTokenReserves\\r\\n                    ? 0\\r\\n                    : fyTokenReserves - uint128(inaccessible);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate the max amount of fyTokens that can be sold to into the pool.\\r\\n     * @param baseReserves Base reserves amount\\r\\n     * @param fyTokenReserves fyToken reserves amount\\r\\n     * @param timeTillMaturity time till maturity in seconds\\r\\n     * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n     * @param g fee coefficient, multiplied by 2^64\\r\\n     * @return max amount of fyTokens that can be sold to into the pool\\r\\n     */\\r\\n    function maxFYTokenIn(\\r\\n        uint128 baseReserves,\\r\\n        uint128 fyTokenReserves,\\r\\n        uint128 timeTillMaturity,\\r\\n        int128 ts,\\r\\n        int128 g\\r\\n    ) public pure returns (uint128) {\\r\\n        unchecked {\\r\\n            uint128 b = _computeB(timeTillMaturity, ts, g);\\r\\n\\r\\n            // xa = baseReserves ** a\\r\\n            uint128 xa = baseReserves.pow(b, ONE);\\r\\n\\r\\n            // ya = fyTokenReserves ** a\\r\\n            uint128 ya = fyTokenReserves.pow(b, ONE);\\r\\n\\r\\n            uint256 result = (xa + ya).pow(ONE, b) - fyTokenReserves;\\r\\n            require(result <= MAX, \\\"YieldMath: Rounding induced error\\\");\\r\\n\\r\\n            result = result > VAR ? result - VAR : 0; // Subtract error guard, flooring the result at zero\\r\\n\\r\\n            return uint128(result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate the max amount of base that can be sold to into the pool without making the interest rate negative.\\r\\n     * @param baseReserves Base reserves amount\\r\\n     * @param fyTokenReserves fyToken reserves amount\\r\\n     * @param timeTillMaturity time till maturity in seconds\\r\\n     * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n     * @param g fee coefficient, multiplied by 2^64\\r\\n     * @return max amount of base that can be sold to into the pool\\r\\n     */\\r\\n    function maxBaseIn(\\r\\n        uint128 baseReserves,\\r\\n        uint128 fyTokenReserves,\\r\\n        uint128 timeTillMaturity,\\r\\n        int128 ts,\\r\\n        int128 g\\r\\n    ) public pure returns (uint128) {\\r\\n        uint128 _maxFYTokenOut = maxFYTokenOut(\\r\\n            baseReserves,\\r\\n            fyTokenReserves,\\r\\n            timeTillMaturity,\\r\\n            ts,\\r\\n            g\\r\\n        );\\r\\n        if (_maxFYTokenOut > 0)\\r\\n            return\\r\\n                baseInForFYTokenOut(\\r\\n                    baseReserves,\\r\\n                    fyTokenReserves,\\r\\n                    _maxFYTokenOut,\\r\\n                    timeTillMaturity,\\r\\n                    ts,\\r\\n                    g\\r\\n                );\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate the max amount of base that can be bought from the pool.\\r\\n     * @param baseReserves Base reserves amount\\r\\n     * @param fyTokenReserves fyToken reserves amount\\r\\n     * @param timeTillMaturity time till maturity in seconds\\r\\n     * @param ts time till maturity coefficient, multiplied by 2^64\\r\\n     * @param g fee coefficient, multiplied by 2^64\\r\\n     * @return max amount of base that can be bought from the pool\\r\\n     */\\r\\n    function maxBaseOut(\\r\\n        uint128 baseReserves,\\r\\n        uint128 fyTokenReserves,\\r\\n        uint128 timeTillMaturity,\\r\\n        int128 ts,\\r\\n        int128 g\\r\\n    ) public pure returns (uint128) {\\r\\n        uint128 _maxFYTokenIn = maxFYTokenIn(\\r\\n            baseReserves,\\r\\n            fyTokenReserves,\\r\\n            timeTillMaturity,\\r\\n            ts,\\r\\n            g\\r\\n        );\\r\\n        return\\r\\n            baseOutForFYTokenIn(\\r\\n                baseReserves,\\r\\n                fyTokenReserves,\\r\\n                _maxFYTokenIn,\\r\\n                timeTillMaturity,\\r\\n                ts,\\r\\n                g\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _computeA(\\r\\n        uint128 timeTillMaturity,\\r\\n        int128 ts,\\r\\n        int128 g\\r\\n    ) private pure returns (uint128) {\\r\\n        unchecked {\\r\\n            // t = ts * timeTillMaturity\\r\\n            int128 t = ts.mul(timeTillMaturity.fromUInt());\\r\\n            require(t >= 0, \\\"YieldMath: t must be positive\\\"); // Meaning neither T or ts can be negative\\r\\n\\r\\n            // a = (1 - gt)\\r\\n            int128 a = int128(ONE).sub(g.mul(t));\\r\\n            require(a > 0, \\\"YieldMath: Too far from maturity\\\");\\r\\n            require(a <= int128(ONE), \\\"YieldMath: g must be positive\\\");\\r\\n\\r\\n            return uint128(a);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _computeB(\\r\\n        uint128 timeTillMaturity,\\r\\n        int128 ts,\\r\\n        int128 g\\r\\n    ) private pure returns (uint128) {\\r\\n        unchecked {\\r\\n            // t = ts * timeTillMaturity\\r\\n            int128 t = ts.mul(timeTillMaturity.fromUInt());\\r\\n            require(t >= 0, \\\"YieldMath: t must be positive\\\"); // Meaning neither T or ts can be negative\\r\\n\\r\\n            // b = (1 - t/g)\\r\\n            int128 b = int128(ONE).sub(t.div(g));\\r\\n            require(b > 0, \\\"YieldMath: Too far from maturity\\\");\\r\\n            require(b <= int128(ONE), \\\"YieldMath: g must be positive\\\");\\r\\n\\r\\n            return uint128(b);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2d06cf25795534a33f68cd9ac20c9a3b1e57f2f2d0fdaa5ed5172b7c29201298\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001315760003560e01c80156200013657806310ab9432146200015d578063209b6738146200018557806344faded014620001ab578063531aa03e14620001c4578063559742d914620001db5780635909c12f14620001365780635ba5e9f014620001f2578063687f0e4c14620002095780636970a9241462000220578063a4f0d7d01462000242578063ad82110f1462000252578063ae93c1b51462000269578063b51616aa1462000280578063bdd8a3661462000294578063c2df15d714620002a9578063d0d3fb8014620002c0578063d8406cb414620002d9578063de02cde714620002ed578063e34336151462000304578063e86d60bf146200031b578063effae3531462000329578063ffffffff1462000242575b600080fd5b6200013f600081565b6040516001600160e01b031990911681526020015b60405180910390f35b620001746200016e36600462000d1f565b62000340565b604051901515815260200162000154565b6200019c6200019636600462000ba4565b62000357565b60405162000154919062000d8f565b620001c2620001bc36600462000d1f565b62000365565b005b6200019c620001d536600462000ba4565b620003b5565b620001c2620001ec36600462000d01565b620003de565b6200013f6200020336600462000d01565b62000425565b620001c26200021a36600462000d1f565b62000432565b6004546200022e90600f0b81565b604051600f9190910b815260200162000154565b6200013f6001600160e01b031981565b620001c26200026336600462000bdc565b62000491565b620001c26200027a36600462000d3e565b62000525565b6002546200019c906001600160a01b031681565b6003546200022e90600160801b9004600f0b81565b620001c2620002ba36600462000cc9565b62000560565b620002ca620006b8565b60405190815260200162000154565b6001546200019c906001600160a01b031681565b620001c2620002fe36600462000d1f565b620006e7565b6200019c6200031536600462000ba4565b62000722565b6003546200022e90600f0b81565b620001c26200033a36600462000bdc565b62000859565b60006200034e8383620008df565b90505b92915050565b60006200034e838362000914565b816200037c6200037582620009d6565b33620008df565b620003a45760405162461bcd60e51b81526004016200039b9062000da3565b60405180910390fd5b620003b08383620009f8565b505050565b6000620003c3838362000914565b90506001600160a01b0381163b620003515750600092915050565b80620003ee6200037582620009d6565b6200040d5760405162461bcd60e51b81526004016200039b9062000da3565b62000421826001600160e01b031962000a6a565b5050565b60006200035182620009d6565b6001600160a01b0381163314620004855760405162461bcd60e51b81526020600482015260166024820152752932b737bab731b29037b7363c903337b91039b2b63360511b60448201526064016200039b565b620004218282620009f8565b60005b8251811015620003b057620004c962000375848381518110620004bb57620004bb62000e18565b6020026020010151620009d6565b620004e85760405162461bcd60e51b81526004016200039b9062000da3565b6200051083828151811062000501576200050162000e18565b602002602001015183620009f8565b806200051c8162000dee565b91505062000494565b81620005356200037582620009d6565b620005545760405162461bcd60e51b81526004016200039b9062000da3565b620003b0838362000a6a565b620005786000356001600160e01b03191633620008df565b620005975760405162461bcd60e51b81526004016200039b9062000dc7565b8161747360f01b1415620005ca57600380546001600160801b0319166001600160801b03600f84900b1617905562000678565b8161673160f01b1415620005fd5760038054600f83900b6001600160801b03908116600160801b02911617905562000678565b8161339960f11b14156200063057600480546001600160801b0319166001600160801b03600f84900b1617905562000678565b60405162461bcd60e51b815260206004820152601c60248201527b2837b7b61d102ab73932b1b7b3b734bd32b2103830b930b6b2ba32b960211b60448201526064016200039b565b60408051838152600f83900b60208201527f59ee970f5b28ebafebe6b5c0b6e43a9c66ae921f7d273677552b0eec5fad4ea4910160405180910390a15050565b604051620006c96020820162000b60565b6020820181038252601f19601f820116604052508051906020012081565b81620006f76200037582620009d6565b620007165760405162461bcd60e51b81526004016200039b9062000da3565b620003b0838362000aec565b60006200073c6000356001600160e01b03191633620008df565b6200075b5760405162461bcd60e51b81526004016200039b9062000dc7565b600180546001600160a01b038086166001600160a01b0319928316179092556002805492851692909116919091179055604051600090620007a3908590859060200162000d6d565b60405160208183030381529060405280519060200120604051620007c79062000b60565b8190604051809103906000f5905080158015620007e8573d6000803e3d6000fd5b50600180546001600160a01b03199081169091556002805490911690556040519091506001600160a01b0384811691908616907f9c5d829b9b23efc461f9aeef91979ec04bb903feb3bee4f26d22114abfc7335b906200084a90859062000d8f565b60405180910390a39392505050565b60005b8251811015620003b0576200088362000375848381518110620004bb57620004bb62000e18565b620008a25760405162461bcd60e51b81526004016200039b9062000da3565b620008ca838281518110620008bb57620008bb62000e18565b60200260200101518362000aec565b80620008d68162000dee565b9150506200085c565b6001600160e01b031982166000908152602081815260408083206001600160a01b038516845290915290205460ff1692915050565b600060ff60f81b3084846040516020016200093192919062000d6d565b6040516020818303038152906040528051906020012060405180602001620009599062000b60565b6020820181038252601f19601f8201166040525080519060200120604051602001620009b794939291906001600160f81b031994909416845260609290921b6001600160601b03191660018401526015830152603582015260550190565b60408051601f1981840301815291905280516020909101209392505050565b6001600160e01b03191660009081526020819052604090206001015460e01b90565b62000a048282620008df565b1562000421576001600160e01b031982166000818152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339391927f4ddc7b757e7bdd7254a9cd39452d307a52761bc824625c6a33104a075d8099e691a45050565b6001600160e01b0319811662000a8083620009d6565b6001600160e01b0319161462000421576001600160e01b0319828116600081815260208190526040808220600101805463ffffffff191660e087901c17905551928416927fd348e2220a50b4500ec353f6e802d2f14dd1b5d6786148fd1bbcc570bf92d4739190a35050565b62000af88282620008df565b62000421576001600160e01b031982166000818152602081815260408083206001600160a01b0386168085529252808320805460ff1916600117905551339391927fe6231789d19137da31d0550f4ba9ee379020a8cfb64cb79bf1790c996d2e616591a45050565b6144fa8062000e4583390190565b80356001600160a01b038116811462000b8657600080fd5b919050565b80356001600160e01b03198116811462000b8657600080fd5b6000806040838503121562000bb857600080fd5b62000bc38362000b6e565b915062000bd36020840162000b6e565b90509250929050565b6000806040838503121562000bf057600080fd5b82356001600160401b038082111562000c0857600080fd5b818501915085601f83011262000c1d57600080fd5b813560208282111562000c345762000c3462000e2e565b8160051b604051601f19603f8301168101818110868211171562000c5c5762000c5c62000e2e565b604052838152828101945085830182870184018b101562000c7c57600080fd5b600096505b8487101562000caa5762000c958162000b8b565b86526001969096019594830194830162000c81565b50965062000cbc905087820162000b6e565b9450505050509250929050565b6000806040838503121562000cdd57600080fd5b82359150602083013580600f0b811462000cf657600080fd5b809150509250929050565b60006020828403121562000d1457600080fd5b6200034e8262000b8b565b6000806040838503121562000d3357600080fd5b62000bc38362000b8b565b6000806040838503121562000d5257600080fd5b62000d5d8362000b8b565b915062000bd36020840162000b8b565b6001600160601b0319606093841b811682529190921b16601482015260280190565b6001600160a01b0391909116815260200190565b6020808252600a908201526927b7363c9030b236b4b760b11b604082015260600190565b6020808252600d908201526c1058d8d95cdcc819195b9a5959609a1b604082015260600190565b600060001982141562000e1157634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe61020060405260036101c0819052623f3f3f60e81b6101e0908152620000279190816200095d565b50604080518082019091526003808252623f3f3f60e81b602090920191825262000054916004916200095d565b506005805460ff191660121790557f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c96080523480156200009357600080fd5b5073__$2e3424cef6f63b39e0f8625c29becf4d47$__63e54f7522336001600160a01b031663b51616aa6040518163ffffffff1660e01b815260040160206040518083038186803b158015620000e857600080fd5b505afa158015620000fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000123919062000a03565b6040518263ffffffff1660e01b815260040162000141919062000c60565b60006040518083038186803b1580156200015a57600080fd5b505af41580156200016f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000199919081019062000a5a565b604051602001620001ab919062000c1d565b60405160208183030381529060405273__$2e3424cef6f63b39e0f8625c29becf4d47$__63033b9b4f336001600160a01b031663b51616aa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200020e57600080fd5b505afa15801562000223573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000249919062000a03565b6040518263ffffffff1660e01b815260040162000267919062000c60565b60006040518083038186803b1580156200028057600080fd5b505af415801562000295573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620002bf919081019062000a5a565b604051602001620002d1919062000bf5565b60405160208183030381529060405273__$2e3424cef6f63b39e0f8625c29becf4d47$__638ee573ac336001600160a01b031663d8406cb46040518163ffffffff1660e01b815260040160206040518083038186803b1580156200033457600080fd5b505afa15801562000349573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200036f919062000a03565b6040518263ffffffff1660e01b81526004016200038d919062000c60565b60206040518083038186803b158015620003a657600080fd5b505af4158015620003bb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003e1919062000b2c565b8282828260039080519060200190620003fc9291906200095d565b508151620004129060049060208501906200095d565b506005805460ff191660ff9290921691909117905550504660c08190526200043a90620008a7565b60a0818152505050505060003390506000816001600160a01b031663b51616aa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200048557600080fd5b505afa1580156200049a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004c0919062000a03565b90506000826001600160a01b031663d8406cb46040518163ffffffff1660e01b815260040160206040518083038186803b158015620004fe57600080fd5b505afa15801562000513573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000539919062000a03565b6001600160601b0319606084811b82166101a05282901b16610180526040805163204f83f960e01b815290519192506000916001600160a01b0385169163204f83f9916004808301926020929190829003018186803b1580156200059c57600080fd5b505afa158015620005b1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005d7919062000b12565b905063ffffffff8111156200063e5760405162461bcd60e51b8152602060048201526024808201527f506f6f6c3a204d6174757269747920746f6f2066617220696e207468652066756044820152637475726560e01b606482015260840160405180910390fd5b8063ffffffff166101408163ffffffff1660e01b81525050836001600160a01b031663e86d60bf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200069057600080fd5b505afa158015620006a5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006cb919062000a35565b600f0b60e081600f0b60801b81525050836001600160a01b031663bdd8a3666040518163ffffffff1660e01b815260040160206040518083038186803b1580156200071557600080fd5b505afa1580156200072a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000750919062000a35565b600f0b61010081600f0b60801b81525050836001600160a01b0316636970a9246040518163ffffffff1660e01b815260040160206040518083038186803b1580156200079b57600080fd5b505afa158015620007b0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007d6919062000a35565b600f90810b900b60801b610120526040516323b95ceb60e21b815273__$2e3424cef6f63b39e0f8625c29becf4d47$__90638ee573ac906200081d90859060040162000c60565b60206040518083038186803b1580156200083657600080fd5b505af41580156200084b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000871919062000b2c565b6200087e90601262000d7e565b6200088b90600a62000cbd565b60a01b6001600160a01b031916610160525062000e4092505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6003604051620008db919062000b51565b60408051918290038220828201825260018352603160f81b602093840152815180840194909452838201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606084015260808301949094523060a0808401919091528451808403909101815260c09092019093528051920191909120919050565b8280546200096b9062000dd7565b90600052602060002090601f0160209004810192826200098f5760008555620009da565b82601f10620009aa57805160ff1916838001178555620009da565b82800160010185558215620009da579182015b82811115620009da578251825591602001919060010190620009bd565b50620009e8929150620009ec565b5090565b5b80821115620009e85760008155600101620009ed565b60006020828403121562000a1657600080fd5b81516001600160a01b038116811462000a2e57600080fd5b9392505050565b60006020828403121562000a4857600080fd5b815180600f0b811462000a2e57600080fd5b60006020828403121562000a6d57600080fd5b81516001600160401b038082111562000a8557600080fd5b818401915084601f83011262000a9a57600080fd5b81518181111562000aaf5762000aaf62000e2a565b604051601f8201601f19908116603f0116810190838211818310171562000ada5762000ada62000e2a565b8160405282815287602084870101111562000af457600080fd5b62000b0783602083016020880162000da4565b979650505050505050565b60006020828403121562000b2557600080fd5b5051919050565b60006020828403121562000b3f57600080fd5b815160ff8116811462000a2e57600080fd5b600080835481600182811c91508083168062000b6e57607f831692505b602080841082141562000b8f57634e487b7160e01b86526022600452602486fd5b81801562000ba6576001811462000bb85762000be7565b60ff1986168952848901965062000be7565b60008a81526020902060005b8681101562000bdf5781548b82015290850190830162000bc4565b505084890196505b509498975050505050505050565b6000825162000c0981846020870162000da4565b6104c560f41b920191825250600201919050565b6502cb4b2b632160d51b81526000825162000c4081600685016020870162000da4565b68102628102a37b5b2b760b91b6006939091019283015250600f01919050565b6001600160a01b0391909116815260200190565b600181815b8085111562000cb557816000190482111562000c995762000c9962000e14565b8085161562000ca757918102915b93841c939080029062000c79565b509250929050565b600062000a2e60ff84168360008262000cd95750600162000d78565b8162000ce85750600062000d78565b816001811462000d01576002811462000d0c5762000d2c565b600191505062000d78565b60ff84111562000d205762000d2062000e14565b50506001821b62000d78565b5060208310610133831016604e8410600b841016171562000d51575081810a62000d78565b62000d5d838362000c74565b806000190482111562000d745762000d7462000e14565b0290505b92915050565b600060ff821660ff84168082101562000d9b5762000d9b62000e14565b90039392505050565b60005b8381101562000dc157818101518382015260200162000da7565b8381111562000dd1576000848401525b50505050565b600181811c9082168062000dec57607f821691505b6020821081141562000e0e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60805160a05160c05160e05160801c6101005160801c6101205160801c6101405160e01c6101605160a01c6101805160601c6101a05160601c6134bd6200103d600039600081816105d601528181610d6c01528181610e4e0152818161129d0152818161171801528181611e0b015261228e0152600081816103ac015281816109bc01528181610bb80152818161113f01528181611678015281816119c201528181611dd1015261267e0152600081816103e80152818161142f01528181611480015281816114b301528181611b9001528181611bf301528181611c4301528181612062015281816120b3015281816120e6015281816123880152818161276b015281816127bc01526127ef0152600081816102d401528181610a0801528181610c0401528181610db8015281816112e9015281816113e0015281816114df01528181611a1901528181611c8401528181611e5201528181612015015281816121120152818161233b0152818161271c015261281b01526000818161042701528181611ccb015261215901526000818161052d01528181611526015261286201526000818161063e0152818161150501528181611caa015281816121380152612841015260008181610574015281816107f30152610f6f0152600081816108290152610fa401526000818161035e0152610ee601526134bd6000f3fe608060405234801561001057600080fd5b50600436106101e35760003560e01c806306fdde03146101e8578063095ea7b3146102065780630a0d86861461022957806313e7bc8c1461026457806318160ddd1461028f5780631eb728fc146102a1578063204f83f9146102cf578063210a49911461030b57806323b872dd1461033357806327bab0631461034657806330adf81f14610359578063313ce567146103805780633644e5151461039f5780635001f3b5146103a757806354fd4d50146103db578063683dd191146103e35780636970a9241461042257806370a082311461045c5780637ecebe001461048557806395d89b41146104a55780639ebdc9b4146104ad578063a9059cbb146104c0578063aea0f201146104d3578063b0f28921146104dc578063b3f1c93d146104ef578063bc3d1c4e14610502578063bcc1694f14610515578063bdd8a36614610528578063c03edd221461054f578063cd0d00961461056f578063d3d00f2414610596578063d505accf146105a9578063d7020d0a146105be578063dc3bfba9146105d1578063dd363371146105f8578063dd62ed3e14610600578063e86d60bf14610639578063fa29687914610660578063fdb0732d14610673578063fe2846b114610686578063fff6cae914610699575b600080fd5b6101f06106a1565b6040516101fd9190612fa0565b60405180910390f35b610219610214366004612d56565b61072f565b60405190151581526020016101fd565b600754604080516001600160701b038084168252600160701b8404166020820152600160e01b90920463ffffffff16908201526060016101fd565b610277610272366004612e81565b610743565b6040516001600160801b0390911681526020016101fd565b6000545b6040519081526020016101fd565b6102b46102af366004612c16565b610770565b604080519384526020840192909252908201526060016101fd565b6102f67f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016101fd565b61031e610319366004612d80565b610793565b604080519283526020830191909152016101fd565b610219610341366004612b98565b6107b2565b610277610354366004612e81565b6107ca565b6102937f000000000000000000000000000000000000000000000000000000000000000081565b60055461038d9060ff1681565b60405160ff90911681526020016101fd565b6102936107ef565b6103ce7f000000000000000000000000000000000000000000000000000000000000000081565b6040516101fd9190612f8c565b6101f061084b565b61040a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160601b0390911681526020016101fd565b6104497f000000000000000000000000000000000000000000000000000000000000000081565b604051600f9190910b81526020016101fd565b61029361046a366004612b4a565b6001600160a01b031660009081526001602052604090205490565b610293610493366004612b4a565b60066020526000908152604090205481565b6101f0610866565b6102776104bb366004612d0d565b610873565b6102196104ce366004612d56565b610a76565b61029360085481565b6102776104ea366004612e81565b610a83565b6102b46104fd366004612bd4565b610aa8565b610277610510366004612cd6565b610acb565b610277610523366004612cd6565b610c73565b6104497f000000000000000000000000000000000000000000000000000000000000000081565b610557610e04565b6040516001600160701b0390911681526020016101fd565b6102937f000000000000000000000000000000000000000000000000000000000000000081565b6102776105a4366004612b4a565b610e0e565b6105bc6105b7366004612c63565b610e7a565b005b6102b46105cc366004612bd4565b6110e9565b6103ce7f000000000000000000000000000000000000000000000000000000000000000081565b6105576110fc565b61029361060e366004612b65565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6104497f000000000000000000000000000000000000000000000000000000000000000081565b61027761066e366004612b4a565b611106565b610277610681366004612e81565b611166565b610277610694366004612d0d565b61118b565b6105bc611335565b600380546106ae90613332565b80601f01602080910402602001604051908101604052809291908181526020018280546106da90613332565b80156107275780601f106106fc57610100808354040283529160200191610727565b820191906000526020600020905b81548152906001019060200180831161070a57829003601f168201915b505050505081565b600061073c338484611373565b9392505050565b6007546000906001600160701b0380821691600160701b9004166107688483836113dc565b949350505050565b60008060006107828888888888611648565b925092509250955095509592505050565b6000806107a585600060018787611a8f565b5090969095509350505050565b60006107be8483611ebc565b50610768848484611f64565b6007546000906001600160701b0380821691600160701b900416610768848383612011565b60007f0000000000000000000000000000000000000000000000000000000000000000461461082657610821466121f3565b905090565b507f000000000000000000000000000000000000000000000000000000000000000090565b6040805180820190915260018152603160f81b602082015290565b600480546106ae90613332565b60008061087e612284565b6007546001600160701b03918216925080821691600160701b9091041660006108a8878484612337565b90506001600160801b0381166108c76001600160701b038416866132ae565b6001600160801b031610156109215760405162461bcd60e51b815260206004820152601b60248201527a2837b7b61d102737ba1032b737bab3b410333caa37b5b2b71034b760291b60448201526064015b60405180910390fd5b856001600160801b0316816001600160801b0316111561097f5760405162461bcd60e51b81526020600482015260196024820152782837b7b61d102a37b79036bab1b410333caa37b5b2b71034b760391b6044820152606401610918565b6109af610995886001600160701b0386166132ae565b6109a8836001600160701b038616613195565b85856123cc565b6109ec6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016896001600160801b038a1661254c565b6001600160a01b038816336000805160206134488339815191527f0000000000000000000000000000000000000000000000000000000000000000610a396001600160801b038c16612641565b610a4b866001600160801b0316612641565b610a5490613388565b604051610a6393929190613150565b60405180910390a3979650505050505050565b600061073c338484611f64565b6007546000906001600160701b0380821691600160701b900416610768848383612337565b6000806000610abb878760008888611648565b9250925092509450945094915050565b6007546000906001600160701b0380821691600160701b90041682610aee612284565b90506000610afa612677565b90506000610b088484613286565b6001600160701b031690506000610b20828787612011565b9050876001600160801b0316816001600160801b03161015610b845760405162461bcd60e51b815260206004820152601e60248201527f506f6f6c3a204e6f7420656e6f7567682062617365206f627461696e656400006044820152606401610918565b610bab610b9a826001600160701b0386166132ae565b856001600160701b031688886123cc565b610be86001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168a6001600160801b03841661254c565b6001600160a01b038916336000805160206134488339815191527f0000000000000000000000000000000000000000000000000000000000000000610c356001600160801b038616612641565b610c47876001600160801b0316612641565b610c5090613388565b604051610c5f93929190613150565b60405180910390a398975050505050505050565b6007546000906001600160701b0380821691600160701b90041682610c96612677565b90506000610ca2612284565b90506000610cb08584613286565b6001600160701b031690506000610cc88287856113dc565b9050876001600160801b0316816001600160801b03161015610d365760405162461bcd60e51b815260206004820152602160248201527f506f6f6c3a204e6f7420656e6f756768206679546f6b656e206f627461696e656044820152601960fa1b6064820152608401610918565b610d5f846001600160701b031682856001600160701b0316610d5891906132ae565b88886123cc565b610d9c6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168a6001600160801b03841661254c565b6001600160a01b038916336000805160206134488339815191527f0000000000000000000000000000000000000000000000000000000000000000610de96001600160801b038716612641565b610df290613388565b610c50866001600160801b0316612641565b6000610821612284565b600754600090600160701b90046001600160701b0316610e2c612284565b610e369190613286565b6001600160701b03169050610e756001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016838361254c565b919050565b42841015610eca5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610918565b6001600160a01b038716600090815260066020526040812080547f0000000000000000000000000000000000000000000000000000000000000000918a918a918a919086610f178361336d565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905060007f00000000000000000000000000000000000000000000000000000000000000004614610fa257610f9d466121f3565b610fc4565b7f00000000000000000000000000000000000000000000000000000000000000005b60405161190160f01b602082015260228101919091526042810183905260620160408051601f198184030181528282528051602091820120600080855291840180845281905260ff89169284019290925260608301879052608083018690529092509060019060a0016020604051602081039080840390855afa15801561104f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906110855750896001600160a01b0316816001600160a01b0316145b6110d15760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610918565b6110dc8a8a8a611373565b5050505050505050505050565b6000806000610abb878760008888611a8f565b6000610821612677565b6007546000906001600160701b031661111d612677565b6111279190613286565b6001600160701b03169050610e756001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016838361254c565b6007546000906001600160701b0380821691600160701b900416610768848383612718565b600080611196612677565b6007546001600160701b03918216925080821691600160701b9091041660006111c0878484612718565b90506001600160801b0381166111df6001600160701b038516866132ae565b6001600160801b031610156112065760405162461bcd60e51b815260040161091890613057565b856001600160801b0316816001600160801b031611156112675760405162461bcd60e51b815260206004820152601c60248201527b2837b7b61d102a37b79036bab1b4103130b9b2903a37b5b2b71034b760211b6044820152606401610918565b61129061127d826001600160701b038616613195565b6109a8896001600160701b0386166132ae565b6112cd6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016896001600160801b038a1661254c565b6001600160a01b038816336000805160206134488339815191527f000000000000000000000000000000000000000000000000000000000000000061131a6001600160801b038616612641565b61132390613388565b610a548c6001600160801b0316612641565b611371611340612677565b6001600160701b0316611351612284565b6007546001600160701b039182169181811691600160701b9004166123cc565b565b6001600160a01b03838116600081815260026020908152604080832094871680845294825280832086905551858152919392917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a35060019392505050565b60007f000000000000000000000000000000000000000000000000000000000000000063ffffffff1642106114235760405162461bcd60e51b815260040161091890612fd3565b60006001600160601b037f00000000000000000000000000000000000000000000000000000000000000001673__$14acc0473240a59aaba421130bb5369487$__63405289326114738388613212565b6114a66001600160601b037f00000000000000000000000000000000000000000000000000000000000000001688613212565b6114d96001600160601b037f0000000000000000000000000000000000000000000000000000000000000000168b613241565b611503427f00000000000000000000000000000000000000000000000000000000000000006132e5565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518763ffffffff1660e01b8152600401611566969594939291906130c4565b60206040518083038186803b15801561157e57600080fd5b505af4158015611592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b69190612e9e565b6115c091906131d8565b90506115d5856001600160701b038616613195565b6001600160801b03166115f1826001600160701b0386166132ae565b6001600160801b031610156107685760405162461bcd60e51b815260206004820152601d60248201527f506f6f6c3a206679546f6b656e2062616c616e636520746f6f206c6f770000006044820152606401610918565b60008054600754829182916001600160701b0380821691600160701b9004168361167284836132ce565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016116c29190612f8c565b60206040518083038186803b1580156116da57600080fd5b505afa1580156116ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117129190612ebb565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016117629190612f8c565b60206040518083038186803b15801561177a57600080fd5b505afa15801561178e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b29190612ebb565b905060006117c96001600160701b038716846132ce565b905083158061182d57508b846117f06001600160701b038916670de0b6b3a7640000613267565b6117fa91906131fe565b1015801561182d57508a846118206001600160701b038916670de0b6b3a7640000613267565b61182a91906131fe565b11155b6118495760405162461bcd60e51b81526004016109189061308e565b866118595780995089975061194e565b83611886579850886001600160701b0386166118758289613267565b61187f91906131fe565b975061194e565b60008d156118bf576118b361189a8f61291b565b886001600160701b0316886001600160701b0316612718565b6001600160801b031690505b6118c985846132ce565b99506118d58e866132ce565b8a8f6118e191906131c0565b6118eb908a613267565b6118f591906131fe565b9850878961190c836001600160701b038b166131c0565b6119169190613267565b61192091906131fe565b61192a90826131c0565b9a508a82101561194c5760405162461bcd60e51b815260040161091890613057565b505b61198d61196c6119678c6001600160701b038a166131c0565b61291b565b610d588a6119838d6001600160701b038b166131c0565b61196791906131c0565b6119978f89612944565b5060006119a48b836132ce565b11156119e9576119e98e6119b88c846132ce565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016919061254c565b60006001600160a01b03168f6001600160a01b0316336001600160a01b03166000805160206134288339815191527f0000000000000000000000000000000000000000000000000000000000000000611a418f6129cc565b611a4a906133b0565b611a538f6129cc565b611a5c906133b0565b611a658f6129cc565b604051611a759493929190613172565b60405180910390a450505050505050955095509592505050565b3060009081526001602052604081205481546007549192918291906001600160701b0380821691600160701b90041683611ac984836132ce565b9050801580611b2d57508881611af06001600160701b038616670de0b6b3a7640000613267565b611afa91906131fe565b10158015611b2d57508781611b206001600160701b038616670de0b6b3a7640000613267565b611b2a91906131fe565b11155b611b495760405162461bcd60e51b81526004016109189061308e565b83611b5d6001600160701b03851689613267565b611b6791906131fe565b955083611b748289613267565b611b7e91906131fe565b94508915611d7f576001600160601b037f00000000000000000000000000000000000000000000000000000000000000001673__$14acc0473240a59aaba421130bb5369487$__63e03824d682611bd48a61291b565b611be7906001600160701b0389166132ae565b611bf19190613241565b7f00000000000000000000000000000000000000000000000000000000000000006001600160601b0316611c248a61291b565b611c37906001600160701b0389166132ae565b611c419190613241565b7f00000000000000000000000000000000000000000000000000000000000000006001600160601b0316611c748b61291b565b611c7e9190613241565b611ca8427f00000000000000000000000000000000000000000000000000000000000000006132e5565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518763ffffffff1660e01b8152600401611d0b9695949392919061310f565b60206040518083038186803b158015611d2357600080fd5b505af4158015611d37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5b9190612e9e565b611d6591906131d8565b611d78906001600160801b0316876131c0565b9550600094505b611db9611d98611967886001600160701b0387166132ce565b6109a889611daf896001600160701b0388166132ce565b61196791906132ce565b611dc330886129f5565b50611df86001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168d8861254c565b8415611e3257611e326001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168c8761254c565b6001600160a01b03808c16908d16336000805160206134288339815191527f0000000000000000000000000000000000000000000000000000000000000000611e7a8b6129cc565b611e838b6129cc565b611e8c8e6129cc565b611e95906133b0565b604051611ea59493929190613172565b60405180910390a450505050955095509592505050565b60006001600160a01b0383163314611f5b576001600160a01b03831660009081526002602090815260408083203384529091529020546000198114611f595782811015611f4a5760405162461bcd60e51b815260206004820152601c60248201527b115490cc8c0e88125b9cdd59999a58da595b9d08185c1c1c9bdd985b60221b6044820152606401610918565b611f578433858403611373565b505b505b50600192915050565b6001600160a01b038316600090815260016020526040812054821115611f9c5760405162461bcd60e51b815260040161091890613022565b6001600160a01b038085166000908152600160205260408082208054869003905591851681522054611fcf9083906131c0565b6001600160a01b038085166000818152600160205260409081902093909355915190861690600080516020613468833981519152906113ca9086815260200190565b60007f000000000000000000000000000000000000000000000000000000000000000063ffffffff1642106120585760405162461bcd60e51b815260040161091890612fd3565b6001600160601b037f00000000000000000000000000000000000000000000000000000000000000001673__$14acc0473240a59aaba421130bb5369487$__63e03824d66120a68387613212565b6120d96001600160601b037f00000000000000000000000000000000000000000000000000000000000000001687613212565b61210c6001600160601b037f0000000000000000000000000000000000000000000000000000000000000000168a613241565b612136427f00000000000000000000000000000000000000000000000000000000000000006132e5565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518763ffffffff1660e01b8152600401612199969594939291906130c4565b60206040518083038186803b1580156121b157600080fd5b505af41580156121c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e99190612e9e565b61076891906131d8565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60036040516122259190612ef0565b604051809103902061223561084b565b80516020918201206040805192830194909452928101919091526060810191909152608081018390523060a082015260c001604051602081830303815290604052805190602001209050919050565b60006108216000547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016122d89190612f8c565b60206040518083038186803b1580156122f057600080fd5b505afa158015612304573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123289190612ebb565b61233291906131c0565b612a73565b60007f000000000000000000000000000000000000000000000000000000000000000063ffffffff16421061237e5760405162461bcd60e51b815260040161091890612fd3565b6001600160601b037f00000000000000000000000000000000000000000000000000000000000000001673__$14acc0473240a59aaba421130bb5369487$__639a7d15706120a68387613212565b60075442906000906123eb90600160e01b900463ffffffff16836132e5565b905060008163ffffffff1611801561240b57506001600160701b03841615155b801561241f57506001600160701b03831615155b156124825760006124446001600160701b038516676765c793fa10079d601b1b613267565b90506001600160701b03851661246063ffffffff841683613267565b61246a91906131fe565b6008600082825461247b91906131c0565b9091555050505b612494866001600160801b0316612a9c565b600780546001600160701b0319166001600160701b03929092169190911790556124c66001600160801b038616612a9c565b600780546001600160701b03908116600160701b93821684026001600160e01b031617600160e01b63ffffffff8716021791829055600854604080518484168152949093049091166020840152908201527f17be3acebd510daa18778e1ee1fbaf88237b124dc0803c3be2fd4f99f3e69d339060600160405180910390a1505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916125a89190612ed4565b6000604051808303816000865af19150503d80600081146125e5576040519150601f19603f3d011682016040523d82523d6000602084013e6125ea565b606091505b50915091508180156126145750805115806126145750808060200190518101906126149190612db3565b61263a5761262181612ace565b60405162461bcd60e51b81526004016109189190612fa0565b5050505050565b600060016001607f1b036001600160801b03831611156126735760405162461bcd60e51b815260040161091890612ffb565b5090565b60006108217f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016126c89190612f8c565b60206040518083038186803b1580156126e057600080fd5b505afa1580156126f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123329190612ebb565b60007f000000000000000000000000000000000000000000000000000000000000000063ffffffff16421061275f5760405162461bcd60e51b815260040161091890612fd3565b60006001600160601b037f00000000000000000000000000000000000000000000000000000000000000001673__$14acc0473240a59aaba421130bb5369487$__635fd8dc086127af8388613241565b6127e26001600160601b037f00000000000000000000000000000000000000000000000000000000000000001688613241565b6128156001600160601b037f0000000000000000000000000000000000000000000000000000000000000000168b613241565b61283f427f00000000000000000000000000000000000000000000000000000000000000006132e5565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518763ffffffff1660e01b81526004016128a29695949392919061310f565b60206040518083038186803b1580156128ba57600080fd5b505af41580156128ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128f29190612e9e565b6128fc91906131d8565b90506129088185613195565b6001600160801b03166115f186856132ae565b60006001600160801b038211156126735760405162461bcd60e51b815260040161091890612ffb565b6001600160a01b0382166000908152600160205260408120546129689083906131c0565b6001600160a01b038416600090815260016020526040812091909155546129909083906131c0565b60009081556040518381526001600160a01b0385169190600080516020613468833981519152906020015b60405180910390a350600192915050565b60006001600160ff1b038211156126735760405162461bcd60e51b815260040161091890612ffb565b6001600160a01b038216600090815260016020526040812054821115612a2d5760405162461bcd60e51b815260040161091890613022565b6001600160a01b038316600081815260016020908152604080832080548790039055825486900383555185815291929160008051602061346883398151915291016129bb565b60006001600160701b038211156126735760405162461bcd60e51b815260040161091890612ffb565b60006001600160701b036001600160801b03831611156126735760405162461bcd60e51b815260040161091890612ffb565b6060604482511015612b1357505060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c79000000602082015290565b60048201915081806020019051810190612b2d9190612dd5565b92915050565b80356001600160a01b0381168114610e7557600080fd5b600060208284031215612b5c57600080fd5b61073c82612b33565b60008060408385031215612b7857600080fd5b612b8183612b33565b9150612b8f60208401612b33565b90509250929050565b600080600060608486031215612bad57600080fd5b612bb684612b33565b9250612bc460208501612b33565b9150604084013590509250925092565b60008060008060808587031215612bea57600080fd5b612bf385612b33565b9350612c0160208601612b33565b93969395505050506040820135916060013590565b600080600080600060a08688031215612c2e57600080fd5b612c3786612b33565b9450612c4560208701612b33565b94979496505050506040830135926060810135926080909101359150565b600080600080600080600060e0888a031215612c7e57600080fd5b612c8788612b33565b9650612c9560208901612b33565b95506040880135945060608801359350608088013560ff81168114612cb957600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215612ce957600080fd5b612cf283612b33565b91506020830135612d028161340f565b809150509250929050565b600080600060608486031215612d2257600080fd5b612d2b84612b33565b92506020840135612d3b8161340f565b91506040840135612d4b8161340f565b809150509250925092565b60008060408385031215612d6957600080fd5b612d7283612b33565b946020939093013593505050565b600080600060608486031215612d9557600080fd5b612d9e84612b33565b95602085013595506040909401359392505050565b600060208284031215612dc557600080fd5b8151801515811461073c57600080fd5b600060208284031215612de757600080fd5b81516001600160401b0380821115612dfe57600080fd5b818401915084601f830112612e1257600080fd5b815181811115612e2457612e246133f9565b604051601f8201601f19908116603f01168101908382118183101715612e4c57612e4c6133f9565b81604052828152876020848701011115612e6557600080fd5b612e76836020830160208801613302565b979650505050505050565b600060208284031215612e9357600080fd5b813561073c8161340f565b600060208284031215612eb057600080fd5b815161073c8161340f565b600060208284031215612ecd57600080fd5b5051919050565b60008251612ee6818460208701613302565b9190910192915050565b600080835481600182811c915080831680612f0c57607f831692505b6020808410821415612f2c57634e487b7160e01b86526022600452602486fd5b818015612f405760018114612f5157612f7e565b60ff19861689528489019650612f7e565b60008a81526020902060005b86811015612f765781548b820152908501908301612f5d565b505084890196505b509498975050505050505050565b6001600160a01b0391909116815260200190565b6020815260008251806020840152612fbf816040850160208701613302565b601f01601f19169190910160400192915050565b6020808252600e908201526d506f6f6c3a20546f6f206c61746560901b604082015260600190565b6020808252600d908201526c43617374206f766572666c6f7760981b604082015260600190565b6020808252601b908201527a45524332303a20496e73756666696369656e742062616c616e636560281b604082015260600190565b6020808252601e908201527f506f6f6c3a204e6f7420656e6f756768206261736520746f6b656e20696e0000604082015260600190565b6020808252601c908201527b141bdbdb0e8814995cd95c9d995cc81c985d1a5bc818da185b99d95960221b604082015260600190565b6001600160701b0396871681529490951660208501526001600160801b0392909216604084015263ffffffff166060830152600f90810b60808301529190910b60a082015260c00190565b6001600160801b039687168152948616602086015292909416604084015263ffffffff166060830152600f92830b608083015290910b60a082015260c00190565b63ffffffff939093168352600f91820b6020840152900b604082015260600190565b63ffffffff94909416845260208401929092526040830152606082015260800190565b60006001600160801b038281168482168083038211156131b7576131b76133cd565b01949350505050565b600082198211156131d3576131d36133cd565b500190565b60006001600160801b03838116806131f2576131f26133e3565b92169190910492915050565b60008261320d5761320d6133e3565b500490565b60006001600160701b0382811684821681151582840482111615613238576132386133cd565b02949350505050565b60006001600160801b0382811684821681151582840482111615613238576132386133cd565b6000816000190483118215151615613281576132816133cd565b500290565b60006001600160701b03838116908316818110156132a6576132a66133cd565b039392505050565b60006001600160801b03838116908316818110156132a6576132a66133cd565b6000828210156132e0576132e06133cd565b500390565b600063ffffffff838116908316818110156132a6576132a66133cd565b60005b8381101561331d578181015183820152602001613305565b8381111561332c576000848401525b50505050565b600181811c9082168061334657607f821691505b6020821081141561336757634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613381576133816133cd565b5060010190565b6000600f82900b60016001607f1b03198114156133a7576133a76133cd565b60000392915050565b6000600160ff1b8214156133c6576133c66133cd565b5060000390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160801b038116811461342457600080fd5b5056fe05e533e65fa7a345b42a006257cdd31febe912eacbbaaa92299c7a931895c529b8aaa3347fac66c4197e2ddb56d1b1e06fa6f7ae158c01cb2e7f9f9efb4975bbddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212200f5c95d7666cbd8c9cd99649830d664432f011bb983190438a59ff88489d283464736f6c63430008060033a26469706673582212203ef556801cb71cb001e6a159a09b035c2403a2e064a6fe7bfa66f2cae0aa1cc564736f6c63430008060033",
  "libraries": {
    "YieldMath": "0xaAce8Db985F05794634b39739ccD7a049Cd8CB8d",
    "SafeERC20Namer": "0x608746FD624216250BF7C41153B1113f6FdE5423"
  },
  "devdoc": {
    "details": "The PoolFactory can deterministically create new pool instances.",
    "kind": "dev",
    "methods": {
      "calculatePoolAddress(address,address)": {
        "details": "Calculate the deterministic addreess of a pool, based on the base token & fy token.",
        "params": {
          "base": "Address of the base token (such as Base).",
          "fyToken": "Address of the fixed yield token (such as fyToken)."
        },
        "returns": {
          "_0": "The calculated pool address."
        }
      },
      "createPool(address,address)": {
        "details": "Deploys a new pool. base & fyToken are written to temporary storage slots to allow for simpler address calculation, while still allowing the Pool contract to store the values as immutable.",
        "params": {
          "base": "Address of the base token (such as Base).",
          "fyToken": "Address of the fixed yield token (such as fyToken)."
        },
        "returns": {
          "_0": "pool The pool address."
        }
      },
      "getPool(address,address)": {
        "details": "Calculate the addreess of a pool, and return address(0) if not deployed.",
        "params": {
          "base": "Address of the base token (such as Base).",
          "fyToken": "Address of the fixed yield token (such as fyToken)."
        },
        "returns": {
          "pool": "The deployed pool address."
        }
      },
      "getRoleAdmin(bytes4)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes4,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "grantRoles(bytes4[],address)": {
        "details": "Grants all of `role` in `roles` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - For each `role` in `roles`, the caller must have ``role``'s admin role."
      },
      "hasRole(bytes4,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "lockRole(bytes4)": {
        "details": "Sets LOCK as ``role``'s admin role. LOCK has no members, so this disables admin management of ``role``. Emits a {RoleAdminChanged} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "renounceRole(bytes4,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes4,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "revokeRoles(bytes4[],address)": {
        "details": "Revokes all of `role` in `roles` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - For each `role` in `roles`, the caller must have ``role``'s admin role."
      },
      "setParameter(bytes32,int128)": {
        "details": "Set the ts, g1 or g2 parameters"
      },
      "setRoleAdmin(bytes4,bytes4)": {
        "details": "Sets `adminRole` as ``role``'s admin role. If ``role``'s admin role is not `adminRole` emits a {RoleAdminChanged} event. Requirements: - the caller must have ``role``'s admin role."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "POOL_BYTECODE_HASH()": {
        "notice": "Pre-hashing the bytecode allows calculatePoolAddress to be cheaper, and makes client-side address calculation easier"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15,
        "contract": "contracts/space/PoolFactory.sol:PoolFactory",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes4,t_struct(RoleData)10_storage)"
      },
      {
        "astId": 7808,
        "contract": "contracts/space/PoolFactory.sol:PoolFactory",
        "label": "nextBase",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7811,
        "contract": "contracts/space/PoolFactory.sol:PoolFactory",
        "label": "nextFYToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7829,
        "contract": "contracts/space/PoolFactory.sol:PoolFactory",
        "label": "ts",
        "offset": 0,
        "slot": "3",
        "type": "t_int128"
      },
      {
        "astId": 7847,
        "contract": "contracts/space/PoolFactory.sol:PoolFactory",
        "label": "g1",
        "offset": 16,
        "slot": "3",
        "type": "t_int128"
      },
      {
        "astId": 7865,
        "contract": "contracts/space/PoolFactory.sol:PoolFactory",
        "label": "g2",
        "offset": 0,
        "slot": "4",
        "type": "t_int128"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes4,t_struct(RoleData)10_storage)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)10_storage"
      },
      "t_struct(RoleData)10_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 7,
            "contract": "contracts/space/PoolFactory.sol:PoolFactory",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 9,
            "contract": "contracts/space/PoolFactory.sol:PoolFactory",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes4"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}